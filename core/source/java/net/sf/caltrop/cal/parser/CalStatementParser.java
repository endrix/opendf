
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 19 18:45:35 PDT 2007
//----------------------------------------------------

package net.sf.caltrop.cal.parser;

import java_cup.runtime.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

/** CUP v0.10k generated parser.
  * @version Tue Jun 19 18:45:35 PDT 2007
  */
public class CalStatementParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalStatementParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalStatementParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ac\000\002\002\004\000\002\003\005\000\002\003" +
    "\010\000\002\004\003\000\002\004\004\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\017\000" +
    "\002\007\016\000\002\007\006\000\002\010\003\000\002" +
    "\011\002\000\002\011\003\000\002\012\002\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\004\000\002\013\006\000" +
    "\002\014\004\000\002\014\006\000\002\015\003\000\002" +
    "\015\005\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\005\000\002\022\002\000\002\022\003\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\025\003\000\002\025\005\000\002\027\014" +
    "\000\002\027\005\000\002\031\002\000\002\031\004\000" +
    "\002\032\013\000\002\032\005\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\006\000\002\034" +
    "\003\000\002\034\004\000\002\030\002\000\002\030\004" +
    "\000\002\035\002\000\002\035\004\000\002\036\005\000" +
    "\002\036\005\000\002\037\003\000\002\037\005\000\002" +
    "\040\002\000\002\040\003\000\002\041\005\000\002\042" +
    "\005\000\002\043\003\000\002\043\005\000\002\044\002" +
    "\000\002\044\003\000\002\045\003\000\002\046\003\000" +
    "\002\046\005\000\002\047\002\000\002\047\003\000\002" +
    "\070\003\000\002\070\003\000\002\071\003\000\002\071" +
    "\005\000\002\072\002\000\002\072\003\000\002\050\005" +
    "\000\002\050\005\000\002\051\011\000\002\051\005\000" +
    "\002\052\014\000\002\053\007\000\002\053\005\000\002" +
    "\054\004\000\002\054\007\000\002\055\002\000\002\055" +
    "\004\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\057\005\000\002\057\007\000\002" +
    "\060\003\000\002\060\006\000\002\060\006\000\002\060" +
    "\005\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\005\000\002\062\012\000\002\062" +
    "\005\000\002\063\004\000\002\063\006\000\002\064\004" +
    "\000\002\064\004\000\002\065\004\000\002\065\005\000" +
    "\002\066\003\000\002\066\004\000\002\067\003\000\002" +
    "\067\004\000\002\077\005\000\002\077\006\000\002\076" +
    "\003\000\002\076\005\000\002\076\005\000\002\100\002" +
    "\000\002\100\004\000\002\101\002\000\002\101\004\000" +
    "\002\102\003\000\002\102\004\000\002\103\002\000\002" +
    "\103\003\000\002\104\006\000\002\104\005\000\002\104" +
    "\007\000\002\104\005\000\002\105\011\000\002\105\010" +
    "\000\002\105\006\000\002\105\004\000\002\106\005\000" +
    "\002\106\007\000\002\107\003\000\002\107\004\000\002" +
    "\107\005\000\002\110\003\000\002\110\005\000\002\111" +
    "\002\000\002\111\003\000\002\112\005\000\002\112\005" +
    "\000\002\113\005\000\002\114\003\000\002\114\005\000" +
    "\002\115\010\000\002\116\003\000\002\116\005\000\002" +
    "\117\002\000\002\117\003\000\002\120\002\000\002\120" +
    "\005\000\002\120\005\000\002\121\003\000\002\121\005" +
    "\000\002\122\004\000\002\122\005\000\002\123\003\000" +
    "\002\123\005\000\002\124\002\000\002\124\003\000\002" +
    "\125\004\000\002\125\005\000\002\126\003\000\002\126" +
    "\005\000\002\127\002\000\002\127\003\000\002\132\002" +
    "\000\002\132\004\000\002\133\002\000\002\133\004\000" +
    "\002\134\003\000\002\134\003\000\002\135\005\000\002" +
    "\136\006\000\002\136\005\000\002\137\003\000\002\137" +
    "\003\000\002\140\005\000\002\140\005\000\002\141\003" +
    "\000\002\142\005\000\002\142\006\000\002\142\006\000" +
    "\002\142\006\000\002\142\011\000\002\142\013\000\002" +
    "\143\005\000\002\144\003\000\002\144\003\000\002\145" +
    "\004\000\002\145\004\000\002\146\003\000\002\146\003" +
    "\000\002\146\003\000\002\147\003\000\002\150\003\000" +
    "\002\150\003\000\002\150\003\000\002\150\003\000\002" +
    "\150\003\000\002\150\003\000\002\150\003\000\002\150" +
    "\003\000\002\150\003\000\002\150\004\000\002\151\003" +
    "\000\002\151\004\000\002\152\002\000\002\152\003\000" +
    "\002\153\006\000\002\154\003\000\002\154\006\000\002" +
    "\154\005\000\002\157\010\000\002\157\005\000\002\155" +
    "\007\000\002\155\005\000\002\155\005\000\002\156\007" +
    "\000\002\160\007\000\002\160\005\000\002\161\004\000" +
    "\002\161\005\000\002\162\005\000\002\162\004\000\002" +
    "\162\004\000\002\163\007\000\002\163\011\000\002\164" +
    "\010\000\002\164\005\000\002\165\002\000\002\165\004" +
    "\000\002\166\003\000\002\166\003\000\002\166\003\000" +
    "\002\166\003\000\002\166\003\000\002\167\005\000\002" +
    "\167\006\000\002\167\007\000\002\170\006\000\002\171" +
    "\006\000\002\172\003\000\002\172\005\000\002\173\002" +
    "\000\002\173\004\000\002\173\005\000\002\174\003\000" +
    "\002\174\005\000\002\175\003\000\002\176\005\000\002" +
    "\177\003\000\002\073\003\000\002\074\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\227\003\000\002\227\003\000\002\230\003\000" +
    "\002\130\004\000\002\131\002\000\002\131\005\000\002" +
    "\231\003\000\002\231\003\000\002\200\002\000\002\200" +
    "\004\000\002\202\002\000\002\202\003\000\002\203\002" +
    "\000\002\203\003\000\002\204\002\000\002\204\004\000" +
    "\002\205\003\000\002\205\003\000\002\206\003\000\002" +
    "\206\003\000\002\207\003\000\002\207\003\000\002\210" +
    "\003\000\002\210\003\000\002\211\003\000\002\211\003" +
    "\000\002\212\003\000\002\212\003\000\002\213\003\000" +
    "\002\213\003\000\002\214\003\000\002\214\003\000\002" +
    "\215\003\000\002\215\003\000\002\216\003\000\002\216" +
    "\003\000\002\217\003\000\002\217\003\000\002\220\003" +
    "\000\002\220\003\000\002\221\003\000\002\221\003\000" +
    "\002\222\003\000\002\222\003\000\002\223\003\000\002" +
    "\223\003\000\002\224\003\000\002\224\003\000\002\225" +
    "\003\000\002\225\003\000\002\232\002\000\002\232\004" +
    "\000\002\233\002\000\002\233\003\000\002\234\002\000" +
    "\002\234\003\000\002\201\002\000\002\201\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\074\002\uff10\003\046\005\023\006\010\007" +
    "\051\011\013\012\057\013\036\014\063\022\037\025\034" +
    "\026\006\027\030\061\071\062\020\063\055\067\040\074" +
    "\061\075\ufe85\076\004\103\050\104\031\110\067\121\045" +
    "\123\060\137\056\140\053\141\066\150\014\001\002\000" +
    "\004\137\u0171\001\002\000\122\004\uff85\010\uff85\020\uff85" +
    "\025\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\045" +
    "\uff85\046\uff85\051\uff85\052\uff85\077\uff85\102\uff85\105\uff85" +
    "\116\uff85\120\uff85\122\uff85\124\uff85\125\uff85\126\uff85\127" +
    "\uff85\130\uff85\131\uff85\132\uff85\133\uff85\135\uff85\136\uff85" +
    "\140\uff85\141\uff85\142\uff85\143\uff85\144\uff85\145\uff85\146" +
    "\uff85\147\uff85\150\uff85\151\uff85\153\uff85\001\002\000\004" +
    "\075\ufe84\001\002\000\004\075\u0166\001\002\000\126\004" +
    "\ufe8d\006\ufe8d\010\ufe8d\020\ufe8d\025\ufe8d\032\ufe8d\033\ufe8d" +
    "\034\ufe8d\035\ufe8d\036\ufe8d\045\ufe8d\046\ufe8d\051\ufe8d\052" +
    "\ufe8d\071\ufe8d\077\ufe8d\102\ufe8d\105\ufe8d\116\ufe8d\120\ufe8d" +
    "\122\ufe8d\124\ufe8d\125\ufe8d\126\ufe8d\127\ufe8d\130\ufe8d\131" +
    "\ufe8d\132\ufe8d\133\ufe8d\135\ufe8d\136\ufe8d\140\ufe8d\141\ufe8d" +
    "\142\ufe8d\143\ufe8d\144\ufe8d\145\ufe8d\146\ufe8d\147\ufe8d\150" +
    "\ufe8d\151\ufe8d\153\ufe8d\001\002\000\100\002\uff0f\003\046" +
    "\005\023\006\010\007\051\011\013\012\057\013\036\014" +
    "\063\022\037\025\034\026\006\027\030\036\uff0f\057\uff0f" +
    "\061\071\062\020\063\055\067\040\074\061\075\ufe85\076" +
    "\004\103\050\104\031\110\067\121\045\123\060\137\056" +
    "\140\053\141\066\150\014\001\002\000\122\004\uff84\010" +
    "\uff84\020\uff84\025\uff84\032\uff84\033\uff84\034\uff84\035\uff84" +
    "\036\uff84\045\uff84\046\uff84\051\uff84\052\uff84\077\uff84\102" +
    "\uff84\105\uff84\116\uff84\120\uff84\122\uff84\124\uff84\125\uff84" +
    "\126\uff84\127\uff84\130\uff84\131\uff84\132\uff84\133\uff84\135" +
    "\uff84\136\uff84\140\uff84\141\uff84\142\uff84\143\uff84\144\uff84" +
    "\145\uff84\146\uff84\147\uff84\150\uff84\151\uff84\153\uff84\001" +
    "\002\000\122\004\uff92\010\uff92\020\uff92\025\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\045\uff92\046\uff92\051" +
    "\uff92\052\uff92\077\uff92\102\uff92\105\uff92\116\uff92\120\uff92" +
    "\122\uff92\124\uff92\125\uff92\126\uff92\127\uff92\130\uff92\131" +
    "\uff92\132\uff92\133\uff92\135\uff92\136\uff92\140\uff92\141\uff92" +
    "\142\uff92\143\uff92\144\uff92\145\uff92\146\uff92\147\uff92\150" +
    "\uff92\151\uff92\153\uff92\001\002\000\116\002\uff1c\003\uff1c" +
    "\005\uff1c\006\uff1c\007\uff1c\011\uff1c\012\uff1c\013\uff1c\014" +
    "\uff1c\022\uff1c\025\uff1c\026\uff1c\027\uff1c\035\uff1c\036\uff1c" +
    "\042\uff1c\043\uff1c\044\uff1c\046\uff1c\054\uff1c\055\uff1c\057" +
    "\uff1c\061\uff1c\062\uff1c\063\uff1c\067\uff1c\074\uff1c\075\uff1c" +
    "\076\uff1c\103\uff1c\104\uff1c\110\uff1c\121\uff1c\123\uff1c\137" +
    "\uff1c\140\uff1c\141\uff1c\150\uff1c\001\002\000\122\004\uff83" +
    "\010\uff83\020\uff83\025\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\045\uff83\046\uff83\051\uff83\052\uff83\077\uff83" +
    "\102\uff83\105\uff83\116\uff83\120\uff83\122\uff83\124\uff83\125" +
    "\uff83\126\uff83\127\uff83\130\uff83\131\uff83\132\uff83\133\uff83" +
    "\135\uff83\136\uff83\140\uff83\141\uff83\142\uff83\143\uff83\144" +
    "\uff83\145\uff83\146\uff83\147\uff83\150\uff83\151\uff83\153\uff83" +
    "\001\002\000\116\002\uff1a\003\uff1a\005\uff1a\006\uff1a\007" +
    "\uff1a\011\uff1a\012\uff1a\013\uff1a\014\uff1a\022\uff1a\025\uff1a" +
    "\026\uff1a\027\uff1a\035\uff1a\036\uff1a\042\uff1a\043\uff1a\044" +
    "\uff1a\046\uff1a\054\uff1a\055\uff1a\057\uff1a\061\uff1a\062\uff1a" +
    "\063\uff1a\067\uff1a\074\uff1a\075\uff1a\076\uff1a\103\uff1a\104" +
    "\uff1a\110\uff1a\121\uff1a\123\uff1a\137\uff1a\140\uff1a\141\uff1a" +
    "\150\uff1a\001\002\000\004\125\u0163\001\002\000\012\003" +
    "\ufe5f\006\ufe5f\140\ufe5f\141\ufe5f\001\002\000\122\004\uff88" +
    "\010\uff88\020\uff88\025\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\045\uff88\046\uff88\051\uff88\052\uff88\077\uff88" +
    "\102\uff88\105\uff88\116\uff88\120\uff88\122\uff88\124\uff88\125" +
    "\uff88\126\uff88\127\uff88\130\uff88\131\uff88\132\uff88\133\uff88" +
    "\135\uff88\136\uff88\140\uff88\141\uff88\142\uff88\143\uff88\144" +
    "\uff88\145\uff88\146\uff88\147\uff88\150\uff88\151\uff88\153\uff88" +
    "\001\002\000\122\004\uff91\010\uff91\020\uff91\025\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\045\uff91\046\uff91" +
    "\051\uff91\052\uff91\077\uff91\102\uff91\105\uff91\116\uff91\120" +
    "\uff91\122\uff91\124\uff91\125\uff91\126\uff91\127\uff91\130\uff91" +
    "\131\uff91\132\uff91\133\uff91\135\uff91\136\uff91\140\uff91\141" +
    "\uff91\142\uff91\143\uff91\144\uff91\145\uff91\146\uff91\147\uff91" +
    "\150\uff91\151\uff91\153\uff91\001\002\000\122\004\ufe8f\010" +
    "\ufe8f\020\ufe8f\025\ufe8f\032\ufe8f\033\ufe8f\034\ufe8f\035\ufe8f" +
    "\036\ufe8f\045\ufe8f\046\ufe8f\051\ufe8f\052\ufe8f\077\ufe8f\102" +
    "\ufe8f\105\ufe8f\116\ufe8f\120\ufe8f\122\ufe8f\124\ufe8f\125\ufe8f" +
    "\126\ufe8f\127\ufe8f\130\ufe8f\131\ufe8f\132\ufe8f\133\ufe8f\135" +
    "\ufe8f\136\ufe8f\140\ufe8f\141\ufe8f\142\ufe8f\143\ufe8f\144\ufe8f" +
    "\145\ufe8f\146\ufe8f\147\ufe8f\150\ufe8f\151\ufe8f\153\ufe8f\001" +
    "\002\000\016\006\010\030\u0159\036\u0140\041\u013e\140\112" +
    "\141\104\001\002\000\116\002\uff14\003\uff14\005\uff14\006" +
    "\uff14\007\uff14\011\uff14\012\uff14\013\uff14\014\uff14\022\uff14" +
    "\025\uff14\026\uff14\027\uff14\035\uff14\036\uff14\042\uff14\043" +
    "\uff14\044\uff14\046\uff14\054\uff14\055\uff14\057\uff14\061\uff14" +
    "\062\uff14\063\uff14\067\uff14\074\uff14\075\uff14\076\uff14\103" +
    "\uff14\104\uff14\110\uff14\121\uff14\123\uff14\137\uff14\140\uff14" +
    "\141\uff14\150\uff14\001\002\000\122\004\uff89\010\uff89\020" +
    "\uff89\025\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89" +
    "\045\uff89\046\uff89\051\uff89\052\uff89\077\uff89\102\uff89\105" +
    "\uff89\116\uff89\120\uff89\122\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\130\uff89\131\uff89\132\uff89\133\uff89\135\uff89\136" +
    "\uff89\140\uff89\141\uff89\142\uff89\143\uff89\144\uff89\145\uff89" +
    "\146\uff89\147\uff89\150\uff89\151\uff89\153\uff89\001\002\000" +
    "\122\004\uff81\010\uff81\020\uff81\025\uff81\032\uff81\033\uff81" +
    "\034\uff81\035\uff81\036\uff81\045\uff81\046\uff81\051\uff81\052" +
    "\uff81\077\uff81\102\uff81\105\uff81\116\uff81\120\uff81\122\uff81" +
    "\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131\uff81\132" +
    "\uff81\133\uff81\135\uff81\136\uff81\140\uff81\141\uff81\142\uff81" +
    "\143\uff81\144\uff81\145\uff81\146\uff81\147\uff81\150\uff81\151" +
    "\uff81\153\uff81\001\002\000\010\003\u014c\062\020\063\055" +
    "\001\002\000\004\006\010\001\002\000\122\004\uff80\010" +
    "\uff80\020\uff80\025\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
    "\036\uff80\045\uff80\046\uff80\051\uff80\052\uff80\077\uff80\102" +
    "\uff80\105\uff80\116\uff80\120\uff80\122\uff80\124\uff80\125\uff80" +
    "\126\uff80\127\uff80\130\uff80\131\uff80\132\uff80\133\uff80\135" +
    "\uff80\136\uff80\140\uff80\141\uff80\142\uff80\143\uff80\144\uff80" +
    "\145\uff80\146\uff80\147\uff80\150\uff80\151\uff80\153\uff80\001" +
    "\002\000\116\002\uff17\003\uff17\005\uff17\006\uff17\007\uff17" +
    "\011\uff17\012\uff17\013\uff17\014\uff17\022\uff17\025\uff17\026" +
    "\uff17\027\uff17\035\uff17\036\uff17\042\uff17\043\uff17\044\uff17" +
    "\046\uff17\054\uff17\055\uff17\057\uff17\061\uff17\062\uff17\063" +
    "\uff17\067\uff17\074\uff17\075\uff17\076\uff17\103\uff17\104\uff17" +
    "\110\uff17\121\uff17\123\uff17\137\uff17\140\uff17\141\uff17\150" +
    "\uff17\001\002\000\076\003\u0142\005\023\006\010\007\051" +
    "\011\013\012\057\013\036\014\063\022\037\025\034\026" +
    "\006\027\030\033\ufe57\061\071\062\020\063\055\067\040" +
    "\074\061\075\ufe85\076\004\103\050\104\031\110\067\121" +
    "\045\122\257\123\060\137\056\140\053\141\066\150\014" +
    "\001\002\000\116\002\uff18\003\uff18\005\uff18\006\uff18\007" +
    "\uff18\011\uff18\012\uff18\013\uff18\014\uff18\022\uff18\025\uff18" +
    "\026\uff18\027\uff18\035\uff18\036\uff18\042\uff18\043\uff18\044" +
    "\uff18\046\uff18\054\uff18\055\uff18\057\uff18\061\uff18\062\uff18" +
    "\063\uff18\067\uff18\074\uff18\075\uff18\076\uff18\103\uff18\104" +
    "\uff18\110\uff18\121\uff18\123\uff18\137\uff18\140\uff18\141\uff18" +
    "\150\uff18\001\002\000\122\004\ufe8e\010\ufe8e\020\ufe8e\025" +
    "\ufe8e\032\ufe8e\033\ufe8e\034\ufe8e\035\ufe8e\036\ufe8e\045\ufe8e" +
    "\046\ufe8e\051\ufe8e\052\ufe8e\077\ufe8e\102\ufe8e\105\ufe8e\116" +
    "\ufe8e\120\ufe8e\122\ufe8e\124\ufe8e\125\ufe8e\126\ufe8e\127\ufe8e" +
    "\130\ufe8e\131\ufe8e\132\ufe8e\133\ufe8e\135\ufe8e\136\ufe8e\140" +
    "\ufe8e\141\ufe8e\142\ufe8e\143\ufe8e\144\ufe8e\145\ufe8e\146\ufe8e" +
    "\147\ufe8e\150\ufe8e\151\ufe8e\153\ufe8e\001\002\000\116\003" +
    "\u013b\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\116\003\173\004\130\005\023\006\010\007\051\010\137" +
    "\011\013\012\057\013\036\014\063\020\126\026\006\032" +
    "\134\034\143\061\071\067\136\074\061\075\ufe85\076\004" +
    "\077\144\102\125\103\050\104\031\105\131\110\067\121" +
    "\045\127\146\132\133\133\121\135\150\136\122\137\056" +
    "\140\053\141\066\142\127\143\135\144\132\151\124\001" +
    "\002\000\004\002\u0131\001\002\000\010\131\u012a\140\u0129" +
    "\141\u0128\001\002\000\116\002\uff12\003\uff12\005\uff12\006" +
    "\uff12\007\uff12\011\uff12\012\uff12\013\uff12\014\uff12\022\uff12" +
    "\025\uff12\026\uff12\027\uff12\035\uff12\036\uff12\042\uff12\043" +
    "\uff12\044\uff12\046\uff12\054\uff12\055\uff12\057\uff12\061\uff12" +
    "\062\uff12\063\uff12\067\uff12\074\uff12\075\uff12\076\uff12\103" +
    "\uff12\104\uff12\110\uff12\121\uff12\123\uff12\137\uff12\140\uff12" +
    "\141\uff12\150\uff12\001\002\000\056\004\uff8d\010\uff8d\020" +
    "\uff8d\032\uff8d\034\uff8d\035\uff8d\077\uff8d\102\uff8d\105\uff8d" +
    "\125\uff0d\127\uff8d\131\uff8d\132\uff8d\133\uff8d\135\uff8d\136" +
    "\uff8d\140\uff8d\141\uff8d\142\uff8d\143\uff8d\144\uff8d\151\uff8d" +
    "\001\002\000\122\004\uff90\010\uff90\020\uff90\025\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\045\uff90\046\uff90" +
    "\051\uff90\052\uff90\077\uff90\102\uff90\105\uff90\116\uff90\120" +
    "\uff90\122\uff90\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90" +
    "\131\uff90\132\uff90\133\uff90\135\uff90\136\uff90\140\uff90\141" +
    "\uff90\142\uff90\143\uff90\144\uff90\145\uff90\146\uff90\147\uff90" +
    "\150\uff90\151\uff90\153\uff90\001\002\000\004\150\u0127\001" +
    "\002\000\006\126\u0123\147\u0124\001\002\000\122\004\uff93" +
    "\010\uff93\020\uff93\025\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\045\uff93\046\uff93\051\uff93\052\uff93\077\uff93" +
    "\102\uff93\105\uff93\116\uff93\120\uff93\122\uff93\124\uff93\125" +
    "\uff93\126\uff93\127\uff93\130\uff93\131\uff93\132\uff93\133\uff93" +
    "\135\uff93\136\uff93\140\uff93\141\uff93\142\uff93\143\uff93\144" +
    "\uff93\145\uff93\146\uff93\147\uff93\150\uff93\151\uff93\153\uff93" +
    "\001\002\000\122\004\uff94\010\uff94\020\uff94\025\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\045\uff94\046\uff94" +
    "\051\uff94\052\uff94\077\uff94\102\uff94\105\uff94\116\uff94\120" +
    "\uff94\122\uff94\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94" +
    "\131\uff94\132\uff94\133\uff94\135\uff94\136\uff94\140\uff94\141" +
    "\uff94\142\uff94\143\uff94\144\uff94\145\uff94\146\uff94\147\uff94" +
    "\150\uff94\151\uff94\153\uff94\001\002\000\116\002\uff16\003" +
    "\uff16\005\uff16\006\uff16\007\uff16\011\uff16\012\uff16\013\uff16" +
    "\014\uff16\022\uff16\025\uff16\026\uff16\027\uff16\035\uff16\036" +
    "\uff16\042\uff16\043\uff16\044\uff16\046\uff16\054\uff16\055\uff16" +
    "\057\uff16\061\uff16\062\uff16\063\uff16\067\uff16\074\uff16\075" +
    "\uff16\076\uff16\103\uff16\104\uff16\110\uff16\121\uff16\123\uff16" +
    "\137\uff16\140\uff16\141\uff16\150\uff16\001\002\000\116\004" +
    "\130\005\023\006\010\007\051\010\137\011\013\012\057" +
    "\013\036\014\063\020\126\026\006\032\134\034\143\061" +
    "\071\067\136\074\061\075\ufe85\076\004\077\144\102\125" +
    "\103\050\104\031\105\131\110\067\121\045\127\146\132" +
    "\133\133\121\135\150\136\122\137\056\140\053\141\066" +
    "\142\127\143\135\144\132\146\u011c\151\124\001\002\000" +
    "\122\004\uff74\010\uff74\020\uff74\025\uff74\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\045\uff74\046\uff74\051\uff74\052" +
    "\uff74\077\uff74\102\uff74\105\uff74\116\uff74\120\uff74\122\uff74" +
    "\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131\uff74\132" +
    "\uff74\133\uff74\135\uff74\136\uff74\140\uff74\141\uff74\142\uff74" +
    "\143\uff74\144\uff74\145\uff74\146\uff74\147\uff74\150\uff74\151" +
    "\uff74\153\uff74\001\002\000\012\003\ufe5e\006\ufe5e\140\ufe5e" +
    "\141\ufe5e\001\002\000\116\004\130\005\023\006\010\007" +
    "\051\010\137\011\013\012\057\013\036\014\063\020\126" +
    "\026\006\032\134\034\143\061\071\067\136\074\061\075" +
    "\ufe85\076\004\077\144\102\125\103\050\104\031\105\131" +
    "\110\067\121\045\127\146\132\133\133\121\135\150\136" +
    "\122\137\056\140\053\141\066\142\127\143\135\144\132" +
    "\145\u0116\151\124\001\002\000\122\004\ufe89\010\ufe89\020" +
    "\ufe89\025\ufe89\032\ufe89\033\ufe89\034\ufe89\035\ufe89\036\ufe89" +
    "\045\ufe89\046\ufe89\051\ufe89\052\ufe89\077\ufe89\102\ufe89\105" +
    "\ufe89\116\ufe89\120\ufe89\122\ufe89\124\ufe89\125\ufe89\126\ufe89" +
    "\127\ufe89\130\ufe89\131\ufe89\132\ufe89\133\ufe89\135\ufe89\136" +
    "\ufe89\140\ufe89\141\ufe89\142\ufe89\143\ufe89\144\ufe89\145\ufe89" +
    "\146\ufe89\147\ufe89\150\ufe89\151\ufe89\153\ufe89\001\002\000" +
    "\116\003\u010e\004\130\005\023\006\010\007\051\010\137" +
    "\011\013\012\057\013\036\014\063\020\126\026\006\032" +
    "\134\034\143\061\071\067\136\074\061\075\ufe85\076\004" +
    "\077\144\102\125\103\050\104\031\105\131\110\067\121" +
    "\045\127\146\132\133\133\121\135\150\136\122\137\056" +
    "\140\053\141\066\142\127\143\135\144\132\151\124\001" +
    "\002\000\020\003\u0106\006\010\065\276\101\275\111\271" +
    "\140\112\141\104\001\002\000\116\002\uff15\003\uff15\005" +
    "\uff15\006\uff15\007\uff15\011\uff15\012\uff15\013\uff15\014\uff15" +
    "\022\uff15\025\uff15\026\uff15\027\uff15\035\uff15\036\uff15\042" +
    "\uff15\043\uff15\044\uff15\046\uff15\054\uff15\055\uff15\057\uff15" +
    "\061\uff15\062\uff15\063\uff15\067\uff15\074\uff15\075\uff15\076" +
    "\uff15\103\uff15\104\uff15\110\uff15\121\uff15\123\uff15\137\uff15" +
    "\140\uff15\141\uff15\150\uff15\001\002\000\122\004\ufe88\010" +
    "\ufe88\020\ufe88\025\ufe88\032\ufe88\033\ufe88\034\ufe88\035\ufe88" +
    "\036\ufe88\045\ufe88\046\ufe88\051\ufe88\052\ufe88\077\ufe88\102" +
    "\ufe88\105\ufe88\116\ufe88\120\ufe88\122\ufe88\124\ufe88\125\ufe88" +
    "\126\ufe88\127\ufe88\130\ufe88\131\ufe88\132\ufe88\133\ufe88\135" +
    "\ufe88\136\ufe88\140\ufe88\141\ufe88\142\ufe88\143\ufe88\144\ufe88" +
    "\145\ufe88\146\ufe88\147\ufe88\150\ufe88\151\ufe88\153\ufe88\001" +
    "\002\000\116\002\uff19\003\uff19\005\uff19\006\uff19\007\uff19" +
    "\011\uff19\012\uff19\013\uff19\014\uff19\022\uff19\025\uff19\026" +
    "\uff19\027\uff19\035\uff19\036\uff19\042\uff19\043\uff19\044\uff19" +
    "\046\uff19\054\uff19\055\uff19\057\uff19\061\uff19\062\uff19\063" +
    "\uff19\067\uff19\074\uff19\075\uff19\076\uff19\103\uff19\104\uff19" +
    "\110\uff19\121\uff19\123\uff19\137\uff19\140\uff19\141\uff19\150" +
    "\uff19\001\002\000\122\004\uff86\010\uff86\020\uff86\025\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\045\uff86\046" +
    "\uff86\051\uff86\052\uff86\077\uff86\102\uff86\105\uff86\116\uff86" +
    "\120\uff86\122\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130" +
    "\uff86\131\uff86\132\uff86\133\uff86\135\uff86\136\uff86\140\uff86" +
    "\141\uff86\142\uff86\143\uff86\144\uff86\145\uff86\146\uff86\147" +
    "\uff86\150\uff86\151\uff86\153\uff86\001\002\000\116\004\130" +
    "\005\023\006\010\007\051\010\137\011\013\012\057\013" +
    "\036\014\063\020\126\026\006\032\134\034\143\061\071" +
    "\067\136\074\061\075\ufe85\076\004\077\144\102\125\103" +
    "\050\104\031\105\131\110\067\121\045\127\146\132\133" +
    "\133\121\135\150\136\122\137\056\140\053\141\066\142" +
    "\127\143\135\144\132\147\376\151\124\001\002\000\006" +
    "\003\363\141\364\001\002\000\122\004\uff96\010\uff96\020" +
    "\uff96\025\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\045\uff96\046\uff96\051\uff96\052\uff96\077\uff96\102\uff96\105" +
    "\uff96\116\uff96\120\uff96\122\uff96\124\uff96\125\uff96\126\uff96" +
    "\127\uff96\130\uff96\131\uff96\132\uff96\133\uff96\135\uff96\136" +
    "\uff96\140\uff96\141\uff96\142\uff96\143\uff96\144\uff96\145\uff96" +
    "\146\uff96\147\uff96\150\uff96\151\uff96\153\uff96\001\002\000" +
    "\122\004\uff95\010\uff95\020\uff95\025\uff95\032\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\045\uff95\046\uff95\051\uff95\052" +
    "\uff95\077\uff95\102\uff95\105\uff95\116\uff95\120\uff95\122\uff95" +
    "\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95\131\uff95\132" +
    "\uff95\133\uff95\135\uff95\136\uff95\140\uff95\141\uff95\142\uff95" +
    "\143\uff95\144\uff95\145\uff95\146\uff95\147\uff95\150\uff95\151" +
    "\uff95\153\uff95\001\002\000\010\033\ufe57\122\257\126\260" +
    "\001\002\000\012\003\111\006\010\140\112\141\104\001" +
    "\002\000\116\002\uff1b\003\uff1b\005\uff1b\006\uff1b\007\uff1b" +
    "\011\uff1b\012\uff1b\013\uff1b\014\uff1b\022\uff1b\025\uff1b\026" +
    "\uff1b\027\uff1b\035\uff1b\036\uff1b\042\uff1b\043\uff1b\044\uff1b" +
    "\046\uff1b\054\uff1b\055\uff1b\057\uff1b\061\uff1b\062\uff1b\063" +
    "\uff1b\067\uff1b\074\uff1b\075\uff1b\076\uff1b\103\uff1b\104\uff1b" +
    "\110\uff1b\121\uff1b\123\uff1b\137\uff1b\140\uff1b\141\uff1b\150" +
    "\uff1b\001\002\000\016\033\uff70\122\uff70\126\uff70\145\uff70" +
    "\146\uff70\153\uff70\001\002\000\122\004\uff82\010\uff82\020" +
    "\uff82\025\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\045\uff82\046\uff82\051\uff82\052\uff82\077\uff82\102\uff82\105" +
    "\uff82\116\uff82\120\uff82\122\uff82\124\uff82\125\uff82\126\uff82" +
    "\127\uff82\130\uff82\131\uff82\132\uff82\133\uff82\135\uff82\136" +
    "\uff82\140\uff82\141\uff82\142\uff82\143\uff82\144\uff82\145\uff82" +
    "\146\uff82\147\uff82\150\uff82\151\uff82\153\uff82\001\002\000" +
    "\122\004\uff87\010\uff87\020\uff87\025\uff87\032\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\045\uff87\046\uff87\051\uff87\052" +
    "\uff87\077\uff87\102\uff87\105\uff87\116\uff87\120\uff87\122\uff87" +
    "\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132" +
    "\uff87\133\uff87\135\uff87\136\uff87\140\uff87\141\uff87\142\uff87" +
    "\143\uff87\144\uff87\145\uff87\146\uff87\147\uff87\150\uff87\151" +
    "\uff87\153\uff87\001\002\000\020\033\uff6d\071\117\122\uff6d" +
    "\126\116\145\uff6d\146\uff6d\153\uff6d\001\002\000\020\006" +
    "\ufef3\122\ufef3\124\ufef3\126\ufef3\127\ufef3\146\ufef3\147\ufef3" +
    "\001\002\000\026\006\ufee4\033\uffda\071\uffda\122\uffda\126" +
    "\uffda\140\224\141\223\145\uffda\146\uffda\153\uffda\001\002" +
    "\000\020\006\ufef7\122\ufef7\124\ufef7\126\ufef7\127\ufef7\146" +
    "\ufef7\147\ufef7\001\002\000\006\006\010\147\uffae\001\002" +
    "\000\020\006\ufef6\122\ufef6\124\ufef6\126\ufef6\127\ufef6\146" +
    "\ufef6\147\ufef6\001\002\000\020\006\ufef5\122\ufef5\124\ufef5" +
    "\126\ufef5\127\ufef5\146\ufef5\147\ufef5\001\002\000\020\006" +
    "\ufef4\122\ufef4\124\ufef4\126\ufef4\127\ufef4\146\ufef4\147\ufef4" +
    "\001\002\000\020\033\uffdc\071\uffdc\122\uffdc\126\uffdc\145" +
    "\uffdc\146\uffdc\153\uffdc\001\002\000\006\036\244\044\242" +
    "\001\002\000\014\006\010\127\uffa9\140\112\141\104\146" +
    "\uffa9\001\002\000\004\006\010\001\002\000\020\033\uff6d" +
    "\071\117\122\uff6d\126\116\145\uff6d\146\uff6d\153\uff6d\001" +
    "\002\000\020\033\uffda\071\uffda\122\uffda\126\uffda\145\uffda" +
    "\146\uffda\153\uffda\001\002\000\004\006\010\001\002\000" +
    "\114\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\016\033\uff71\122\uff71\126\uff71\145\uff71\146\uff71\153\uff71" +
    "\001\002\000\114\004\ufed8\005\ufed8\006\ufed8\007\ufed8\010" +
    "\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\020\ufed8\026\ufed8" +
    "\032\ufed8\034\ufed8\061\ufed8\067\ufed8\074\ufed8\075\ufed8\076" +
    "\ufed8\077\ufed8\102\ufed8\103\ufed8\104\ufed8\105\ufed8\110\ufed8" +
    "\121\ufed8\127\ufed8\132\ufed8\133\ufed8\135\ufed8\136\ufed8\137" +
    "\ufed8\140\ufed8\141\ufed8\142\ufed8\143\ufed8\144\ufed8\151\ufed8" +
    "\001\002\000\114\004\ufed7\005\ufed7\006\ufed7\007\ufed7\010" +
    "\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\020\ufed7\026\ufed7" +
    "\032\ufed7\034\ufed7\061\ufed7\067\ufed7\074\ufed7\075\ufed7\076" +
    "\ufed7\077\ufed7\102\ufed7\103\ufed7\104\ufed7\105\ufed7\110\ufed7" +
    "\121\ufed7\127\ufed7\132\ufed7\133\ufed7\135\ufed7\136\ufed7\137" +
    "\ufed7\140\ufed7\141\ufed7\142\ufed7\143\ufed7\144\ufed7\151\ufed7" +
    "\001\002\000\112\004\130\010\137\020\126\025\uffa6\032" +
    "\134\033\uffa6\034\143\035\uffa6\036\uffa6\045\uffa6\046\uffa6" +
    "\051\uffa6\052\uffa6\077\144\102\125\105\131\116\uffa6\120" +
    "\uffa6\122\uffa6\124\uffa6\126\uffa6\127\146\130\uffa6\132\133" +
    "\133\121\135\150\136\122\142\127\143\135\144\132\145" +
    "\uffa6\146\uffa6\147\uffa6\150\uffa6\151\124\153\uffa6\001\002" +
    "\000\114\004\ufed2\005\ufed2\006\ufed2\007\ufed2\010\ufed2\011" +
    "\ufed2\012\ufed2\013\ufed2\014\ufed2\020\ufed2\026\ufed2\032\ufed2" +
    "\034\ufed2\061\ufed2\067\ufed2\074\ufed2\075\ufed2\076\ufed2\077" +
    "\ufed2\102\ufed2\103\ufed2\104\ufed2\105\ufed2\110\ufed2\121\ufed2" +
    "\127\ufed2\132\ufed2\133\ufed2\135\ufed2\136\ufed2\137\ufed2\140" +
    "\ufed2\141\ufed2\142\ufed2\143\ufed2\144\ufed2\151\ufed2\001\002" +
    "\000\114\004\ufedb\005\ufedb\006\ufedb\007\ufedb\010\ufedb\011" +
    "\ufedb\012\ufedb\013\ufedb\014\ufedb\020\ufedb\026\ufedb\032\ufedb" +
    "\034\ufedb\061\ufedb\067\ufedb\074\ufedb\075\ufedb\076\ufedb\077" +
    "\ufedb\102\ufedb\103\ufedb\104\ufedb\105\ufedb\110\ufedb\121\ufedb" +
    "\127\ufedb\132\ufedb\133\ufedb\135\ufedb\136\ufedb\137\ufedb\140" +
    "\ufedb\141\ufedb\142\ufedb\143\ufedb\144\ufedb\151\ufedb\001\002" +
    "\000\114\004\ufee0\005\ufee0\006\ufee0\007\ufee0\010\ufee0\011" +
    "\ufee0\012\ufee0\013\ufee0\014\ufee0\020\ufee0\026\ufee0\032\ufee0" +
    "\034\ufee0\061\ufee0\067\ufee0\074\ufee0\075\ufee0\076\ufee0\077" +
    "\ufee0\102\ufee0\103\ufee0\104\ufee0\105\ufee0\110\ufee0\121\ufee0" +
    "\127\ufee0\132\ufee0\133\ufee0\135\ufee0\136\ufee0\137\ufee0\140" +
    "\ufee0\141\ufee0\142\ufee0\143\ufee0\144\ufee0\151\ufee0\001\002" +
    "\000\114\004\ufed6\005\ufed6\006\ufed6\007\ufed6\010\ufed6\011" +
    "\ufed6\012\ufed6\013\ufed6\014\ufed6\020\ufed6\026\ufed6\032\ufed6" +
    "\034\ufed6\061\ufed6\067\ufed6\074\ufed6\075\ufed6\076\ufed6\077" +
    "\ufed6\102\ufed6\103\ufed6\104\ufed6\105\ufed6\110\ufed6\121\ufed6" +
    "\127\ufed6\132\ufed6\133\ufed6\135\ufed6\136\ufed6\137\ufed6\140" +
    "\ufed6\141\ufed6\142\ufed6\143\ufed6\144\ufed6\151\ufed6\001\002" +
    "\000\114\004\ufed1\005\ufed1\006\ufed1\007\ufed1\010\ufed1\011" +
    "\ufed1\012\ufed1\013\ufed1\014\ufed1\020\ufed1\026\ufed1\032\ufed1" +
    "\034\ufed1\061\ufed1\067\ufed1\074\ufed1\075\ufed1\076\ufed1\077" +
    "\ufed1\102\ufed1\103\ufed1\104\ufed1\105\ufed1\110\ufed1\121\ufed1" +
    "\127\ufed1\132\ufed1\133\ufed1\135\ufed1\136\ufed1\137\ufed1\140" +
    "\ufed1\141\ufed1\142\ufed1\143\ufed1\144\ufed1\151\ufed1\001\002" +
    "\000\114\004\ufeda\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011" +
    "\ufeda\012\ufeda\013\ufeda\014\ufeda\020\ufeda\026\ufeda\032\ufeda" +
    "\034\ufeda\061\ufeda\067\ufeda\074\ufeda\075\ufeda\076\ufeda\077" +
    "\ufeda\102\ufeda\103\ufeda\104\ufeda\105\ufeda\110\ufeda\121\ufeda" +
    "\127\ufeda\132\ufeda\133\ufeda\135\ufeda\136\ufeda\137\ufeda\140" +
    "\ufeda\141\ufeda\142\ufeda\143\ufeda\144\ufeda\151\ufeda\001\002" +
    "\000\114\004\ufed3\005\ufed3\006\ufed3\007\ufed3\010\ufed3\011" +
    "\ufed3\012\ufed3\013\ufed3\014\ufed3\020\ufed3\026\ufed3\032\ufed3" +
    "\034\ufed3\061\ufed3\067\ufed3\074\ufed3\075\ufed3\076\ufed3\077" +
    "\ufed3\102\ufed3\103\ufed3\104\ufed3\105\ufed3\110\ufed3\121\ufed3" +
    "\127\ufed3\132\ufed3\133\ufed3\135\ufed3\136\ufed3\137\ufed3\140" +
    "\ufed3\141\ufed3\142\ufed3\143\ufed3\144\ufed3\151\ufed3\001\002" +
    "\000\114\004\ufedd\005\ufedd\006\ufedd\007\ufedd\010\ufedd\011" +
    "\ufedd\012\ufedd\013\ufedd\014\ufedd\020\ufedd\026\ufedd\032\ufedd" +
    "\034\ufedd\061\ufedd\067\ufedd\074\ufedd\075\ufedd\076\ufedd\077" +
    "\ufedd\102\ufedd\103\ufedd\104\ufedd\105\ufedd\110\ufedd\121\ufedd" +
    "\127\ufedd\132\ufedd\133\ufedd\135\ufedd\136\ufedd\137\ufedd\140" +
    "\ufedd\141\ufedd\142\ufedd\143\ufedd\144\ufedd\151\ufedd\001\002" +
    "\000\114\004\ufedf\005\ufedf\006\ufedf\007\ufedf\010\ufedf\011" +
    "\ufedf\012\ufedf\013\ufedf\014\ufedf\020\ufedf\026\ufedf\032\ufedf" +
    "\034\ufedf\061\ufedf\067\ufedf\074\ufedf\075\ufedf\076\ufedf\077" +
    "\ufedf\102\ufedf\103\ufedf\104\ufedf\105\ufedf\110\ufedf\121\ufedf" +
    "\127\ufedf\132\ufedf\133\ufedf\135\ufedf\136\ufedf\137\ufedf\140" +
    "\ufedf\141\ufedf\142\ufedf\143\ufedf\144\ufedf\151\ufedf\001\002" +
    "\000\114\004\ufed4\005\ufed4\006\ufed4\007\ufed4\010\ufed4\011" +
    "\ufed4\012\ufed4\013\ufed4\014\ufed4\020\ufed4\026\ufed4\032\ufed4" +
    "\034\ufed4\061\ufed4\067\ufed4\074\ufed4\075\ufed4\076\ufed4\077" +
    "\ufed4\102\ufed4\103\ufed4\104\ufed4\105\ufed4\110\ufed4\121\ufed4" +
    "\127\ufed4\132\ufed4\133\ufed4\135\ufed4\136\ufed4\137\ufed4\140" +
    "\ufed4\141\ufed4\142\ufed4\143\ufed4\144\ufed4\151\ufed4\001\002" +
    "\000\116\003\173\004\130\005\023\006\010\007\051\010" +
    "\137\011\013\012\057\013\036\014\063\020\126\026\006" +
    "\032\134\034\143\061\071\067\136\074\061\075\ufe85\076" +
    "\004\077\144\102\125\103\050\104\031\105\131\110\067" +
    "\121\045\127\146\132\133\133\121\135\150\136\122\137" +
    "\056\140\053\141\066\142\127\143\135\144\132\151\124" +
    "\001\002\000\114\004\ufee1\005\ufee1\006\ufee1\007\ufee1\010" +
    "\ufee1\011\ufee1\012\ufee1\013\ufee1\014\ufee1\020\ufee1\026\ufee1" +
    "\032\ufee1\034\ufee1\061\ufee1\067\ufee1\074\ufee1\075\ufee1\076" +
    "\ufee1\077\ufee1\102\ufee1\103\ufee1\104\ufee1\105\ufee1\110\ufee1" +
    "\121\ufee1\127\ufee1\132\ufee1\133\ufee1\135\ufee1\136\ufee1\137" +
    "\ufee1\140\ufee1\141\ufee1\142\ufee1\143\ufee1\144\ufee1\151\ufee1" +
    "\001\002\000\120\004\uff76\010\uff76\020\uff76\025\uff76\032" +
    "\uff76\033\uff76\034\uff76\035\uff76\036\uff76\045\uff76\046\uff76" +
    "\051\uff76\052\uff76\077\uff76\102\uff76\105\uff76\116\uff76\120" +
    "\uff76\122\uff76\124\uff76\126\uff76\127\uff76\130\uff76\131\155" +
    "\132\uff76\133\uff76\135\uff76\136\uff76\140\154\141\153\142" +
    "\uff76\143\uff76\144\uff76\145\uff76\146\uff76\147\uff76\150\uff76" +
    "\151\uff76\153\uff76\001\002\000\016\033\uff6c\122\uff6c\126" +
    "\uff6c\145\uff6c\146\uff6c\153\uff6c\001\002\000\120\004\uff8d" +
    "\010\uff8d\020\uff8d\025\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\045\uff8d\046\uff8d\051\uff8d\052\uff8d\077\uff8d" +
    "\102\uff8d\105\uff8d\116\uff8d\120\uff8d\122\uff8d\124\uff8d\126" +
    "\uff8d\127\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\135\uff8d" +
    "\136\uff8d\140\uff8d\141\uff8d\142\uff8d\143\uff8d\144\uff8d\145" +
    "\uff8d\146\uff8d\147\uff8d\150\uff8d\151\uff8d\153\uff8d\001\002" +
    "\000\114\004\ufede\005\ufede\006\ufede\007\ufede\010\ufede\011" +
    "\ufede\012\ufede\013\ufede\014\ufede\020\ufede\026\ufede\032\ufede" +
    "\034\ufede\061\ufede\067\ufede\074\ufede\075\ufede\076\ufede\077" +
    "\ufede\102\ufede\103\ufede\104\ufede\105\ufede\110\ufede\121\ufede" +
    "\127\ufede\132\ufede\133\ufede\135\ufede\136\ufede\137\ufede\140" +
    "\ufede\141\ufede\142\ufede\143\ufede\144\ufede\151\ufede\001\002" +
    "\000\114\004\ufedc\005\ufedc\006\ufedc\007\ufedc\010\ufedc\011" +
    "\ufedc\012\ufedc\013\ufedc\014\ufedc\020\ufedc\026\ufedc\032\ufedc" +
    "\034\ufedc\061\ufedc\067\ufedc\074\ufedc\075\ufedc\076\ufedc\077" +
    "\ufedc\102\ufedc\103\ufedc\104\ufedc\105\ufedc\110\ufedc\121\ufedc" +
    "\127\ufedc\132\ufedc\133\ufedc\135\ufedc\136\ufedc\137\ufedc\140" +
    "\ufedc\141\ufedc\142\ufedc\143\ufedc\144\ufedc\151\ufedc\001\002" +
    "\000\112\004\130\010\137\020\126\025\uffa7\032\134\033" +
    "\uffa7\034\143\035\uffa7\036\uffa7\045\uffa7\046\uffa7\051\uffa7" +
    "\052\uffa7\077\144\102\125\105\131\116\uffa7\120\uffa7\122" +
    "\uffa7\124\uffa7\126\uffa7\127\146\130\uffa7\132\133\133\121" +
    "\135\150\136\122\142\127\143\135\144\132\145\uffa7\146" +
    "\uffa7\147\uffa7\150\uffa7\151\124\153\uffa7\001\002\000\114" +
    "\004\ufed9\005\ufed9\006\ufed9\007\ufed9\010\ufed9\011\ufed9\012" +
    "\ufed9\013\ufed9\014\ufed9\020\ufed9\026\ufed9\032\ufed9\034\ufed9" +
    "\061\ufed9\067\ufed9\074\ufed9\075\ufed9\076\ufed9\077\ufed9\102" +
    "\ufed9\103\ufed9\104\ufed9\105\ufed9\110\ufed9\121\ufed9\127\ufed9" +
    "\132\ufed9\133\ufed9\135\ufed9\136\ufed9\137\ufed9\140\ufed9\141" +
    "\ufed9\142\ufed9\143\ufed9\144\ufed9\151\ufed9\001\002\000\052" +
    "\005\023\006\010\007\051\011\013\012\057\013\036\014" +
    "\063\026\006\061\071\067\136\074\061\075\ufe85\076\004" +
    "\103\050\104\031\110\067\121\045\137\056\140\053\141" +
    "\066\001\002\000\114\004\ufed5\005\ufed5\006\ufed5\007\ufed5" +
    "\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5\020\ufed5\026" +
    "\ufed5\032\ufed5\034\ufed5\061\ufed5\067\ufed5\074\ufed5\075\ufed5" +
    "\076\ufed5\077\ufed5\102\ufed5\103\ufed5\104\ufed5\105\ufed5\110" +
    "\ufed5\121\ufed5\127\ufed5\132\ufed5\133\ufed5\135\ufed5\136\ufed5" +
    "\137\ufed5\140\ufed5\141\ufed5\142\ufed5\143\ufed5\144\ufed5\151" +
    "\ufed5\001\002\000\052\005\ufee2\006\ufee2\007\ufee2\011\ufee2" +
    "\012\ufee2\013\ufee2\014\ufee2\026\ufee2\061\ufee2\067\ufee2\074" +
    "\ufee2\075\ufee2\076\ufee2\103\ufee2\104\ufee2\110\ufee2\121\ufee2" +
    "\137\ufee2\140\ufee2\141\ufee2\001\002\000\120\004\uff75\010" +
    "\uff75\020\uff75\025\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\036\uff75\045\uff75\046\uff75\051\uff75\052\uff75\077\uff75\102" +
    "\uff75\105\uff75\116\uff75\120\uff75\122\uff75\124\uff75\126\uff75" +
    "\127\uff75\130\uff75\131\155\132\uff75\133\uff75\135\uff75\136" +
    "\uff75\140\154\141\153\142\uff75\143\uff75\144\uff75\145\uff75" +
    "\146\uff75\147\uff75\150\uff75\151\uff75\153\uff75\001\002\000" +
    "\116\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\147\uffa3\151\124\001" +
    "\002\000\116\004\130\005\023\006\010\007\051\010\137" +
    "\011\013\012\057\013\036\014\063\020\126\026\006\032" +
    "\134\034\143\061\071\067\136\074\061\075\ufe85\076\004" +
    "\077\144\102\125\103\050\104\031\105\131\110\067\121" +
    "\045\127\146\132\133\133\121\135\150\136\122\137\056" +
    "\140\053\141\066\142\127\143\135\144\132\146\uffa3\151" +
    "\124\001\002\000\004\006\010\001\002\000\120\004\uff8a" +
    "\010\uff8a\020\uff8a\025\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\045\uff8a\046\uff8a\051\uff8a\052\uff8a\077\uff8a" +
    "\102\uff8a\105\uff8a\116\uff8a\120\uff8a\122\uff8a\124\uff8a\126" +
    "\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a\133\uff8a\135\uff8a" +
    "\136\uff8a\140\uff8a\141\uff8a\142\uff8a\143\uff8a\144\uff8a\145" +
    "\uff8a\146\uff8a\147\uff8a\150\uff8a\151\uff8a\153\uff8a\001\002" +
    "\000\004\146\164\001\002\000\020\120\uffa5\124\uffa5\126" +
    "\uffa5\145\uffa5\146\uffa5\147\uffa5\153\uffa5\001\002\000\010" +
    "\126\162\146\uffa2\147\uffa2\001\002\000\114\004\130\005" +
    "\023\006\010\007\051\010\137\011\013\012\057\013\036" +
    "\014\063\020\126\026\006\032\134\034\143\061\071\067" +
    "\136\074\061\075\ufe85\076\004\077\144\102\125\103\050" +
    "\104\031\105\131\110\067\121\045\127\146\132\133\133" +
    "\121\135\150\136\122\137\056\140\053\141\066\142\127" +
    "\143\135\144\132\151\124\001\002\000\020\120\uffa4\124" +
    "\uffa4\126\uffa4\145\uffa4\146\uffa4\147\uffa4\153\uffa4\001\002" +
    "\000\120\004\uff8b\010\uff8b\020\uff8b\025\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\045\uff8b\046\uff8b\051\uff8b" +
    "\052\uff8b\077\uff8b\102\uff8b\105\uff8b\116\uff8b\120\uff8b\122" +
    "\uff8b\124\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b" +
    "\133\uff8b\135\uff8b\136\uff8b\140\uff8b\141\uff8b\142\uff8b\143" +
    "\uff8b\144\uff8b\145\uff8b\146\uff8b\147\uff8b\150\uff8b\151\uff8b" +
    "\153\uff8b\001\002\000\004\147\166\001\002\000\120\004" +
    "\uff8c\010\uff8c\020\uff8c\025\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\045\uff8c\046\uff8c\051\uff8c\052\uff8c\077" +
    "\uff8c\102\uff8c\105\uff8c\116\uff8c\120\uff8c\122\uff8c\124\uff8c" +
    "\126\uff8c\127\uff8c\130\uff8c\131\uff8c\132\uff8c\133\uff8c\135" +
    "\uff8c\136\uff8c\140\uff8c\141\uff8c\142\uff8c\143\uff8c\144\uff8c" +
    "\145\uff8c\146\uff8c\147\uff8c\150\uff8c\151\uff8c\153\uff8c\001" +
    "\002\000\114\004\130\005\023\006\010\007\051\010\137" +
    "\011\013\012\057\013\036\014\063\020\126\026\006\032" +
    "\134\034\143\061\071\067\136\074\061\075\ufe85\076\004" +
    "\077\144\102\125\103\050\104\031\105\131\110\067\121" +
    "\045\127\146\132\133\133\121\135\150\136\122\137\056" +
    "\140\053\141\066\142\127\143\135\144\132\151\124\001" +
    "\002\000\114\004\ufee3\005\ufee3\006\ufee3\007\ufee3\010\ufee3" +
    "\011\ufee3\012\ufee3\013\ufee3\014\ufee3\020\ufee3\026\ufee3\032" +
    "\ufee3\034\ufee3\061\ufee3\067\ufee3\074\ufee3\075\ufee3\076\ufee3" +
    "\077\ufee3\102\ufee3\103\ufee3\104\ufee3\105\ufee3\110\ufee3\121" +
    "\ufee3\127\ufee3\132\ufee3\133\ufee3\135\ufee3\136\ufee3\137\ufee3" +
    "\140\ufee3\141\ufee3\142\ufee3\143\ufee3\144\ufee3\151\ufee3\001" +
    "\002\000\112\004\uffa1\010\uffa1\020\uffa1\025\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\045\uffa1\046\uffa1\051" +
    "\uffa1\052\uffa1\077\uffa1\102\uffa1\105\uffa1\116\uffa1\120\uffa1" +
    "\122\uffa1\124\uffa1\126\uffa1\127\uffa1\130\uffa1\132\uffa1\133" +
    "\uffa1\135\uffa1\136\uffa1\142\uffa1\143\uffa1\144\uffa1\145\uffa1" +
    "\146\uffa1\147\uffa1\150\uffa1\151\uffa1\153\uffa1\001\002\000" +
    "\004\116\177\001\002\000\006\036\175\046\174\001\002" +
    "\000\220\002\ufe70\003\ufe70\004\ufe70\005\ufe70\006\ufe70\007" +
    "\ufe70\010\ufe70\011\ufe70\012\ufe70\013\ufe70\014\ufe70\020\ufe70" +
    "\022\ufe70\025\ufe70\026\ufe70\027\ufe70\032\ufe70\033\ufe70\034" +
    "\ufe70\035\ufe70\036\ufe70\042\ufe70\043\ufe70\044\ufe70\045\ufe70" +
    "\046\ufe70\051\ufe70\052\ufe70\054\ufe70\055\ufe70\057\ufe70\061" +
    "\ufe70\062\ufe70\063\ufe70\067\ufe70\074\ufe70\075\ufe70\076\ufe70" +
    "\077\ufe70\102\ufe70\103\ufe70\104\ufe70\105\ufe70\110\ufe70\116" +
    "\ufe70\120\ufe70\121\ufe70\122\ufe70\123\ufe70\124\ufe70\125\ufe70" +
    "\126\ufe70\127\ufe70\130\ufe70\131\ufe70\132\ufe70\133\ufe70\135" +
    "\ufe70\136\ufe70\137\ufe70\140\ufe70\141\ufe70\142\ufe70\143\ufe70" +
    "\144\ufe70\145\ufe70\146\ufe70\147\ufe70\150\ufe70\151\ufe70\153" +
    "\ufe70\001\002\000\220\002\ufe71\003\ufe71\004\ufe71\005\ufe71" +
    "\006\ufe71\007\ufe71\010\ufe71\011\ufe71\012\ufe71\013\ufe71\014" +
    "\ufe71\020\ufe71\022\ufe71\025\ufe71\026\ufe71\027\ufe71\032\ufe71" +
    "\033\ufe71\034\ufe71\035\ufe71\036\ufe71\042\ufe71\043\ufe71\044" +
    "\ufe71\045\ufe71\046\ufe71\051\ufe71\052\ufe71\054\ufe71\055\ufe71" +
    "\057\ufe71\061\ufe71\062\ufe71\063\ufe71\067\ufe71\074\ufe71\075" +
    "\ufe71\076\ufe71\077\ufe71\102\ufe71\103\ufe71\104\ufe71\105\ufe71" +
    "\110\ufe71\116\ufe71\120\ufe71\121\ufe71\122\ufe71\123\ufe71\124" +
    "\ufe71\125\ufe71\126\ufe71\127\ufe71\130\ufe71\131\ufe71\132\ufe71" +
    "\133\ufe71\135\ufe71\136\ufe71\137\ufe71\140\ufe71\141\ufe71\142" +
    "\ufe71\143\ufe71\144\ufe71\145\ufe71\146\ufe71\147\ufe71\150\ufe71" +
    "\151\ufe71\153\ufe71\001\002\000\122\004\uff9e\010\uff9e\020" +
    "\uff9e\025\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\045\uff9e\046\uff9e\051\uff9e\052\uff9e\077\uff9e\102\uff9e\105" +
    "\uff9e\116\uff9e\120\uff9e\122\uff9e\124\uff9e\125\uff9e\126\uff9e" +
    "\127\uff9e\130\uff9e\131\uff9e\132\uff9e\133\uff9e\135\uff9e\136" +
    "\uff9e\140\uff9e\141\uff9e\142\uff9e\143\uff9e\144\uff9e\145\uff9e" +
    "\146\uff9e\147\uff9e\150\uff9e\151\uff9e\153\uff9e\001\002\000" +
    "\114\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\004\035\201\001\002\000\114\004\130\005\023\006\010" +
    "\007\051\010\137\011\013\012\057\013\036\014\063\020" +
    "\126\026\006\032\134\034\143\061\071\067\136\074\061" +
    "\075\ufe85\076\004\077\144\102\125\103\050\104\031\105" +
    "\131\110\067\121\045\127\146\132\133\133\121\135\150" +
    "\136\122\137\056\140\053\141\066\142\127\143\135\144" +
    "\132\151\124\001\002\000\006\036\175\046\174\001\002" +
    "\000\122\004\uff9f\010\uff9f\020\uff9f\025\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\045\uff9f\046\uff9f\051\uff9f" +
    "\052\uff9f\077\uff9f\102\uff9f\105\uff9f\116\uff9f\120\uff9f\122" +
    "\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f" +
    "\132\uff9f\133\uff9f\135\uff9f\136\uff9f\140\uff9f\141\uff9f\142" +
    "\uff9f\143\uff9f\144\uff9f\145\uff9f\146\uff9f\147\uff9f\150\uff9f" +
    "\151\uff9f\153\uff9f\001\002\000\114\004\130\005\023\006" +
    "\010\007\051\010\137\011\013\012\057\013\036\014\063" +
    "\020\126\026\006\032\134\034\143\061\071\067\136\074" +
    "\061\075\ufe85\076\004\077\144\102\125\103\050\104\031" +
    "\105\131\110\067\121\045\127\146\132\133\133\121\135" +
    "\150\136\122\137\056\140\053\141\066\142\127\143\135" +
    "\144\132\151\124\001\002\000\112\004\uffa0\010\uffa0\020" +
    "\uffa0\025\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\045\uffa0\046\uffa0\051\uffa0\052\uffa0\077\uffa0\102\uffa0\105" +
    "\uffa0\116\uffa0\120\uffa0\122\uffa0\124\uffa0\126\uffa0\127\uffa0" +
    "\130\uffa0\132\uffa0\133\uffa0\135\uffa0\136\uffa0\142\uffa0\143" +
    "\uffa0\144\uffa0\145\uffa0\146\uffa0\147\uffa0\150\uffa0\151\uffa0" +
    "\153\uffa0\001\002\000\020\033\uffdb\071\uffdb\122\uffdb\126" +
    "\uffdb\145\uffdb\146\uffdb\153\uffdb\001\002\000\022\122\ufee4" +
    "\124\ufee4\126\ufee4\127\ufee4\140\224\141\223\146\ufee4\147" +
    "\ufee4\001\002\000\006\127\217\146\216\001\002\000\010" +
    "\126\uffab\127\uffab\146\uffab\001\002\000\010\126\214\127" +
    "\uffa8\146\uffa8\001\002\000\010\126\uffac\127\uffac\146\uffac" +
    "\001\002\000\010\006\010\140\112\141\104\001\002\000" +
    "\010\126\uffaa\127\uffaa\146\uffaa\001\002\000\020\006\ufef2" +
    "\122\ufef2\124\ufef2\126\ufef2\127\ufef2\146\ufef2\147\ufef2\001" +
    "\002\000\012\006\010\140\112\141\104\146\220\001\002" +
    "\000\020\006\ufef1\122\ufef1\124\ufef1\126\ufef1\127\ufef1\146" +
    "\ufef1\147\ufef1\001\002\000\004\146\222\001\002\000\020" +
    "\006\ufef0\122\ufef0\124\ufef0\126\ufef0\127\ufef0\146\ufef0\147" +
    "\ufef0\001\002\000\006\006\010\147\uffb4\001\002\000\012" +
    "\006\010\140\112\141\104\146\uffa9\001\002\000\004\146" +
    "\226\001\002\000\020\006\ufeef\122\ufeef\124\ufeef\126\ufeef" +
    "\127\ufeef\146\ufeef\147\ufeef\001\002\000\006\126\uffb6\147" +
    "\uffb6\001\002\000\004\147\241\001\002\000\006\126\237" +
    "\147\uffb3\001\002\000\006\124\234\133\233\001\002\000" +
    "\114\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\010\006\010\140\112\141\104\001\002\000\006\126\uffb8" +
    "\147\uffb8\001\002\000\006\126\uffb7\147\uffb7\001\002\000" +
    "\004\006\010\001\002\000\006\126\uffb5\147\uffb5\001\002" +
    "\000\020\006\ufeee\122\ufeee\124\ufeee\126\ufeee\127\ufeee\146" +
    "\ufeee\147\ufeee\001\002\000\116\002\ufe74\003\ufe74\005\ufe74" +
    "\006\ufe74\007\ufe74\011\ufe74\012\ufe74\013\ufe74\014\ufe74\022" +
    "\ufe74\025\ufe74\026\ufe74\027\ufe74\035\ufe74\036\ufe74\042\ufe74" +
    "\043\ufe74\044\ufe74\046\ufe74\054\ufe74\055\ufe74\057\ufe74\061" +
    "\ufe74\062\ufe74\063\ufe74\067\ufe74\074\ufe74\075\ufe74\076\ufe74" +
    "\103\ufe74\104\ufe74\110\ufe74\121\ufe74\123\ufe74\137\ufe74\140" +
    "\ufe74\141\ufe74\150\ufe74\001\002\000\116\002\uff03\003\uff03" +
    "\005\uff03\006\uff03\007\uff03\011\uff03\012\uff03\013\uff03\014" +
    "\uff03\022\uff03\025\uff03\026\uff03\027\uff03\035\uff03\036\uff03" +
    "\042\uff03\043\uff03\044\uff03\046\uff03\054\uff03\055\uff03\057" +
    "\uff03\061\uff03\062\uff03\063\uff03\067\uff03\074\uff03\075\uff03" +
    "\076\uff03\103\uff03\104\uff03\110\uff03\121\uff03\123\uff03\137" +
    "\uff03\140\uff03\141\uff03\150\uff03\001\002\000\116\002\ufe75" +
    "\003\ufe75\005\ufe75\006\ufe75\007\ufe75\011\ufe75\012\ufe75\013" +
    "\ufe75\014\ufe75\022\ufe75\025\ufe75\026\ufe75\027\ufe75\035\ufe75" +
    "\036\ufe75\042\ufe75\043\ufe75\044\ufe75\046\ufe75\054\ufe75\055" +
    "\ufe75\057\ufe75\061\ufe75\062\ufe75\063\ufe75\067\ufe75\074\ufe75" +
    "\075\ufe75\076\ufe75\103\ufe75\104\ufe75\110\ufe75\121\ufe75\123" +
    "\ufe75\137\ufe75\140\ufe75\141\ufe75\150\ufe75\001\002\000\004" +
    "\147\255\001\002\000\006\126\253\147\uffad\001\002\000" +
    "\006\126\uffb0\147\uffb0\001\002\000\004\124\251\001\002" +
    "\000\010\006\010\140\112\141\104\001\002\000\006\126" +
    "\uffb1\147\uffb1\001\002\000\004\006\010\001\002\000\006" +
    "\126\uffaf\147\uffaf\001\002\000\020\006\ufee5\122\ufee5\124" +
    "\ufee5\126\ufee5\127\ufee5\146\ufee5\147\ufee5\001\002\000\016" +
    "\033\uff72\122\uff72\126\uff72\145\uff72\146\uff72\153\uff72\001" +
    "\002\000\016\006\010\065\276\101\275\111\271\140\112" +
    "\141\104\001\002\000\120\004\130\005\023\006\010\007" +
    "\051\010\137\011\013\012\057\013\036\014\063\020\126" +
    "\026\006\032\134\034\143\061\071\062\020\063\055\067" +
    "\136\074\061\075\ufe85\076\004\077\144\102\125\103\050" +
    "\104\031\105\131\110\067\121\045\127\146\132\133\133" +
    "\121\135\150\136\122\137\056\140\053\141\066\142\127" +
    "\143\135\144\132\151\124\001\002\000\004\033\262\001" +
    "\002\000\072\003\046\005\023\006\010\007\051\011\013" +
    "\012\057\013\036\014\063\022\037\025\034\026\006\027" +
    "\030\061\071\062\020\063\055\067\040\074\061\075\ufe85" +
    "\076\004\103\050\104\031\110\067\121\045\123\060\137" +
    "\056\140\053\141\066\150\014\001\002\000\076\003\046" +
    "\005\023\006\010\007\051\011\013\012\057\013\036\014" +
    "\063\022\037\025\034\026\006\027\030\036\244\044\242" +
    "\061\071\062\020\063\055\067\040\074\061\075\ufe85\076" +
    "\004\103\050\104\031\110\067\121\045\123\060\137\056" +
    "\140\053\141\066\150\014\001\002\000\116\002\uff04\003" +
    "\uff04\005\uff04\006\uff04\007\uff04\011\uff04\012\uff04\013\uff04" +
    "\014\uff04\022\uff04\025\uff04\026\uff04\027\uff04\035\uff04\036" +
    "\uff04\042\uff04\043\uff04\044\uff04\046\uff04\054\uff04\055\uff04" +
    "\057\uff04\061\uff04\062\uff04\063\uff04\067\uff04\074\uff04\075" +
    "\uff04\076\uff04\103\uff04\104\uff04\110\uff04\121\uff04\123\uff04" +
    "\137\uff04\140\uff04\141\uff04\150\uff04\001\002\000\116\002" +
    "\uff11\003\uff11\005\uff11\006\uff11\007\uff11\011\uff11\012\uff11" +
    "\013\uff11\014\uff11\022\uff11\025\uff11\026\uff11\027\uff11\035" +
    "\uff11\036\uff11\042\uff11\043\uff11\044\uff11\046\uff11\054\uff11" +
    "\055\uff11\057\uff11\061\uff11\062\uff11\063\uff11\067\uff11\074" +
    "\uff11\075\uff11\076\uff11\103\uff11\104\uff11\110\uff11\121\uff11" +
    "\123\uff11\137\uff11\140\uff11\141\uff11\150\uff11\001\002\000" +
    "\016\033\uff6f\122\uff6f\126\uff6f\145\uff6f\146\uff6f\153\uff6f" +
    "\001\002\000\010\006\010\140\112\141\104\001\002\000" +
    "\016\033\uff6e\122\uff6e\126\uff6e\145\uff6e\146\uff6e\153\uff6e" +
    "\001\002\000\006\003\347\006\010\001\002\000\004\006" +
    "\010\001\002\000\012\025\uffcd\033\uffcd\124\uffcd\126\uffcd" +
    "\001\002\000\012\025\uffca\033\uffca\124\uffca\126\uffca\001" +
    "\002\000\010\006\010\140\112\141\104\001\002\000\006" +
    "\003\312\006\010\001\002\000\012\025\ufe56\033\ufe56\124" +
    "\ufe56\126\310\001\002\000\024\006\ufee4\025\uffbe\033\uffbe" +
    "\124\uffbe\125\uffbe\126\uffbe\133\uffbe\140\224\141\223\001" +
    "\002\000\012\025\uffcb\033\uffcb\124\uffcb\126\uffcb\001\002" +
    "\000\016\025\uffc2\033\uffc2\124\uffc2\125\305\126\uffc2\133" +
    "\304\001\002\000\012\025\uffcc\033\uffcc\124\uffcc\126\uffcc" +
    "\001\002\000\114\004\130\005\023\006\010\007\051\010" +
    "\137\011\013\012\057\013\036\014\063\020\126\026\006" +
    "\032\134\034\143\061\071\067\136\074\061\075\ufe85\076" +
    "\004\077\144\102\125\103\050\104\031\105\131\110\067" +
    "\121\045\127\146\132\133\133\121\135\150\136\122\137" +
    "\056\140\053\141\066\142\127\143\135\144\132\151\124" +
    "\001\002\000\114\004\130\005\023\006\010\007\051\010" +
    "\137\011\013\012\057\013\036\014\063\020\126\026\006" +
    "\032\134\034\143\061\071\067\136\074\061\075\ufe85\076" +
    "\004\077\144\102\125\103\050\104\031\105\131\110\067" +
    "\121\045\127\146\132\133\133\121\135\150\136\122\137" +
    "\056\140\053\141\066\142\127\143\135\144\132\151\124" +
    "\001\002\000\012\025\uffc1\033\uffc1\124\uffc1\126\uffc1\001" +
    "\002\000\012\025\uffc0\033\uffc0\124\uffc0\126\uffc0\001\002" +
    "\000\016\006\010\065\276\101\275\111\271\140\112\141" +
    "\104\001\002\000\012\025\uffc9\033\uffc9\124\uffc9\126\uffc9" +
    "\001\002\000\006\036\334\045\332\001\002\000\004\141" +
    "\314\001\002\000\012\006\010\140\112\141\104\147\uffd3" +
    "\001\002\000\006\126\340\147\uffd2\001\002\000\022\006" +
    "\ufee4\033\uffcf\036\uffcf\126\uffcf\133\uffcf\140\224\141\223" +
    "\147\uffcf\001\002\000\014\033\uffd1\036\uffd1\126\uffd1\133" +
    "\336\147\uffd1\001\002\000\012\033\uffd5\036\uffd5\126\uffd5" +
    "\147\uffd5\001\002\000\004\006\010\001\002\000\004\147" +
    "\323\001\002\000\010\122\uffc6\124\uffc6\127\325\001\002" +
    "\000\006\122\257\124\ufe57\001\002\000\010\006\010\140" +
    "\112\141\104\001\002\000\006\122\uffc5\124\uffc5\001\002" +
    "\000\004\124\330\001\002\000\114\004\130\005\023\006" +
    "\010\007\051\010\137\011\013\012\057\013\036\014\063" +
    "\020\126\026\006\032\134\034\143\061\071\067\136\074" +
    "\061\075\ufe85\076\004\077\144\102\125\103\050\104\031" +
    "\105\131\110\067\121\045\127\146\132\133\133\121\135" +
    "\150\136\122\137\056\140\053\141\066\142\127\143\135" +
    "\144\132\151\124\001\002\000\006\036\334\045\332\001" +
    "\002\000\012\025\ufe72\033\ufe72\124\ufe72\126\ufe72\001\002" +
    "\000\012\025\uffc8\033\uffc8\124\uffc8\126\uffc8\001\002\000" +
    "\012\025\ufe73\033\ufe73\124\ufe73\126\ufe73\001\002\000\014" +
    "\033\uffce\036\uffce\126\uffce\133\uffce\147\uffce\001\002\000" +
    "\114\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\012\033\uffd0\036\uffd0\126\uffd0\147\uffd0\001\002\000\010" +
    "\006\010\140\112\141\104\001\002\000\012\033\uffd4\036" +
    "\uffd4\126\uffd4\147\uffd4\001\002\000\012\025\uffc7\033\uffc7" +
    "\124\uffc7\126\uffc7\001\002\000\004\133\344\001\002\000" +
    "\114\004\130\005\023\006\010\007\051\010\137\011\013" +
    "\012\057\013\036\014\063\020\126\026\006\032\134\034" +
    "\143\061\071\067\136\074\061\075\ufe85\076\004\077\144" +
    "\102\125\103\050\104\031\105\131\110\067\121\045\127" +
    "\146\132\133\133\121\135\150\136\122\137\056\140\053" +
    "\141\066\142\127\143\135\144\132\151\124\001\002\000" +
    "\012\025\uffbf\033\uffbf\124\uffbf\126\uffbf\001\002\000\016" +
    "\025\uffbd\033\uffbd\124\uffbd\125\uffbd\126\uffbd\133\uffbd\001" +
    "\002\000\006\036\361\055\360\001\002\000\004\141\351" +
    "\001\002\000\012\006\010\140\112\141\104\147\uffd3\001" +
    "\002\000\004\147\353\001\002\000\006\025\ufe57\122\257" +
    "\001\002\000\004\025\355\001\002\000\072\003\046\005" +
    "\023\006\010\007\051\011\013\012\057\013\036\014\063" +
    "\022\037\025\034\026\006\027\030\061\071\062\020\063" +
    "\055\067\040\074\061\075\ufe85\076\004\103\050\104\031" +
    "\110\067\121\045\123\060\137\056\140\053\141\066\150" +
    "\014\001\002\000\076\003\046\005\023\006\010\007\051" +
    "\011\013\012\057\013\036\014\063\022\037\025\034\026" +
    "\006\027\030\036\361\055\360\061\071\062\020\063\055" +
    "\067\040\074\061\075\ufe85\076\004\103\050\104\031\110" +
    "\067\121\045\123\060\137\056\140\053\141\066\150\014" +
    "\001\002\000\012\025\uffc4\033\uffc4\124\uffc4\126\uffc4\001" +
    "\002\000\122\004\ufe64\010\ufe64\020\ufe64\025\ufe64\032\ufe64" +
    "\033\ufe64\034\ufe64\035\ufe64\036\ufe64\045\ufe64\046\ufe64\051" +
    "\ufe64\052\ufe64\077\ufe64\102\ufe64\105\ufe64\116\ufe64\120\ufe64" +
    "\122\ufe64\124\ufe64\125\ufe64\126\ufe64\127\ufe64\130\ufe64\131" +
    "\ufe64\132\ufe64\133\ufe64\135\ufe64\136\ufe64\140\ufe64\141\ufe64" +
    "\142\ufe64\143\ufe64\144\ufe64\145\ufe64\146\ufe64\147\ufe64\150" +
    "\ufe64\151\ufe64\153\ufe64\001\002\000\122\004\ufe65\010\ufe65" +
    "\020\ufe65\025\ufe65\032\ufe65\033\ufe65\034\ufe65\035\ufe65\036" +
    "\ufe65\045\ufe65\046\ufe65\051\ufe65\052\ufe65\077\ufe65\102\ufe65" +
    "\105\ufe65\116\ufe65\120\ufe65\122\ufe65\124\ufe65\125\ufe65\126" +
    "\ufe65\127\ufe65\130\ufe65\131\ufe65\132\ufe65\133\ufe65\135\ufe65" +
    "\136\ufe65\140\ufe65\141\ufe65\142\ufe65\143\ufe65\144\ufe65\145" +
    "\ufe65\146\ufe65\147\ufe65\150\ufe65\151\ufe65\153\ufe65\001\002" +
    "\000\012\025\uffc3\033\uffc3\124\uffc3\126\uffc3\001\002\000" +
    "\006\036\361\055\360\001\002\000\012\006\010\140\112" +
    "\141\104\147\uffd3\001\002\000\004\147\366\001\002\000" +
    "\006\025\ufe57\122\257\001\002\000\004\025\370\001\002" +
    "\000\072\003\046\005\023\006\010\007\051\011\013\012" +
    "\057\013\036\014\063\022\037\025\034\026\006\027\030" +
    "\061\071\062\020\063\055\067\040\074\061\075\ufe85\076" +
    "\004\103\050\104\031\110\067\121\045\123\060\137\056" +
    "\140\053\141\066\150\014\001\002\000\076\003\046\005" +
    "\023\006\010\007\051\011\013\012\057\013\036\014\063" +
    "\022\037\025\034\026\006\027\030\036\374\054\373\061" +
    "\071\062\020\063\055\067\040\074\061\075\ufe85\076\004" +
    "\103\050\104\031\110\067\121\045\123\060\137\056\140" +
    "\053\141\066\150\014\001\002\000\122\004\uff7e\010\uff7e" +
    "\020\uff7e\025\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\045\uff7e\046\uff7e\051\uff7e\052\uff7e\077\uff7e\102\uff7e" +
    "\105\uff7e\116\uff7e\120\uff7e\122\uff7e\124\uff7e\125\uff7e\126" +
    "\uff7e\127\uff7e\130\uff7e\131\uff7e\132\uff7e\133\uff7e\135\uff7e" +
    "\136\uff7e\140\uff7e\141\uff7e\142\uff7e\143\uff7e\144\uff7e\145" +
    "\uff7e\146\uff7e\147\uff7e\150\uff7e\151\uff7e\153\uff7e\001\002" +
    "\000\122\004\ufe66\010\ufe66\020\ufe66\025\ufe66\032\ufe66\033" +
    "\ufe66\034\ufe66\035\ufe66\036\ufe66\045\ufe66\046\ufe66\051\ufe66" +
    "\052\ufe66\077\ufe66\102\ufe66\105\ufe66\116\ufe66\120\ufe66\122" +
    "\ufe66\124\ufe66\125\ufe66\126\ufe66\127\ufe66\130\ufe66\131\ufe66" +
    "\132\ufe66\133\ufe66\135\ufe66\136\ufe66\140\ufe66\141\ufe66\142" +
    "\ufe66\143\ufe66\144\ufe66\145\ufe66\146\ufe66\147\ufe66\150\ufe66" +
    "\151\ufe66\153\ufe66\001\002\000\122\004\ufe67\010\ufe67\020" +
    "\ufe67\025\ufe67\032\ufe67\033\ufe67\034\ufe67\035\ufe67\036\ufe67" +
    "\045\ufe67\046\ufe67\051\ufe67\052\ufe67\077\ufe67\102\ufe67\105" +
    "\ufe67\116\ufe67\120\ufe67\122\ufe67\124\ufe67\125\ufe67\126\ufe67" +
    "\127\ufe67\130\ufe67\131\ufe67\132\ufe67\133\ufe67\135\ufe67\136" +
    "\ufe67\140\ufe67\141\ufe67\142\ufe67\143\ufe67\144\ufe67\145\ufe67" +
    "\146\ufe67\147\ufe67\150\ufe67\151\ufe67\153\ufe67\001\002\000" +
    "\122\004\uff7d\010\uff7d\020\uff7d\025\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\045\uff7d\046\uff7d\051\uff7d\052" +
    "\uff7d\077\uff7d\102\uff7d\105\uff7d\116\uff7d\120\uff7d\122\uff7d" +
    "\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132" +
    "\uff7d\133\uff7d\135\uff7d\136\uff7d\140\uff7d\141\uff7d\142\uff7d" +
    "\143\uff7d\144\uff7d\145\uff7d\146\uff7d\147\uff7d\150\uff7d\151" +
    "\uff7d\153\uff7d\001\002\000\122\004\uff7a\010\uff7a\020\uff7a" +
    "\025\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\045" +
    "\uff7a\046\uff7a\051\uff7a\052\uff7a\077\uff7a\102\uff7a\105\uff7a" +
    "\116\uff7a\120\uff7a\122\uff7a\124\uff7a\125\uff7a\126\uff7a\127" +
    "\uff7a\130\uff7a\131\uff7a\132\uff7a\133\uff7a\135\uff7a\136\uff7a" +
    "\140\uff7a\141\uff7a\142\uff7a\143\uff7a\144\uff7a\145\uff7a\146" +
    "\uff7a\147\uff7a\150\uff7a\151\uff7a\153\uff7a\001\002\000\004" +
    "\147\u0104\001\002\000\056\004\uff74\010\uff74\020\uff74\032" +
    "\uff74\034\uff74\077\uff74\102\uff74\105\uff74\124\u0102\127\uff74" +
    "\131\uff74\132\uff74\133\uff74\135\uff74\136\uff74\140\uff74\141" +
    "\uff74\142\uff74\143\uff74\144\uff74\147\uff74\151\uff74\001\002" +
    "\000\006\126\uff78\147\uff78\001\002\000\114\004\130\005" +
    "\023\006\010\007\051\010\137\011\013\012\057\013\036" +
    "\014\063\020\126\026\006\032\134\034\143\061\071\067" +
    "\136\074\061\075\ufe85\076\004\077\144\102\125\103\050" +
    "\104\031\105\131\110\067\121\045\127\146\132\133\133" +
    "\121\135\150\136\122\137\056\140\053\141\066\142\127" +
    "\143\135\144\132\151\124\001\002\000\006\126\uffb2\147" +
    "\uffb2\001\002\000\122\004\uff7f\010\uff7f\020\uff7f\025\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\045\uff7f\046" +
    "\uff7f\051\uff7f\052\uff7f\077\uff7f\102\uff7f\105\uff7f\116\uff7f" +
    "\120\uff7f\122\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130" +
    "\uff7f\131\uff7f\132\uff7f\133\uff7f\135\uff7f\136\uff7f\140\uff7f" +
    "\141\uff7f\142\uff7f\143\uff7f\144\uff7f\145\uff7f\146\uff7f\147" +
    "\uff7f\150\uff7f\151\uff7f\153\uff7f\001\002\000\006\124\u010a" +
    "\126\310\001\002\000\006\036\u0109\052\u0107\001\002\000" +
    "\122\004\ufe68\010\ufe68\020\ufe68\025\ufe68\032\ufe68\033\ufe68" +
    "\034\ufe68\035\ufe68\036\ufe68\045\ufe68\046\ufe68\051\ufe68\052" +
    "\ufe68\077\ufe68\102\ufe68\105\ufe68\116\ufe68\120\ufe68\122\ufe68" +
    "\124\ufe68\125\ufe68\126\ufe68\127\ufe68\130\ufe68\131\ufe68\132" +
    "\ufe68\133\ufe68\135\ufe68\136\ufe68\140\ufe68\141\ufe68\142\ufe68" +
    "\143\ufe68\144\ufe68\145\ufe68\146\ufe68\147\ufe68\150\ufe68\151" +
    "\ufe68\153\ufe68\001\002\000\122\004\uff9b\010\uff9b\020\uff9b" +
    "\025\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\045" +
    "\uff9b\046\uff9b\051\uff9b\052\uff9b\077\uff9b\102\uff9b\105\uff9b" +
    "\116\uff9b\120\uff9b\122\uff9b\124\uff9b\125\uff9b\126\uff9b\127" +
    "\uff9b\130\uff9b\131\uff9b\132\uff9b\133\uff9b\135\uff9b\136\uff9b" +
    "\140\uff9b\141\uff9b\142\uff9b\143\uff9b\144\uff9b\145\uff9b\146" +
    "\uff9b\147\uff9b\150\uff9b\151\uff9b\153\uff9b\001\002\000\122" +
    "\004\ufe69\010\ufe69\020\ufe69\025\ufe69\032\ufe69\033\ufe69\034" +
    "\ufe69\035\ufe69\036\ufe69\045\ufe69\046\ufe69\051\ufe69\052\ufe69" +
    "\077\ufe69\102\ufe69\105\ufe69\116\ufe69\120\ufe69\122\ufe69\124" +
    "\ufe69\125\ufe69\126\ufe69\127\ufe69\130\ufe69\131\ufe69\132\ufe69" +
    "\133\ufe69\135\ufe69\136\ufe69\140\ufe69\141\ufe69\142\ufe69\143" +
    "\ufe69\144\ufe69\145\ufe69\146\ufe69\147\ufe69\150\ufe69\151\ufe69" +
    "\153\ufe69\001\002\000\114\004\130\005\023\006\010\007" +
    "\051\010\137\011\013\012\057\013\036\014\063\020\126" +
    "\026\006\032\134\034\143\061\071\067\136\074\061\075" +
    "\ufe85\076\004\077\144\102\125\103\050\104\031\105\131" +
    "\110\067\121\045\127\146\132\133\133\121\135\150\136" +
    "\122\137\056\140\053\141\066\142\127\143\135\144\132" +
    "\151\124\001\002\000\006\036\u0109\052\u0107\001\002\000" +
    "\122\004\uff9c\010\uff9c\020\uff9c\025\uff9c\032\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\045\uff9c\046\uff9c\051\uff9c\052" +
    "\uff9c\077\uff9c\102\uff9c\105\uff9c\116\uff9c\120\uff9c\122\uff9c" +
    "\124\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c\131\uff9c\132" +
    "\uff9c\133\uff9c\135\uff9c\136\uff9c\140\uff9c\141\uff9c\142\uff9c" +
    "\143\uff9c\144\uff9c\145\uff9c\146\uff9c\147\uff9c\150\uff9c\151" +
    "\uff9c\153\uff9c\001\002\000\006\033\ufe57\122\257\001\002" +
    "\000\006\036\u0110\057\u010f\001\002\000\116\002\ufe60\003" +
    "\ufe60\005\ufe60\006\ufe60\007\ufe60\011\ufe60\012\ufe60\013\ufe60" +
    "\014\ufe60\022\ufe60\025\ufe60\026\ufe60\027\ufe60\035\ufe60\036" +
    "\ufe60\042\ufe60\043\ufe60\044\ufe60\046\ufe60\054\ufe60\055\ufe60" +
    "\057\ufe60\061\ufe60\062\ufe60\063\ufe60\067\ufe60\074\ufe60\075" +
    "\ufe60\076\ufe60\103\ufe60\104\ufe60\110\ufe60\121\ufe60\123\ufe60" +
    "\137\ufe60\140\ufe60\141\ufe60\150\ufe60\001\002\000\116\002" +
    "\ufe61\003\ufe61\005\ufe61\006\ufe61\007\ufe61\011\ufe61\012\ufe61" +
    "\013\ufe61\014\ufe61\022\ufe61\025\ufe61\026\ufe61\027\ufe61\035" +
    "\ufe61\036\ufe61\042\ufe61\043\ufe61\044\ufe61\046\ufe61\054\ufe61" +
    "\055\ufe61\057\ufe61\061\ufe61\062\ufe61\063\ufe61\067\ufe61\074" +
    "\ufe61\075\ufe61\076\ufe61\103\ufe61\104\ufe61\110\ufe61\121\ufe61" +
    "\123\ufe61\137\ufe61\140\ufe61\141\ufe61\150\ufe61\001\002\000" +
    "\116\002\ufefa\003\ufefa\005\ufefa\006\ufefa\007\ufefa\011\ufefa" +
    "\012\ufefa\013\ufefa\014\ufefa\022\ufefa\025\ufefa\026\ufefa\027" +
    "\ufefa\035\ufefa\036\ufefa\042\ufefa\043\ufefa\044\ufefa\046\ufefa" +
    "\054\ufefa\055\ufefa\057\ufefa\061\ufefa\062\ufefa\063\ufefa\067" +
    "\ufefa\074\ufefa\075\ufefa\076\ufefa\103\ufefa\104\ufefa\110\ufefa" +
    "\121\ufefa\123\ufefa\137\ufefa\140\ufefa\141\ufefa\150\ufefa\001" +
    "\002\000\004\033\u0113\001\002\000\076\003\046\005\023" +
    "\006\010\007\051\011\013\012\057\013\036\014\063\022" +
    "\037\025\034\026\006\027\030\036\uff10\057\uff10\061\071" +
    "\062\020\063\055\067\040\074\061\075\ufe85\076\004\103" +
    "\050\104\031\110\067\121\045\123\060\137\056\140\053" +
    "\141\066\150\014\001\002\000\006\036\u0110\057\u010f\001" +
    "\002\000\116\002\ufefb\003\ufefb\005\ufefb\006\ufefb\007\ufefb" +
    "\011\ufefb\012\ufefb\013\ufefb\014\ufefb\022\ufefb\025\ufefb\026" +
    "\ufefb\027\ufefb\035\ufefb\036\ufefb\042\ufefb\043\ufefb\044\ufefb" +
    "\046\ufefb\054\ufefb\055\ufefb\057\ufefb\061\ufefb\062\ufefb\063" +
    "\ufefb\067\ufefb\074\ufefb\075\ufefb\076\ufefb\103\ufefb\104\ufefb" +
    "\110\ufefb\121\ufefb\123\ufefb\137\ufefb\140\ufefb\141\ufefb\150" +
    "\ufefb\001\002\000\122\004\uff7c\010\uff7c\020\uff7c\025\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\045\uff7c\046" +
    "\uff7c\051\uff7c\052\uff7c\077\uff7c\102\uff7c\105\uff7c\116\uff7c" +
    "\120\uff7c\122\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130" +
    "\uff7c\131\uff7c\132\uff7c\133\uff7c\135\uff7c\136\uff7c\140\uff7c" +
    "\141\uff7c\142\uff7c\143\uff7c\144\uff7c\145\uff7c\146\uff7c\147" +
    "\uff7c\150\uff7c\151\uff7c\153\uff7c\001\002\000\010\124\u0119" +
    "\126\162\145\ufe87\001\002\000\004\145\u011b\001\002\000" +
    "\006\062\020\063\055\001\002\000\012\126\260\145\ufe86" +
    "\146\ufe86\153\ufe86\001\002\000\122\004\uff7b\010\uff7b\020" +
    "\uff7b\025\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\045\uff7b\046\uff7b\051\uff7b\052\uff7b\077\uff7b\102\uff7b\105" +
    "\uff7b\116\uff7b\120\uff7b\122\uff7b\124\uff7b\125\uff7b\126\uff7b" +
    "\127\uff7b\130\uff7b\131\uff7b\132\uff7b\133\uff7b\135\uff7b\136" +
    "\uff7b\140\uff7b\141\uff7b\142\uff7b\143\uff7b\144\uff7b\145\uff7b" +
    "\146\uff7b\147\uff7b\150\uff7b\151\uff7b\153\uff7b\001\002\000" +
    "\122\004\uff9a\010\uff9a\020\uff9a\025\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\045\uff9a\046\uff9a\051\uff9a\052" +
    "\uff9a\077\uff9a\102\uff9a\105\uff9a\116\uff9a\120\uff9a\122\uff9a" +
    "\124\uff9a\125\uff9a\126\uff9a\127\uff9a\130\uff9a\131\uff9a\132" +
    "\uff9a\133\uff9a\135\uff9a\136\uff9a\140\uff9a\141\uff9a\142\uff9a" +
    "\143\uff9a\144\uff9a\145\uff9a\146\uff9a\147\uff9a\150\uff9a\151" +
    "\uff9a\153\uff9a\001\002\000\012\124\u0119\126\162\146\ufe87" +
    "\153\ufe87\001\002\000\006\146\uff98\153\u0120\001\002\000" +
    "\004\146\u0122\001\002\000\114\004\130\005\023\006\010" +
    "\007\051\010\137\011\013\012\057\013\036\014\063\020" +
    "\126\026\006\032\134\034\143\061\071\067\136\074\061" +
    "\075\ufe85\076\004\077\144\102\125\103\050\104\031\105" +
    "\131\110\067\121\045\127\146\132\133\133\121\135\150" +
    "\136\122\137\056\140\053\141\066\142\127\143\135\144" +
    "\132\151\124\001\002\000\004\146\uff97\001\002\000\122" +
    "\004\uff99\010\uff99\020\uff99\025\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\045\uff99\046\uff99\051\uff99\052\uff99" +
    "\077\uff99\102\uff99\105\uff99\116\uff99\120\uff99\122\uff99\124" +
    "\uff99\125\uff99\126\uff99\127\uff99\130\uff99\131\uff99\132\uff99" +
    "\133\uff99\135\uff99\136\uff99\140\uff99\141\uff99\142\uff99\143" +
    "\uff99\144\uff99\145\uff99\146\uff99\147\uff99\150\uff99\151\uff99" +
    "\153\uff99\001\002\000\004\006\010\001\002\000\122\004" +
    "\uff79\010\uff79\020\uff79\025\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\036\uff79\045\uff79\046\uff79\051\uff79\052\uff79\077" +
    "\uff79\102\uff79\105\uff79\116\uff79\120\uff79\122\uff79\124\uff79" +
    "\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79\132\uff79\133" +
    "\uff79\135\uff79\136\uff79\140\uff79\141\uff79\142\uff79\143\uff79" +
    "\144\uff79\145\uff79\146\uff79\147\uff79\150\uff79\151\uff79\153" +
    "\uff79\001\002\000\006\126\uff77\147\uff77\001\002\000\004" +
    "\124\u0102\001\002\000\116\002\uff13\003\uff13\005\uff13\006" +
    "\uff13\007\uff13\011\uff13\012\uff13\013\uff13\014\uff13\022\uff13" +
    "\025\uff13\026\uff13\027\uff13\035\uff13\036\uff13\042\uff13\043" +
    "\uff13\044\uff13\046\uff13\054\uff13\055\uff13\057\uff13\061\uff13" +
    "\062\uff13\063\uff13\067\uff13\074\uff13\075\uff13\076\uff13\103" +
    "\uff13\104\uff13\110\uff13\121\uff13\123\uff13\137\uff13\140\uff13" +
    "\141\uff13\150\uff13\001\002\000\116\004\130\005\023\006" +
    "\010\007\051\010\137\011\013\012\057\013\036\014\063" +
    "\020\126\026\006\032\134\034\143\061\071\067\136\074" +
    "\061\075\ufe85\076\004\077\144\102\125\103\050\104\031" +
    "\105\131\110\067\121\045\127\146\132\133\133\121\135" +
    "\150\136\122\137\056\140\053\141\066\142\127\143\135" +
    "\144\132\147\uffa3\151\124\001\002\000\116\004\130\005" +
    "\023\006\010\007\051\010\137\011\013\012\057\013\036" +
    "\014\063\020\126\026\006\032\134\034\143\061\071\067" +
    "\136\074\061\075\ufe85\076\004\077\144\102\125\103\050" +
    "\104\031\105\131\110\067\121\045\127\146\132\133\133" +
    "\121\135\150\136\122\137\056\140\053\141\066\142\127" +
    "\143\135\144\132\146\uffa3\151\124\001\002\000\004\006" +
    "\010\001\002\000\056\004\uff8a\010\uff8a\020\uff8a\032\uff8a" +
    "\034\uff8a\035\uff8a\077\uff8a\102\uff8a\105\uff8a\125\uff0b\127" +
    "\uff8a\131\uff8a\132\uff8a\133\uff8a\135\uff8a\136\uff8a\140\uff8a" +
    "\141\uff8a\142\uff8a\143\uff8a\144\uff8a\151\uff8a\001\002\000" +
    "\004\146\u012d\001\002\000\056\004\uff8b\010\uff8b\020\uff8b" +
    "\032\uff8b\034\uff8b\035\uff8b\077\uff8b\102\uff8b\105\uff8b\125" +
    "\uff0c\127\uff8b\131\uff8b\132\uff8b\133\uff8b\135\uff8b\136\uff8b" +
    "\140\uff8b\141\uff8b\142\uff8b\143\uff8b\144\uff8b\151\uff8b\001" +
    "\002\000\004\147\u012f\001\002\000\056\004\uff8c\010\uff8c" +
    "\020\uff8c\032\uff8c\034\uff8c\035\uff8c\077\uff8c\102\uff8c\105" +
    "\uff8c\127\uff8c\131\uff8c\132\uff8c\133\uff8c\135\uff8c\136\uff8c" +
    "\140\uff8c\141\uff8c\142\uff8c\143\uff8c\144\uff8c\150\u0130\151" +
    "\uff8c\001\002\000\116\002\uff05\003\uff05\005\uff05\006\uff05" +
    "\007\uff05\011\uff05\012\uff05\013\uff05\014\uff05\022\uff05\025" +
    "\uff05\026\uff05\027\uff05\035\uff05\036\uff05\042\uff05\043\uff05" +
    "\044\uff05\046\uff05\054\uff05\055\uff05\057\uff05\061\uff05\062" +
    "\uff05\063\uff05\067\uff05\074\uff05\075\uff05\076\uff05\103\uff05" +
    "\104\uff05\110\uff05\121\uff05\123\uff05\137\uff05\140\uff05\141" +
    "\uff05\150\uff05\001\002\000\004\002\001\001\002\000\004" +
    "\116\u0133\001\002\000\134\003\046\004\130\005\023\006" +
    "\010\007\051\010\137\011\013\012\057\013\036\014\063" +
    "\020\126\022\037\025\034\026\006\027\030\032\134\034" +
    "\143\061\071\062\020\063\055\067\040\074\061\075\ufe85" +
    "\076\004\077\144\102\125\103\050\104\031\105\131\110" +
    "\067\121\045\123\060\127\146\132\133\133\121\135\150" +
    "\136\122\137\056\140\053\141\066\142\127\143\135\144" +
    "\132\150\014\151\124\001\002\000\010\035\u0137\036\175" +
    "\046\174\001\002\000\054\004\uff76\010\uff76\020\uff76\032" +
    "\uff76\034\uff76\035\uff76\077\uff76\102\uff76\105\uff76\127\uff76" +
    "\131\u012a\132\uff76\133\uff76\135\uff76\136\uff76\140\u0129\141" +
    "\u0128\142\uff76\143\uff76\144\uff76\151\uff76\001\002\000\100" +
    "\003\046\005\023\006\010\007\051\011\013\012\057\013" +
    "\036\014\063\022\037\025\034\026\006\027\030\035\uffe9" +
    "\036\uffe9\046\uffe9\061\071\062\020\063\055\067\040\074" +
    "\061\075\ufe85\076\004\103\050\104\031\110\067\121\045" +
    "\123\060\137\056\140\053\141\066\150\014\001\002\000" +
    "\072\003\046\005\023\006\010\007\051\011\013\012\057" +
    "\013\036\014\063\022\037\025\034\026\006\027\030\061" +
    "\071\062\020\063\055\067\040\074\061\075\ufe85\076\004" +
    "\103\050\104\031\110\067\121\045\123\060\137\056\140" +
    "\053\141\066\150\014\001\002\000\116\002\ufefd\003\ufefd" +
    "\005\ufefd\006\ufefd\007\ufefd\011\ufefd\012\ufefd\013\ufefd\014" +
    "\ufefd\022\ufefd\025\ufefd\026\ufefd\027\ufefd\035\ufefd\036\ufefd" +
    "\042\ufefd\043\ufefd\044\ufefd\046\ufefd\054\ufefd\055\ufefd\057" +
    "\ufefd\061\ufefd\062\ufefd\063\ufefd\067\ufefd\074\ufefd\075\ufefd" +
    "\076\ufefd\103\ufefd\104\ufefd\110\ufefd\121\ufefd\123\ufefd\137" +
    "\ufefd\140\ufefd\141\ufefd\150\ufefd\001\002\000\006\036\175" +
    "\046\174\001\002\000\116\002\ufefc\003\ufefc\005\ufefc\006" +
    "\ufefc\007\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc\022\ufefc" +
    "\025\ufefc\026\ufefc\027\ufefc\035\ufefc\036\ufefc\042\ufefc\043" +
    "\ufefc\044\ufefc\046\ufefc\054\ufefc\055\ufefc\057\ufefc\061\ufefc" +
    "\062\ufefc\063\ufefc\067\ufefc\074\ufefc\075\ufefc\076\ufefc\103" +
    "\ufefc\104\ufefc\110\ufefc\121\ufefc\123\ufefc\137\ufefc\140\ufefc" +
    "\141\ufefc\150\ufefc\001\002\000\006\036\u0140\041\u013e\001" +
    "\002\000\006\120\u013d\126\162\001\002\000\016\006\uff00" +
    "\030\uff00\036\uff00\041\uff00\140\uff00\141\uff00\001\002\000" +
    "\116\002\ufe7a\003\ufe7a\005\ufe7a\006\ufe7a\007\ufe7a\011\ufe7a" +
    "\012\ufe7a\013\ufe7a\014\ufe7a\022\ufe7a\025\ufe7a\026\ufe7a\027" +
    "\ufe7a\035\ufe7a\036\ufe7a\042\ufe7a\043\ufe7a\044\ufe7a\046\ufe7a" +
    "\054\ufe7a\055\ufe7a\057\ufe7a\061\ufe7a\062\ufe7a\063\ufe7a\067" +
    "\ufe7a\074\ufe7a\075\ufe7a\076\ufe7a\103\ufe7a\104\ufe7a\110\ufe7a" +
    "\121\ufe7a\123\ufe7a\137\ufe7a\140\ufe7a\141\ufe7a\150\ufe7a\001" +
    "\002\000\116\002\uff01\003\uff01\005\uff01\006\uff01\007\uff01" +
    "\011\uff01\012\uff01\013\uff01\014\uff01\022\uff01\025\uff01\026" +
    "\uff01\027\uff01\035\uff01\036\uff01\042\uff01\043\uff01\044\uff01" +
    "\046\uff01\054\uff01\055\uff01\057\uff01\061\uff01\062\uff01\063" +
    "\uff01\067\uff01\074\uff01\075\uff01\076\uff01\103\uff01\104\uff01" +
    "\110\uff01\121\uff01\123\uff01\137\uff01\140\uff01\141\uff01\150" +
    "\uff01\001\002\000\116\002\ufe7b\003\ufe7b\005\ufe7b\006\ufe7b" +
    "\007\ufe7b\011\ufe7b\012\ufe7b\013\ufe7b\014\ufe7b\022\ufe7b\025" +
    "\ufe7b\026\ufe7b\027\ufe7b\035\ufe7b\036\ufe7b\042\ufe7b\043\ufe7b" +
    "\044\ufe7b\046\ufe7b\054\ufe7b\055\ufe7b\057\ufe7b\061\ufe7b\062" +
    "\ufe7b\063\ufe7b\067\ufe7b\074\ufe7b\075\ufe7b\076\ufe7b\103\ufe7b" +
    "\104\ufe7b\110\ufe7b\121\ufe7b\123\ufe7b\137\ufe7b\140\ufe7b\141" +
    "\ufe7b\150\ufe7b\001\002\000\076\003\046\005\023\006\010" +
    "\007\051\011\013\012\057\013\036\014\063\022\037\025" +
    "\034\026\006\027\030\036\u0148\042\u0146\061\071\062\020" +
    "\063\055\067\040\074\061\075\ufe85\076\004\103\050\104" +
    "\031\110\067\121\045\123\060\137\056\140\053\141\066" +
    "\150\014\001\002\000\010\036\u0148\042\u0146\150\u0127\001" +
    "\002\000\004\033\u0144\001\002\000\072\003\046\005\023" +
    "\006\010\007\051\011\013\012\057\013\036\014\063\022" +
    "\037\025\034\026\006\027\030\061\071\062\020\063\055" +
    "\067\040\074\061\075\ufe85\076\004\103\050\104\031\110" +
    "\067\121\045\123\060\137\056\140\053\141\066\150\014" +
    "\001\002\000\076\003\046\005\023\006\010\007\051\011" +
    "\013\012\057\013\036\014\063\022\037\025\034\026\006" +
    "\027\030\036\u0148\042\u0146\061\071\062\020\063\055\067" +
    "\040\074\061\075\ufe85\076\004\103\050\104\031\110\067" +
    "\121\045\123\060\137\056\140\053\141\066\150\014\001" +
    "\002\000\116\002\ufe78\003\ufe78\005\ufe78\006\ufe78\007\ufe78" +
    "\011\ufe78\012\ufe78\013\ufe78\014\ufe78\022\ufe78\025\ufe78\026" +
    "\ufe78\027\ufe78\035\ufe78\036\ufe78\042\ufe78\043\ufe78\044\ufe78" +
    "\046\ufe78\054\ufe78\055\ufe78\057\ufe78\061\ufe78\062\ufe78\063" +
    "\ufe78\067\ufe78\074\ufe78\075\ufe78\076\ufe78\103\ufe78\104\ufe78" +
    "\110\ufe78\121\ufe78\123\ufe78\137\ufe78\140\ufe78\141\ufe78\150" +
    "\ufe78\001\002\000\116\002\uff08\003\uff08\005\uff08\006\uff08" +
    "\007\uff08\011\uff08\012\uff08\013\uff08\014\uff08\022\uff08\025" +
    "\uff08\026\uff08\027\uff08\035\uff08\036\uff08\042\uff08\043\uff08" +
    "\044\uff08\046\uff08\054\uff08\055\uff08\057\uff08\061\uff08\062" +
    "\uff08\063\uff08\067\uff08\074\uff08\075\uff08\076\uff08\103\uff08" +
    "\104\uff08\110\uff08\121\uff08\123\uff08\137\uff08\140\uff08\141" +
    "\uff08\150\uff08\001\002\000\116\002\ufe79\003\ufe79\005\ufe79" +
    "\006\ufe79\007\ufe79\011\ufe79\012\ufe79\013\ufe79\014\ufe79\022" +
    "\ufe79\025\ufe79\026\ufe79\027\ufe79\035\ufe79\036\ufe79\042\ufe79" +
    "\043\ufe79\044\ufe79\046\ufe79\054\ufe79\055\ufe79\057\ufe79\061" +
    "\ufe79\062\ufe79\063\ufe79\067\ufe79\074\ufe79\075\ufe79\076\ufe79" +
    "\103\ufe79\104\ufe79\110\ufe79\121\ufe79\123\ufe79\137\ufe79\140" +
    "\ufe79\141\ufe79\150\ufe79\001\002\000\116\002\uff06\003\uff06" +
    "\005\uff06\006\uff06\007\uff06\011\uff06\012\uff06\013\uff06\014" +
    "\uff06\022\uff06\025\uff06\026\uff06\027\uff06\035\uff06\036\uff06" +
    "\042\uff06\043\uff06\044\uff06\046\uff06\054\uff06\055\uff06\057" +
    "\uff06\061\uff06\062\uff06\063\uff06\067\uff06\074\uff06\075\uff06" +
    "\076\uff06\103\uff06\104\uff06\110\uff06\121\uff06\123\uff06\137" +
    "\uff06\140\uff06\141\uff06\150\uff06\001\002\000\116\002\uff07" +
    "\003\uff07\005\uff07\006\uff07\007\uff07\011\uff07\012\uff07\013" +
    "\uff07\014\uff07\022\uff07\025\uff07\026\uff07\027\uff07\035\uff07" +
    "\036\uff07\042\uff07\043\uff07\044\uff07\046\uff07\054\uff07\055" +
    "\uff07\057\uff07\061\uff07\062\uff07\063\uff07\067\uff07\074\uff07" +
    "\075\uff07\076\uff07\103\uff07\104\uff07\110\uff07\121\uff07\123" +
    "\uff07\137\uff07\140\uff07\141\uff07\150\uff07\001\002\000\122" +
    "\004\uff73\010\uff73\020\uff73\025\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\045\uff73\046\uff73\051\uff73\052\uff73" +
    "\077\uff73\102\uff73\105\uff73\116\uff73\120\uff73\122\uff73\124" +
    "\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131\uff73\132\uff73" +
    "\133\uff73\135\uff73\136\uff73\140\uff73\141\uff73\142\uff73\143" +
    "\uff73\144\uff73\145\uff73\146\uff73\147\uff73\150\uff73\151\uff73" +
    "\153\uff73\001\002\000\006\036\u0153\043\u0151\001\002\000" +
    "\010\033\ufe57\122\257\126\260\001\002\000\004\033\u014f" +
    "\001\002\000\072\003\046\005\023\006\010\007\051\011" +
    "\013\012\057\013\036\014\063\022\037\025\034\026\006" +
    "\027\030\061\071\062\020\063\055\067\040\074\061\075" +
    "\ufe85\076\004\103\050\104\031\110\067\121\045\123\060" +
    "\137\056\140\053\141\066\150\014\001\002\000\076\003" +
    "\046\005\023\006\010\007\051\011\013\012\057\013\036" +
    "\014\063\022\037\025\034\026\006\027\030\036\u0153\043" +
    "\u0151\061\071\062\020\063\055\067\040\074\061\075\ufe85" +
    "\076\004\103\050\104\031\110\067\121\045\123\060\137" +
    "\056\140\053\141\066\150\014\001\002\000\116\002\ufe76" +
    "\003\ufe76\005\ufe76\006\ufe76\007\ufe76\011\ufe76\012\ufe76\013" +
    "\ufe76\014\ufe76\022\ufe76\025\ufe76\026\ufe76\027\ufe76\035\ufe76" +
    "\036\ufe76\042\ufe76\043\ufe76\044\ufe76\046\ufe76\054\ufe76\055" +
    "\ufe76\057\ufe76\061\ufe76\062\ufe76\063\ufe76\067\ufe76\074\ufe76" +
    "\075\ufe76\076\ufe76\103\ufe76\104\ufe76\110\ufe76\121\ufe76\123" +
    "\ufe76\137\ufe76\140\ufe76\141\ufe76\150\ufe76\001\002\000\116" +
    "\002\uff0a\003\uff0a\005\uff0a\006\uff0a\007\uff0a\011\uff0a\012" +
    "\uff0a\013\uff0a\014\uff0a\022\uff0a\025\uff0a\026\uff0a\027\uff0a" +
    "\035\uff0a\036\uff0a\042\uff0a\043\uff0a\044\uff0a\046\uff0a\054" +
    "\uff0a\055\uff0a\057\uff0a\061\uff0a\062\uff0a\063\uff0a\067\uff0a" +
    "\074\uff0a\075\uff0a\076\uff0a\103\uff0a\104\uff0a\110\uff0a\121" +
    "\uff0a\123\uff0a\137\uff0a\140\uff0a\141\uff0a\150\uff0a\001\002" +
    "\000\116\002\ufe77\003\ufe77\005\ufe77\006\ufe77\007\ufe77\011" +
    "\ufe77\012\ufe77\013\ufe77\014\ufe77\022\ufe77\025\ufe77\026\ufe77" +
    "\027\ufe77\035\ufe77\036\ufe77\042\ufe77\043\ufe77\044\ufe77\046" +
    "\ufe77\054\ufe77\055\ufe77\057\ufe77\061\ufe77\062\ufe77\063\ufe77" +
    "\067\ufe77\074\ufe77\075\ufe77\076\ufe77\103\ufe77\104\ufe77\110" +
    "\ufe77\121\ufe77\123\ufe77\137\ufe77\140\ufe77\141\ufe77\150\ufe77" +
    "\001\002\000\116\002\uff09\003\uff09\005\uff09\006\uff09\007" +
    "\uff09\011\uff09\012\uff09\013\uff09\014\uff09\022\uff09\025\uff09" +
    "\026\uff09\027\uff09\035\uff09\036\uff09\042\uff09\043\uff09\044" +
    "\uff09\046\uff09\054\uff09\055\uff09\057\uff09\061\uff09\062\uff09" +
    "\063\uff09\067\uff09\074\uff09\075\uff09\076\uff09\103\uff09\104" +
    "\uff09\110\uff09\121\uff09\123\uff09\137\uff09\140\uff09\141\uff09" +
    "\150\uff09\001\002\000\010\033\u015f\036\u0160\126\340\001" +
    "\002\000\016\006\ufeff\030\ufeff\036\ufeff\041\ufeff\140\ufeff" +
    "\141\ufeff\001\002\000\116\002\uff02\003\uff02\005\uff02\006" +
    "\uff02\007\uff02\011\uff02\012\uff02\013\uff02\014\uff02\022\uff02" +
    "\025\uff02\026\uff02\027\uff02\035\uff02\036\uff02\042\uff02\043" +
    "\uff02\044\uff02\046\uff02\054\uff02\055\uff02\057\uff02\061\uff02" +
    "\062\uff02\063\uff02\067\uff02\074\uff02\075\uff02\076\uff02\103" +
    "\uff02\104\uff02\110\uff02\121\uff02\123\uff02\137\uff02\140\uff02" +
    "\141\uff02\150\uff02\001\002\000\016\006\ufefe\030\ufefe\036" +
    "\ufefe\041\ufefe\140\ufefe\141\ufefe\001\002\000\076\003\ufe83" +
    "\005\ufe83\006\ufe83\007\ufe83\011\ufe83\012\ufe83\013\ufe83\014" +
    "\ufe83\022\ufe83\025\ufe83\026\ufe83\027\ufe83\033\u015a\036\ufe83" +
    "\061\ufe83\062\ufe83\063\ufe83\067\ufe83\074\ufe83\075\ufe83\076" +
    "\ufe83\103\ufe83\104\ufe83\110\ufe83\121\ufe83\123\ufe83\137\ufe83" +
    "\140\ufe83\141\ufe83\150\ufe83\001\002\000\074\003\ufe82\005" +
    "\ufe82\006\ufe82\007\ufe82\011\ufe82\012\ufe82\013\ufe82\014\ufe82" +
    "\022\ufe82\025\ufe82\026\ufe82\027\ufe82\036\ufe82\061\ufe82\062" +
    "\ufe82\063\ufe82\067\ufe82\074\ufe82\075\ufe82\076\ufe82\103\ufe82" +
    "\104\ufe82\110\ufe82\121\ufe82\123\ufe82\137\ufe82\140\ufe82\141" +
    "\ufe82\150\ufe82\001\002\000\074\003\046\005\023\006\010" +
    "\007\051\011\013\012\057\013\036\014\063\022\037\025" +
    "\034\026\006\027\030\036\uffe8\061\071\062\020\063\055" +
    "\067\040\074\061\075\ufe85\076\004\103\050\104\031\110" +
    "\067\121\045\123\060\137\056\140\053\141\066\150\014" +
    "\001\002\000\004\036\uffe7\001\002\000\004\036\u015e\001" +
    "\002\000\016\006\uffdf\030\uffdf\036\uffdf\041\uffdf\140\uffdf" +
    "\141\uffdf\001\002\000\074\003\046\005\023\006\010\007" +
    "\051\011\013\012\057\013\036\014\063\022\037\025\034" +
    "\026\006\027\030\036\uffe8\061\071\062\020\063\055\067" +
    "\040\074\061\075\ufe85\076\004\103\050\104\031\110\067" +
    "\121\045\123\060\137\056\140\053\141\066\150\014\001" +
    "\002\000\016\006\uffde\030\uffde\036\uffde\041\uffde\140\uffde" +
    "\141\uffde\001\002\000\004\036\u0162\001\002\000\016\006" +
    "\uffdd\030\uffdd\036\uffdd\041\uffdd\140\uffdd\141\uffdd\001\002" +
    "\000\114\004\130\005\023\006\010\007\051\010\137\011" +
    "\013\012\057\013\036\014\063\020\126\026\006\032\134" +
    "\034\143\061\071\067\136\074\061\075\ufe85\076\004\077" +
    "\144\102\125\103\050\104\031\105\131\110\067\121\045" +
    "\127\146\132\133\133\121\135\150\136\122\137\056\140" +
    "\053\141\066\142\127\143\135\144\132\151\124\001\002" +
    "\000\004\150\u0165\001\002\000\116\002\uff0e\003\uff0e\005" +
    "\uff0e\006\uff0e\007\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e" +
    "\022\uff0e\025\uff0e\026\uff0e\027\uff0e\035\uff0e\036\uff0e\042" +
    "\uff0e\043\uff0e\044\uff0e\046\uff0e\054\uff0e\055\uff0e\057\uff0e" +
    "\061\uff0e\062\uff0e\063\uff0e\067\uff0e\074\uff0e\075\uff0e\076" +
    "\uff0e\103\uff0e\104\uff0e\110\uff0e\121\uff0e\123\uff0e\137\uff0e" +
    "\140\uff0e\141\uff0e\150\uff0e\001\002\000\004\141\u0167\001" +
    "\002\000\012\006\010\140\112\141\104\147\uffd3\001\002" +
    "\000\004\147\u0169\001\002\000\010\122\uffc6\124\uffc6\127" +
    "\325\001\002\000\006\122\257\124\ufe57\001\002\000\004" +
    "\124\u016c\001\002\000\114\004\130\005\023\006\010\007" +
    "\051\010\137\011\013\012\057\013\036\014\063\020\126" +
    "\026\006\032\134\034\143\061\071\067\136\074\061\075" +
    "\ufe85\076\004\077\144\102\125\103\050\104\031\105\131" +
    "\110\067\121\045\127\146\132\133\133\121\135\150\136" +
    "\122\137\056\140\053\141\066\142\127\143\135\144\132" +
    "\151\124\001\002\000\006\036\u016f\051\u016e\001\002\000" +
    "\122\004\ufe6a\010\ufe6a\020\ufe6a\025\ufe6a\032\ufe6a\033\ufe6a" +
    "\034\ufe6a\035\ufe6a\036\ufe6a\045\ufe6a\046\ufe6a\051\ufe6a\052" +
    "\ufe6a\077\ufe6a\102\ufe6a\105\ufe6a\116\ufe6a\120\ufe6a\122\ufe6a" +
    "\124\ufe6a\125\ufe6a\126\ufe6a\127\ufe6a\130\ufe6a\131\ufe6a\132" +
    "\ufe6a\133\ufe6a\135\ufe6a\136\ufe6a\140\ufe6a\141\ufe6a\142\ufe6a" +
    "\143\ufe6a\144\ufe6a\145\ufe6a\146\ufe6a\147\ufe6a\150\ufe6a\151" +
    "\ufe6a\153\ufe6a\001\002\000\122\004\ufe6b\010\ufe6b\020\ufe6b" +
    "\025\ufe6b\032\ufe6b\033\ufe6b\034\ufe6b\035\ufe6b\036\ufe6b\045" +
    "\ufe6b\046\ufe6b\051\ufe6b\052\ufe6b\077\ufe6b\102\ufe6b\105\ufe6b" +
    "\116\ufe6b\120\ufe6b\122\ufe6b\124\ufe6b\125\ufe6b\126\ufe6b\127" +
    "\ufe6b\130\ufe6b\131\ufe6b\132\ufe6b\133\ufe6b\135\ufe6b\136\ufe6b" +
    "\140\ufe6b\141\ufe6b\142\ufe6b\143\ufe6b\144\ufe6b\145\ufe6b\146" +
    "\ufe6b\147\ufe6b\150\ufe6b\151\ufe6b\153\ufe6b\001\002\000\122" +
    "\004\uff9d\010\uff9d\020\uff9d\025\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d" +
    "\077\uff9d\102\uff9d\105\uff9d\116\uff9d\120\uff9d\122\uff9d\124" +
    "\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d\132\uff9d" +
    "\133\uff9d\135\uff9d\136\uff9d\140\uff9d\141\uff9d\142\uff9d\143" +
    "\uff9d\144\uff9d\145\uff9d\146\uff9d\147\uff9d\150\uff9d\151\uff9d" +
    "\153\uff9d\001\002\000\116\004\130\005\023\006\010\007" +
    "\051\010\137\011\013\012\057\013\036\014\063\020\126" +
    "\026\006\032\134\034\143\061\071\067\136\074\061\075" +
    "\ufe85\076\004\077\144\102\125\103\050\104\031\105\131" +
    "\110\067\121\045\127\146\132\133\133\121\135\150\136" +
    "\122\137\056\140\053\141\066\142\127\143\135\144\132" +
    "\145\u0175\151\124\001\002\000\004\130\u017a\001\002\000" +
    "\010\124\u0119\126\u0177\145\ufe87\001\002\000\010\124\uff51" +
    "\126\uff51\145\uff51\001\002\000\122\004\uff8f\010\uff8f\020" +
    "\uff8f\025\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\045\uff8f\046\uff8f\051\uff8f\052\uff8f\077\uff8f\102\uff8f\105" +
    "\uff8f\116\uff8f\120\uff8f\122\uff8f\124\uff8f\125\uff8f\126\uff8f" +
    "\127\uff8f\130\uff8f\131\uff8f\132\uff8f\133\uff8f\135\uff8f\136" +
    "\uff8f\140\uff8f\141\uff8f\142\uff8f\143\uff8f\144\uff8f\145\uff8f" +
    "\146\uff8f\147\uff8f\150\uff8f\151\uff8f\153\uff8f\001\002\000" +
    "\004\145\u0179\001\002\000\114\004\130\005\023\006\010" +
    "\007\051\010\137\011\013\012\057\013\036\014\063\020" +
    "\126\026\006\032\134\034\143\061\071\067\136\074\061" +
    "\075\ufe85\076\004\077\144\102\125\103\050\104\031\105" +
    "\131\110\067\121\045\127\146\132\133\133\121\135\150" +
    "\136\122\137\056\140\053\141\066\142\127\143\135\144" +
    "\132\151\124\001\002\000\010\124\uff50\126\uff50\145\uff50" +
    "\001\002\000\122\004\uff8e\010\uff8e\020\uff8e\025\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\045\uff8e\046\uff8e" +
    "\051\uff8e\052\uff8e\077\uff8e\102\uff8e\105\uff8e\116\uff8e\120" +
    "\uff8e\122\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e" +
    "\131\uff8e\132\uff8e\133\uff8e\135\uff8e\136\uff8e\140\uff8e\141" +
    "\uff8e\142\uff8e\143\uff8e\144\uff8e\145\uff8e\146\uff8e\147\uff8e" +
    "\150\uff8e\151\uff8e\153\uff8e\001\002\000\114\004\130\005" +
    "\023\006\010\007\051\010\137\011\013\012\057\013\036" +
    "\014\063\020\126\026\006\032\134\034\143\061\071\067" +
    "\136\074\061\075\ufe85\076\004\077\144\102\125\103\050" +
    "\104\031\105\131\110\067\121\045\127\146\132\133\133" +
    "\121\135\150\136\122\137\056\140\053\141\066\142\127" +
    "\143\135\144\132\151\124\001\002\000\010\124\uff52\126" +
    "\uff52\145\uff52\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\104\051\076\052\064\053\011\054\075\056" +
    "\020\057\031\060\041\061\043\062\004\063\026\064\014" +
    "\065\046\067\025\076\071\077\074\150\042\151\010\152" +
    "\040\153\073\154\016\155\032\156\015\157\063\160\024" +
    "\161\034\162\023\163\051\164\061\202\006\225\072\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\264\153\073\154\016" +
    "\155\032\156\015\157\063\160\024\161\034\162\023\163" +
    "\051\164\061\202\006\225\072\227\067\230\053\231\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\u0157\014\u0155\021\u0154\023\317" +
    "\024\316\166\320\167\102\170\105\171\106\176\104\177" +
    "\100\207\u0156\230\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\076\u014c\077\074\225" +
    "\266\001\001\000\004\230\u014a\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\051\076\052\064\053\011\054" +
    "\075\056\020\057\031\060\041\061\043\062\004\063\026" +
    "\064\014\065\046\067\025\076\071\077\074\150\042\151" +
    "\u0140\153\073\154\016\155\032\156\015\157\063\160\024" +
    "\161\034\162\023\163\051\164\061\201\u0142\202\006\225" +
    "\072\227\067\230\053\231\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\050\122\051\076\052\064\053" +
    "\011\054\075\056\020\057\031\060\137\061\141\062\004" +
    "\063\026\064\014\065\046\066\144\067\025\070\157\071" +
    "\u013b\074\146\075\150\202\006\227\067\230\053\231\021" +
    "\001\001\000\056\050\122\051\076\052\064\053\011\054" +
    "\075\056\020\057\031\060\137\061\141\062\004\063\026" +
    "\064\014\065\046\066\144\067\025\070\u0131\074\146\075" +
    "\150\202\006\227\067\230\053\231\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\050\122\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\137\061\141\062\004\063\026\064\014\065" +
    "\046\066\144\067\025\070\157\071\u011c\074\146\075\150" +
    "\202\006\227\067\230\053\231\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\050\122\051\076\052\064" +
    "\053\011\054\075\056\020\057\031\060\137\061\141\062" +
    "\004\063\026\064\014\065\046\066\144\067\025\070\157" +
    "\071\u0116\074\146\075\150\202\006\227\067\230\053\231" +
    "\021\001\001\000\002\001\001\000\056\050\122\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\137\061" +
    "\141\062\004\063\026\064\014\065\046\066\144\067\025" +
    "\070\u010c\074\146\075\150\202\006\227\067\230\053\231" +
    "\021\001\001\000\034\025\u0104\026\273\027\302\032\300" +
    "\033\272\034\301\166\271\167\102\170\105\171\106\176" +
    "\104\177\100\230\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\041" +
    "\u0100\050\122\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\137\061\141\062\004\063\026\064\014\065" +
    "\046\066\144\067\025\070\376\074\146\075\150\202\006" +
    "\227\067\230\377\231\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\201\260\001\001" +
    "\000\024\015\077\016\107\166\112\167\102\170\105\171" +
    "\106\176\104\177\100\230\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\042\246\043\245\044\244\230" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\212\242\001\001\000" +
    "\026\045\210\046\211\047\207\166\212\167\102\170\105" +
    "\171\106\176\104\177\100\230\206\001\001\000\010\015" +
    "\113\016\107\230\114\001\001\000\004\100\117\001\001" +
    "\000\002\001\001\000\006\016\205\230\114\001\001\000" +
    "\056\050\122\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\137\061\141\062\004\063\026\064\014\065" +
    "\046\066\144\067\025\070\140\074\146\075\150\202\006" +
    "\227\067\230\053\231\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\073\203\075\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\050\122\051\076\052\064\053\011" +
    "\054\075\056\020\057\031\060\137\061\141\062\004\063" +
    "\026\064\014\065\046\066\144\067\025\070\171\074\146" +
    "\075\150\202\006\227\067\230\053\231\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\166\075\167\001\001\000\002\001\001\000\044\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\151\061" +
    "\141\062\004\063\026\064\014\065\046\067\025\202\006" +
    "\227\067\230\053\231\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\050\122\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\137\061" +
    "\141\062\004\063\026\064\014\065\046\066\144\067\025" +
    "\070\157\071\160\072\164\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\062\050\122\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\137\061" +
    "\141\062\004\063\026\064\014\065\046\066\144\067\025" +
    "\070\157\071\160\072\156\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\004\230\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\050\122\051\076\052\064\053\011" +
    "\054\075\056\020\057\031\060\137\061\141\062\004\063" +
    "\026\064\014\065\046\066\144\067\025\070\162\074\146" +
    "\075\150\202\006\227\067\230\053\231\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\051\076\052\064\053\011\054\075\056" +
    "\020\057\031\060\137\061\141\062\004\063\026\064\014" +
    "\065\046\066\170\067\025\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\214\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\050\122\051\076\052\064\053\011\054\075\056\020\057" +
    "\031\060\137\061\141\062\004\063\026\064\014\065\046" +
    "\066\144\067\025\070\177\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\056" +
    "\050\122\051\076\052\064\053\011\054\075\056\020\057" +
    "\031\060\137\061\141\062\004\063\026\064\014\065\046" +
    "\066\144\067\025\070\201\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\004\214\202\001\001" +
    "\000\002\001\001\000\052\051\076\052\064\053\011\054" +
    "\075\056\020\057\031\060\137\061\141\062\004\063\026" +
    "\064\014\065\046\066\204\067\025\074\146\075\150\202" +
    "\006\227\067\230\053\231\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\045\214\166\212\167\102\170\105\171\106\176\104\177" +
    "\100\230\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\166\220\167\102\170\105\171\106\176\104\177" +
    "\100\230\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\036\226\037\230\040\227\230" +
    "\231\001\001\000\026\045\210\046\211\047\224\166\212" +
    "\167\102\170\105\171\106\176\104\177\100\230\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\050\122\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\137\061\141\062\004\063\026\064\014\065" +
    "\046\066\144\067\025\070\235\074\146\075\150\202\006" +
    "\227\067\230\053\231\021\001\001\000\020\166\234\167" +
    "\102\170\105\171\106\176\104\177\100\230\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\237\230" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\166\251\167\102\170\105\171\106\176\104\177" +
    "\100\230\206\001\001\000\002\001\001\000\006\042\253" +
    "\230\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\025\276\026\273\027\302\032\300" +
    "\033\272\034\301\166\271\167\102\170\105\171\106\176" +
    "\104\177\100\230\277\001\001\000\062\050\122\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\137\061" +
    "\141\062\004\063\026\064\014\065\046\066\144\067\025" +
    "\070\265\074\146\075\150\077\267\202\006\225\266\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\102" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\041\061\043\062\004\063\026\064\014\065\046\067\025" +
    "\076\071\077\074\150\042\151\262\153\073\154\016\155" +
    "\032\156\015\157\063\160\024\161\034\162\023\163\051" +
    "\164\061\202\006\225\072\227\067\230\053\231\021\001" +
    "\001\000\102\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\264\153\073\154\016" +
    "\155\032\156\015\157\063\160\024\161\034\162\023\163" +
    "\051\164\061\202\006\212\263\225\072\227\067\230\053" +
    "\231\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\077\016\107\166\112\167\102" +
    "\170\105\171\106\176\104\177\100\230\101\001\001\000" +
    "\002\001\001\000\004\230\347\001\001\000\004\230\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\034" +
    "\342\166\271\167\102\170\105\171\106\176\104\177\100" +
    "\230\277\001\001\000\004\230\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\050\122\051\076\052\064\053" +
    "\011\054\075\056\020\057\031\060\137\061\141\062\004" +
    "\063\026\064\014\065\046\066\144\067\025\070\306\074" +
    "\146\075\150\202\006\227\067\230\053\231\021\001\001" +
    "\000\056\050\122\051\076\052\064\053\011\054\075\056" +
    "\020\057\031\060\137\061\141\062\004\063\026\064\014" +
    "\065\046\066\144\067\025\070\305\074\146\075\150\202" +
    "\006\227\067\230\053\231\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\026\310\027\302\032\300\033" +
    "\272\034\301\166\271\167\102\170\105\171\106\176\104" +
    "\177\100\230\277\001\001\000\002\001\001\000\004\213" +
    "\341\001\001\000\002\001\001\000\030\021\314\022\321" +
    "\023\317\024\316\166\320\167\102\170\105\171\106\176" +
    "\104\177\100\230\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\230" +
    "\334\001\001\000\002\001\001\000\004\031\323\001\001" +
    "\000\004\201\326\001\001\000\020\166\325\167\102\170" +
    "\105\171\106\176\104\177\100\230\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\050\122\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\137\061\141" +
    "\062\004\063\026\064\014\065\046\066\144\067\025\070" +
    "\330\074\146\075\150\202\006\227\067\230\053\231\021" +
    "\001\001\000\004\213\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\050\122\051\076\052\064\053\011\054\075\056\020\057" +
    "\031\060\137\061\141\062\004\063\026\064\014\065\046" +
    "\066\144\067\025\070\336\074\146\075\150\202\006\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\024" +
    "\023\340\024\316\166\320\167\102\170\105\171\106\176" +
    "\104\177\100\230\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\050\122\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\137\061\141" +
    "\062\004\063\026\064\014\065\046\066\144\067\025\070" +
    "\344\074\146\075\150\202\006\227\067\230\053\231\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\222" +
    "\361\001\001\000\002\001\001\000\030\021\314\022\351" +
    "\023\317\024\316\166\320\167\102\170\105\171\106\176" +
    "\104\177\100\230\315\001\001\000\002\001\001\000\004" +
    "\201\353\001\001\000\002\001\001\000\102\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\041\061\043" +
    "\062\004\063\026\064\014\065\046\067\025\076\071\077" +
    "\074\150\042\151\355\153\073\154\016\155\032\156\015" +
    "\157\063\160\024\161\034\162\023\163\051\164\061\202" +
    "\006\225\072\227\067\230\053\231\021\001\001\000\102" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\041\061\043\062\004\063\026\064\014\065\046\067\025" +
    "\076\071\077\074\150\264\153\073\154\016\155\032\156" +
    "\015\157\063\160\024\161\034\162\023\163\051\164\061" +
    "\202\006\222\356\225\072\227\067\230\053\231\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\222\374\001\001\000\030\021" +
    "\314\022\364\023\317\024\316\166\320\167\102\170\105" +
    "\171\106\176\104\177\100\230\315\001\001\000\002\001" +
    "\001\000\004\201\366\001\001\000\002\001\001\000\102" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\041\061\043\062\004\063\026\064\014\065\046\067\025" +
    "\076\071\077\074\150\042\151\370\153\073\154\016\155" +
    "\032\156\015\157\063\160\024\161\034\162\023\163\051" +
    "\164\061\202\006\225\072\227\067\230\053\231\021\001" +
    "\001\000\102\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\264\153\073\154\016" +
    "\155\032\156\015\157\063\160\024\161\034\162\023\163" +
    "\051\164\061\202\006\221\371\225\072\227\067\230\053" +
    "\231\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\050" +
    "\122\051\076\052\064\053\011\054\075\056\020\057\031" +
    "\060\137\061\141\062\004\063\026\064\014\065\046\066" +
    "\144\067\025\070\u0102\074\146\075\150\202\006\227\067" +
    "\230\053\231\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\220\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\050" +
    "\122\051\076\052\064\053\011\054\075\056\020\057\031" +
    "\060\137\061\141\062\004\063\026\064\014\065\046\066" +
    "\144\067\025\070\u010a\074\146\075\150\202\006\227\067" +
    "\230\053\231\021\001\001\000\004\220\u010b\001\001\000" +
    "\002\001\001\000\004\201\u0111\001\001\000\004\224\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\051\076\052\064\053\011" +
    "\054\075\056\020\057\031\060\041\061\043\062\004\063" +
    "\026\064\014\065\046\067\025\076\071\077\074\150\042" +
    "\151\010\152\u0113\153\073\154\016\155\032\156\015\157" +
    "\063\160\024\161\034\162\023\163\051\164\061\202\006" +
    "\225\072\227\067\230\053\231\021\001\001\000\004\224" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\200\u0117\001\001\000\002\001\001\000\010\076\u0119\077" +
    "\074\225\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\200\u011d\001\001\000\004\055" +
    "\u011e\001\001\000\002\001\001\000\056\050\122\051\076" +
    "\052\064\053\011\054\075\056\020\057\031\060\137\061" +
    "\141\062\004\063\026\064\014\065\046\066\144\067\025" +
    "\070\u0120\074\146\075\150\202\006\227\067\230\053\231" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\u0124\230\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\050\122" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\137\061\141\062\004\063\026\064\014\065\046\066\144" +
    "\067\025\070\157\071\160\072\u012d\074\146\075\150\202" +
    "\006\227\067\230\053\231\021\001\001\000\062\050\122" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\137\061\141\062\004\063\026\064\014\065\046\066\144" +
    "\067\025\070\157\071\160\072\u012b\074\146\075\150\202" +
    "\006\227\067\230\053\231\021\001\001\000\004\230\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\116\010\u0133\050" +
    "\122\051\076\052\064\053\011\054\075\056\020\057\031" +
    "\060\u0134\061\043\062\004\063\026\064\014\065\046\066" +
    "\144\067\025\070\177\074\146\075\150\076\071\077\074" +
    "\150\042\151\u0135\153\073\154\016\155\032\156\015\157" +
    "\063\160\024\161\034\162\023\163\051\164\061\202\006" +
    "\225\072\227\067\230\053\231\021\001\001\000\004\214" +
    "\u0137\001\001\000\002\001\001\000\100\051\076\052\064" +
    "\053\011\054\075\056\020\057\031\060\041\061\043\062" +
    "\004\063\026\064\014\065\046\067\025\076\071\077\074" +
    "\150\264\153\073\154\016\155\032\156\015\157\063\160" +
    "\024\161\034\162\023\163\051\164\061\202\006\225\072" +
    "\227\067\230\053\231\021\001\001\000\104\010\u0138\051" +
    "\076\052\064\053\011\054\075\056\020\057\031\060\041" +
    "\061\043\062\004\063\026\064\014\065\046\067\025\076" +
    "\071\077\074\150\042\151\u0135\153\073\154\016\155\032" +
    "\156\015\157\063\160\024\161\034\162\023\163\051\164" +
    "\061\202\006\225\072\227\067\230\053\231\021\001\001" +
    "\000\002\001\001\000\004\214\u0139\001\001\000\002\001" +
    "\001\000\004\207\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\264\153\073\154\016" +
    "\155\032\156\015\157\063\160\024\161\034\162\023\163" +
    "\051\164\061\202\006\210\u0149\225\072\227\067\230\053" +
    "\231\021\001\001\000\004\210\u0148\001\001\000\002\001" +
    "\001\000\102\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\042\151\u0144\153\073" +
    "\154\016\155\032\156\015\157\063\160\024\161\034\162" +
    "\023\163\051\164\061\202\006\225\072\227\067\230\053" +
    "\231\021\001\001\000\102\051\076\052\064\053\011\054" +
    "\075\056\020\057\031\060\041\061\043\062\004\063\026" +
    "\064\014\065\046\067\025\076\071\077\074\150\264\153" +
    "\073\154\016\155\032\156\015\157\063\160\024\161\034" +
    "\162\023\163\051\164\061\202\006\210\u0146\225\072\227" +
    "\067\230\053\231\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\u0153\001\001\000\004" +
    "\201\u014d\001\001\000\002\001\001\000\102\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\041\061\043" +
    "\062\004\063\026\064\014\065\046\067\025\076\071\077" +
    "\074\150\042\151\u014f\153\073\154\016\155\032\156\015" +
    "\157\063\160\024\161\034\162\023\163\051\164\061\202" +
    "\006\225\072\227\067\230\053\231\021\001\001\000\102" +
    "\051\076\052\064\053\011\054\075\056\020\057\031\060" +
    "\041\061\043\062\004\063\026\064\014\065\046\067\025" +
    "\076\071\077\074\150\264\153\073\154\016\155\032\156" +
    "\015\157\063\160\024\161\034\162\023\163\051\164\061" +
    "\202\006\211\u0151\225\072\227\067\230\053\231\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\203\u015a\001\001" +
    "\000\002\001\001\000\106\010\u015b\011\u015c\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\041\061\043" +
    "\062\004\063\026\064\014\065\046\067\025\076\071\077" +
    "\074\150\042\151\u0135\153\073\154\016\155\032\156\015" +
    "\157\063\160\024\161\034\162\023\163\051\164\061\202" +
    "\006\225\072\227\067\230\053\231\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\010" +
    "\u015b\011\u0160\051\076\052\064\053\011\054\075\056\020" +
    "\057\031\060\041\061\043\062\004\063\026\064\014\065" +
    "\046\067\025\076\071\077\074\150\042\151\u0135\153\073" +
    "\154\016\155\032\156\015\157\063\160\024\161\034\162" +
    "\023\163\051\164\061\202\006\225\072\227\067\230\053" +
    "\231\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\050\122\051\076\052\064\053\011" +
    "\054\075\056\020\057\031\060\137\061\141\062\004\063" +
    "\026\064\014\065\046\066\144\067\025\070\u0163\074\146" +
    "\075\150\202\006\227\067\230\053\231\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\021\314\022\u0167\023\317\024\316\166\320\167\102\170" +
    "\105\171\106\176\104\177\100\230\315\001\001\000\002" +
    "\001\001\000\004\031\u0169\001\001\000\004\201\u016a\001" +
    "\001\000\002\001\001\000\056\050\122\051\076\052\064" +
    "\053\011\054\075\056\020\057\031\060\137\061\141\062" +
    "\004\063\026\064\014\065\046\066\144\067\025\070\u016c" +
    "\074\146\075\150\202\006\227\067\230\053\231\021\001" +
    "\001\000\004\217\u016f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\050\122\051\076\052" +
    "\064\053\011\054\075\056\020\057\031\060\137\061\141" +
    "\062\004\063\026\064\014\065\046\066\144\067\025\070" +
    "\u0171\074\146\075\150\113\u0173\114\u0172\202\006\227\067" +
    "\230\053\231\021\001\001\000\002\001\001\000\004\200" +
    "\u0175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\050\122\051\076\052\064\053\011\054" +
    "\075\056\020\057\031\060\137\061\141\062\004\063\026" +
    "\064\014\065\046\066\144\067\025\070\u0171\074\146\075" +
    "\150\113\u0177\202\006\227\067\230\053\231\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\050\122\051" +
    "\076\052\064\053\011\054\075\056\020\057\031\060\137" +
    "\061\141\062\004\063\026\064\014\065\046\066\144\067" +
    "\025\070\u017a\074\146\075\150\202\006\227\067\230\053" +
    "\231\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalStatementParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalStatementParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalStatementParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ///////////////////////////////////////////////////////////////////////
    ////  Statement
    ///////////////////////////////////////////////////////////////////////

    //
    //  Return a document containing the parsed lexer source, describing the source as 'fileName' in diagnostics.
    //
    public Document doParse() throws java.lang.Exception {
        return doParse("<nofile>");
    }

    public Document doParse(String filename) throws java.lang.Exception {
        return doParse(filename, false);
    }

    //
    //  Return a document containing the parsed lexer source, describing the source as 'fileName' in diagnostics.
    //
    public Document doParse(String filename, boolean doDebug) throws java.lang.Exception {
        net.sf.caltrop.util.Util.setDefaultDBFI();
        DOMImplementation domImpl = DocumentBuilderFactory.newInstance().newDocumentBuilder().getDOMImplementation();
        document = domImpl.createDocument("", "Statement", null);
        file = filename;
        debug = doDebug;
        errors = 0;
        document.insertBefore(document.createComment(" Generated by Caltrop Parser version 1.2 "), document.getDocumentElement());
        Symbol returnSymbol = debug ? super.debug_parse() : super.parse();
        if (errors > 0)
            throw new Exception(errors + " errors reported.");
        if (returnSymbol != null) {
            for (Iterator i = ((List)returnSymbol.value).iterator(); i.hasNext(); ) {
                document.getDocumentElement().appendChild((Element)i.next());
            }
            return document;
        } else {
            return null;
        }
    }


    //
    //  Override the error report to prepend the sourece and line context.
    //
    public void report_error(String message) {
        if (debug && (lookahead != null)) {
            for (int i = 0; i <= lookahead_pos; i++) {
                System.out.println("Lookahead " + lookahead[i] + ", left=" + lookahead[i].left
                                + ", right=" + lookahead[i].right
                                + ", parse_state=" + lookahead[i].parse_state
                                + ", value=" + (lookahead[i].value != null ? lookahead[i].value : "-nil-"));
             }
        }
        report_error(message, lookahead != null ? lookahead[0] : cur_token);
    }

    //
    //  Override the error report to prepend the source and line context.
    //
    public void report_error(String message, Object info) {
        StringBuffer s = new StringBuffer();
        if (file != null)
            s.append(file + ".");
        else
            s.append("Line ");
        if (!(info instanceof Symbol))
            s.append("?");
        else if (((Symbol)info).left == -1)
            s.append("?");
        else {
            s.append(((Symbol)info).left);
            s.append(".");
            s.append(((Symbol)info).right);
        }
        s.append(": " + message);
        System.err.println(s);
        errors++;                   // Over-range exception thrown from scan where inheritance allows.
    }

    //
    //  Generate a syntax error report describing 'aSymbol' with 'aMessage' suffix.
    //
    public void report_error(String messagePrefix, Symbol aSymbol, String messageSuffix) {
//        System.out.println("Symbol " + aSymbol + ", left=" + aSymbol.left
//                        + ", right=" + aSymbol.right
//                        + ", parse_state=" + aSymbol.parse_state
//                        + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));
        Symbol theSymbol = aSymbol != null ? aSymbol : lookahead != null ? lookahead[0] : cur_token;
        report_error(messagePrefix + " \"" + theSymbol.value  +"\"" + messageSuffix, theSymbol);
    }

    //
    //  Override the symbol scan to report illegal characters and abort on error count exceeded..
    //
    public Symbol scan() throws Exception {
        while (true) {
            if (errors > max_errors)
                throw new Exception("Too many errors.");
            Symbol aSymbol = super.scan();
            if (aSymbol == null)
                return null;
            if (debug)
                System.out.println("Scan symbol " + aSymbol + ", left=" + aSymbol.left
                            + ", right=" + aSymbol.right
                            + ", parse_state=" + aSymbol.parse_state
                            + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));
            if (aSymbol.sym == Terminal.IllegalCharacter)
                report_error("Illegal character \"" + aSymbol.value  +"\".", aSymbol);
            else
                return aSymbol;
        }
    }

    //
    //  Generate a syntax error report on the current token with 'aMessage' suffix.
    //
    public void syntax_error(String aMessage) {
        if (debug && (lookahead != null)) {
            for (int i = 0; i <= lookahead_pos; i++) {
                System.out.println("Lookahead " + lookahead[i] + ", left=" + lookahead[i].left
                                + ", right=" + lookahead[i].right
                                + ", parse_state=" + lookahead[i].parse_state
                                + ", value=" + (lookahead[i].value != null ? lookahead[i].value : "-nil-"));
             }
        }
        syntax_error(lookahead != null ? lookahead[0] : cur_token, aMessage);
    }

    //
    //  Override the syntax error report to redirect to the symbol+message implementation.
    //
    public void syntax_error(Symbol aSymbol) {
        syntax_error(aSymbol, ".");
    }

    //
    //  Generate a syntax error report describing 'aSymbol' with 'messageSuffix'.
    //
    public void syntax_error(Symbol aSymbol, String messageSuffix) {
//        System.out.println("Symbol " + aSymbol + ", left=" + aSymbol.left
//                        + ", right=" + aSymbol.right
//                        + ", parse_state=" + aSymbol.parse_state
//                        + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));
        report_error("Syntax error at \"" + aSymbol.value  +"\"" + messageSuffix, aSymbol);
    }

    public boolean getDebug() { return debug; }
    public Document getDocument() { return document; }

    private boolean debug = false;          // True for debug messages.
    private Document document = null;       // Current document while reading.
    private String file = null;             // Name of source file in diagnostics
    public int errors = 0;                  // Errors during parse.
    public int max_errors = 20;             // Maximum errors before termination.
    /*--INSERT-PARSER-CODE--*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalStatementParser$actions {


    private Element appendChild(Element element, Node child1) {
        if (child1 != null)
            element.appendChild(child1);
        return element;
    }
    private Element appendChild(Element element, Node child1, Node child2) {
        if (child1 != null)
            element.appendChild(child1);
        if (child2 != null)
            element.appendChild(child2);
        return element;
    }
    private Element appendChild(Element element, Node child1, Node child2, Node child3) {
        if (child1 != null)
            element.appendChild(child1);
        if (child2 != null)
            element.appendChild(child2);
        if (child3 != null)
            element.appendChild(child3);
        return element;
    }
    private Element appendChildren(Element element, List children) {
        if (children != null) {
            if (parser.getDebug())
                System.out.println("Append to node." + (element != null ? element.getNodeName() : "-nil-"));
            for (Iterator it = children.iterator(); it.hasNext(); ) {
                Node aNode = (Node)it.next();
                if (aNode != null) {
                    if (parser.getDebug())
                        System.out.println("   node." + aNode.getNodeName());
                    if (aNode instanceof Attr)
                        element.setAttributeNode((Attr)aNode);
                    else
                        element.appendChild(aNode);
                }
            }
        }
        return element;
    }
    private Attr createAttribute(String name) {
        return parser.getDocument().createAttribute(name);
    }
    private Element createElement(String name) {
        return parser.getDocument().createElement(name);
    }
    private Element createElement(String name, String kind) {
        Element element = parser.getDocument().createElement(name);
        element.setAttribute("kind", kind);
        return element;
    }
    private void error(String message) {
        parser.report_error(message);
    }
    private void error(String aMessage, String constructName, int lineNumber, int colNumber) {
        parser.report_error(aMessage, null, " in \"" + constructName
            + "\" construct starting at line " + lineNumber + "." + colNumber + ".");
    }
//    private Document getDocument() {
//        return parser.getDocument();
//    }
    private Element getDocumentElement() {
        return parser.getDocument().getDocumentElement();
    }
    private Element setAttribute(Element element, String name, String value) {
        if ((name != null) && (value != null)) element.setAttribute(name, value);
        return element;
    }
    private Element setName(Element element, String value) {
        if (value != null) element.setAttribute("name", value);
        return element;
    }
    /*--INSERT-ACTION-CODE--*/

  private final CalStatementParser parser;

  /** Constructor */
  CUP$CalStatementParser$actions(CalStatementParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalStatementParser$do_action(
    int                        CUP$CalStatementParser$act_num,
    java_cup.runtime.lr_parser CUP$CalStatementParser$parser,
    java.util.Stack            CUP$CalStatementParser$stack,
    int                        CUP$CalStatementParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalStatementParser$result;

      /* select the action based on the action number */
      switch (CUP$CalStatementParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // var_decl_variables_opt ::= VAR decl_variables 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(127/*var_decl_variables_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // var_decl_variables_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(127/*var_decl_variables_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // semi_opt ::= SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = i; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(154/*semi_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // semi_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(154/*semi_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // multi_opt ::= MULTI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = i; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(153/*multi_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // multi_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(153/*multi_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // label_opt ::= id COLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = i; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(152/*label_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // label_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(152/*label_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // for_each ::= FOREACH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(147/*for_each*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // for_each ::= FOR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(147/*for_each*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // end_while ::= END_WHILE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(146/*end_while*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // end_while ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(146/*end_while*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // end_schedule ::= END_SCHEDULE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(145/*end_schedule*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // end_schedule ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(145/*end_schedule*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // end_procedure ::= END_PROCEDURE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(144/*end_procedure*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // end_procedure ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(144/*end_procedure*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // end_proc ::= END_PROC 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(143/*end_proc*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // end_proc ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(143/*end_proc*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // end_let ::= END_LET 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(142/*end_let*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // end_let ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(142/*end_let*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // end_lambda ::= END_LAMBDA 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(141/*end_lambda*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // end_lambda ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(141/*end_lambda*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // end_invariant ::= END_INVARIANT 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(140/*end_invariant*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // end_invariant ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(140/*end_invariant*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // end_initialize ::= END_INITIALIZE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(139/*end_initialize*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // end_initialize ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(139/*end_initialize*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // end_if ::= END_IF 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(138/*end_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // end_if ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(138/*end_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // end_function ::= END_FUNCTION 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(137/*end_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // end_function ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(137/*end_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // end_foreach ::= END_FOREACH 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(136/*end_foreach*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // end_foreach ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(136/*end_foreach*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // end_choose ::= END_CHOOSE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(135/*end_choose*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // end_choose ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(135/*end_choose*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // end_begin ::= END_BEGIN 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(134/*end_begin*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // end_begin ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(134/*end_begin*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // end_assign ::= END_ASSIGN 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(133/*end_assign*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // end_assign ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(133/*end_assign*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // end_actor ::= END_ACTOR 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(132/*end_actor*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // end_actor ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(132/*end_actor*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // end_action ::= END_ACTION 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(131/*end_action*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // end_action ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(131/*end_action*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // do_statements_opt ::= DO statements 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(130/*do_statements_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // do_statements_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(130/*do_statements_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // do_opt ::= DO 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(129/*do_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // do_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(129/*do_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // const_opt ::= CONST 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = i; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(128/*const_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // const_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(128/*const_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // colon_generators_opt ::= COLON generators 
            {
              Vector RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = g; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(126/*colon_generators_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // colon_generators_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(126/*colon_generators_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // string ::= UnterminatedString 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 error("Unterminated string \"" + c + " ."); RESULT = c; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(151/*string*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // string ::= String 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = c; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(151/*string*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // qid_tail ::= DOT id qid_tail 
            {
              Vector RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		
                t.add(0, i);
                RESULT = t;
            
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(87/*qid_tail*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // qid_tail ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(87/*qid_tail*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // qid ::= Id qid_tail 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		
        Element qid = createElement("QID");
        Element e = createElement("ID");
        setName(e, id);
        appendChild(qid, e);
        for (int i = 0; i < t.size(); i++) {
            e = createElement("ID");
            setName(e, (String)t.get(i));
            appendChild(qid, e);
        }
        RESULT = qid;
     
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(86/*qid*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // id ::= Id 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = id; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(150/*id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // character ::= UnterminatedCharacter 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 error("Unterminated character \'" + c + " ."); RESULT = c; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(149/*character*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // character ::= Character 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = c; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(149/*character*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // any_id ::= WHILE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // any_id ::= VAR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // any_id ::= TRUE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // any_id ::= TO 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // any_id ::= TIME 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // any_id ::= THEN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // any_id ::= SCHEDULE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // any_id ::= REQUIRE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // any_id ::= REPEAT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // any_id ::= PROCEDURE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // any_id ::= PROC 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // any_id ::= PACKAGE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // any_id ::= OR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // any_id ::= OLD 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // any_id ::= NULL 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // any_id ::= NOT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // any_id ::= MUTABLE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // any_id ::= MULTI 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // any_id ::= MOD 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // any_id ::= MAP 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // any_id ::= LAMBDA 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // any_id ::= LET 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // any_id ::= INVARIANT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // any_id ::= INITIALIZE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // any_id ::= IN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // any_id ::= IMPORT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // any_id ::= IF 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // any_id ::= GUARD 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // any_id ::= FUNCTION 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // any_id ::= FOREACH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // any_id ::= FOR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // any_id ::= FALSE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // any_id ::= ENSURE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // any_id ::= END_WHILE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // any_id ::= END_SCHEDULE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // any_id ::= END_PROCEDURE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // any_id ::= END_PROC 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // any_id ::= END_LET 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // any_id ::= END_LAMBDA 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // any_id ::= END_INVARIANT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // any_id ::= END_INITIALIZE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // any_id ::= END_IF 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // any_id ::= END_FUNCTION 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // any_id ::= END_FOREACH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // any_id ::= END_BEGIN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // any_id ::= END_ASSIGN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // any_id ::= END_ACTOR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // any_id ::= END_ACTION 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // any_id ::= END 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // any_id ::= ELSE 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // any_id ::= DOM 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // any_id ::= DO 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // any_id ::= DIV 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // any_id ::= DEFAULT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // any_id ::= CONST 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // any_id ::= BEGIN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // any_id ::= ATN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // any_id ::= AT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // any_id ::= ASSIGN 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // any_id ::= ANY 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // any_id ::= AND 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // any_id ::= ALL 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // any_id ::= ACTOR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // any_id ::= ACTION 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // any_id ::= id 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = id; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(148/*any_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expression_op_name ::= IllegalCharacter 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; /* Never happens, but loses a warning */
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expression_op_name ::= STAR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expression_op_name ::= QMARK 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expression_op_name ::= PLUS 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // expression_op_name ::= GT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expression_op_name ::= LT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expression_op_name ::= HASH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expression_op_name ::= EQUALS 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expression_op_name ::= DASH_DASH_GT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expression_op_name ::= OR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expression_op_name ::= NOT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expression_op_name ::= MOD 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expression_op_name ::= DOTDOT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expression_op_name ::= DOM 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expression_op_name ::= DIV 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expression_op_name ::= AND 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = k; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expression_op_name ::= PartialOp 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = o; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(59/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // unary_expression_op ::= expression_op_name 
            {
              Element RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Op"), op); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(58/*unary_expression_op*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // binary_expression_op ::= expression_op_name 
            {
              Element RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Op"), op); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(57/*binary_expression_op*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // type_unary ::= id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Type" /*, "Unary" */), id); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(125/*type_unary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // type_tuple ::= LPAR entry_tagged_types_opt RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element type = createElement("Type" /*, "Tuple" */);
                appendChildren(type, e);
                RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(124/*type_tuple*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // type_parameter_id ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("TypeParameter"), i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(123/*type_parameter_id*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // type_parameter ::= type_parameter_id LT type_expr 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(i, t); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(122/*type_parameter*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // type_parameter ::= type_parameter_id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = i; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(122/*type_parameter*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // type_parameters_opt ::= LBRACK type_parameters RBRACK 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(121/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // type_parameters_opt ::= LBRACK RBRACK 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(121/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // type_parameters_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(121/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // type_parameters ::= type_parameters COMMA type_parameter 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(120/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // type_parameters ::= type_parameter 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(120/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // type_map ::= id LPAR entry_taggeds_opt RPAR 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element type = createElement("Type" /*, "Map" */);
                setName(type, id);
                RESULT = appendChildren(type, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(119/*type_map*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // type_list ::= id LBRACK entry_types_opt RBRACK 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element type = createElement("Type" /*, "List" */);
                setName(type, id);
                RESULT = appendChildren(type, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(118/*type_list*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // type_function ::= LBRACK entry_types_opt DASH_DASH_GT type_expr RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(appendChildren(createElement("Type", "Function"), e), t); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(117/*type_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // type_function ::= LBRACK entry_types_opt DASH_DASH_GT RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		  RESULT = appendChildren(createElement("Type", "Procedure"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(117/*type_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // type_function ::= LBRACK entry_types_opt RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChildren(createElement("Type", "Procedure" ), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(117/*type_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // type_expr ::= type_unary 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(116/*type_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // type_expr ::= type_map 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(116/*type_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // type_expr ::= type_list 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(116/*type_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // type_expr ::= type_tuple 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(116/*type_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // type_expr ::= type_function 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = type; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(116/*type_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // time_opt ::= TIME type_expr 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = appendChild(createElement("Time"), type); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(115/*time_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // time_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(115/*time_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmt_while ::= WHILE error end_while 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal while statement.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(114/*stmt_while*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmt_while ::= WHILE expression var_decl_variables_opt DO statements_opt end_while 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element body = createElement("Stmt", "Block");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(createElement("Stmt", "While"), i, body); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(114/*stmt_while*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // stmt_if ::= IF expression THEN body ELSE body end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(createElement("Stmt", "If"), i, t, f); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(113/*stmt_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // stmt_if ::= IF expression THEN body end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(createElement("Stmt", "If"), i, t); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(113/*stmt_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // stmt_guarded_head ::= stmt_guarded_head clause_default 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element clause = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = appendChild(statement, clause); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(112/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // stmt_guarded_head ::= stmt_guarded_head clause_guard 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element clause = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = appendChild(statement, clause); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(112/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // stmt_guarded_head ::= ASSIGN expressions TO 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChildren(createElement("Stmt", "Guarded"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(112/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // stmt_guarded ::= ASSIGN error end_assign 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal guarded assignment statement.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(111/*stmt_guarded*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // stmt_guarded ::= stmt_guarded_head end_assign 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = statement; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(111/*stmt_guarded*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // stmt_foreach ::= for_each error end_foreach 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal foreach statement.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(110/*stmt_foreach*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // stmt_foreach ::= generators var_decl_variables_opt DO statements end_foreach 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element statement = createElement("Stmt", "Foreach");
                appendChildren(statement, g);
                Element body = createElement("Stmt", "Block");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(statement, body); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(110/*stmt_foreach*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // stmt_call ::= expr_postfix LPAR expressions_opt RPAR SEMI 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		  Element e = createElement("Stmt", "Call");
                Attr a = c.getAttributeNode("kind");
                if ((a != null) && a.getValue().equals("Tuple") && (c.getChildNodes().getLength() == 1))
                    appendChild(e, c.getFirstChild());            // Lose syntactical parentheses
                else
                    appendChild(e, c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(108/*stmt_call*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // stmt_block ::= BEGIN error end_begin 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal block.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(107/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // stmt_block ::= BEGIN statements end_begin 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element statement = createElement("Stmt", "Block");
                appendChildren(statement, s);
                RESULT = statement; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(107/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // stmt_block ::= BEGIN var_decl_variables_opt DO statements end_begin 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element statement = createElement("Stmt", "Block");
                appendChildren(statement, v);
                appendChildren(statement, s);
                RESULT = statement; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(107/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // stmt_choose ::= CHOOSE error end_choose 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal foreach statement.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(109/*stmt_choose*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // stmt_choose ::= CHOOSE generators var_decl_variables_opt DO statements end_choose 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element statement = createElement("Stmt", "Choose");
                appendChildren(statement, g);
                Element body = createElement("Stmt", "Block");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(statement, body); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(109/*stmt_choose*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // stmt_assign_head ::= expr_postfix DOT id 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = setName(createElement("Expr", "Entry"), id);
                RESULT = appendChild(createElement("Stmt", "Assign"), c, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(106/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // stmt_assign_head ::= expr_postfix LBRACK expressions_opt RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element s = createElement("Stmt", "Assign");
                Element args = appendChildren(createElement("Args"), i);
                Attr name = e.getAttributeNode("name");
                if (name == null) {
                    error("Left-hand side of assignment must be name or indexed name.");
                    RESULT = appendChild(s, e);
                }
                else                               // Preserved functionality
                    RESULT = appendChild(setName(s, name.getValue()), args); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(106/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // stmt_assign_head ::= expr_primary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element s = createElement("Stmt", "Assign");
                Attr name = e.getAttributeNode("name");
                if (name == null) {
                    error("Left-hand side of assignment must be name or indexed name.");
                    RESULT = appendChild(s, e);
                }
                else                                        // Preserved functionality
                    RESULT = setName(s, name.getValue()); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(106/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // stmt_assign ::= stmt_assign_head COLON_EQUALS expression SEMI 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(statement, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(105/*stmt_assign*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // statements_opt ::= statements 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(104/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // statements_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(104/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // statements ::= statements statement 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(103/*statements*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // statements ::= statement 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(103/*statements*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // statement ::= error SEMI 
            {
              Element RESULT = null;
		 error("Illegal statement."); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // statement ::= stmt_foreach 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // statement ::= stmt_while 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // statement ::= stmt_if 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // statement ::= stmt_block 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // statement ::= stmt_guarded 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // statement ::= stmt_choose 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // statement ::= stmt_call 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // statement ::= stmt_assign 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // statement ::= SEMI 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(102/*statement*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // schedule_var_expression ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Selector", "Var"), i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(101/*schedule_var_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // schedule_unary_expression ::= schedule_opt_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(100/*schedule_unary_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // schedule_unary_expression ::= schedule_multiplicity_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(100/*schedule_unary_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // schedule_unary_expression ::= schedule_var_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(100/*schedule_unary_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // schedule_seq_expressions ::= schedule_seq_expressions schedule_unary_expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(e1, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(99/*schedule_seq_expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // schedule_seq_expressions ::= schedule_unary_expression schedule_unary_expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Selector", "Seq"), e1, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(99/*schedule_seq_expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // schedule_seq_expression ::= schedule_seq_expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(98/*schedule_seq_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // schedule_seq_expression ::= schedule_unary_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(98/*schedule_seq_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // schedule_opt_expression ::= LBRACK schedule_expression RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element zero = createElement("Expr", "Literal");
                setAttribute(zero, "literal-kind", "Integer");
                setAttribute(zero, "value", "0");
                Element one = createElement("Expr", "Literal");
                setAttribute(one, "literal-kind", "Integer");
                setAttribute(one, "value", "1");
                RESULT = appendChild(createElement("Selector", "Rep"), e, zero, one); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(97/*schedule_opt_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR HASH LPAR expression COMMA expression RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element min = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element max = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(createElement("Selector", "Rep"), e, min, max); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR HASH LPAR expression RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element min = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChild(createElement("Selector", "Rep"), e, min); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR QMARK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		  Element zero = createElement("Expr", "Literal");
		setAttribute(zero, "literal-kind", "Integer");
		setAttribute(zero, "value", "0");
		Element one = createElement("Expr", "Literal");
		setAttribute(one, "literal-kind", "Integer");
		setAttribute(one, "value", "1");
		RESULT = appendChild(createElement("Selector", "Rep"), e, zero, one); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR STAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		  Element zero = createElement("Expr", "Literal");
		setAttribute(zero, "literal-kind", "Integer");
		setAttribute(zero, "value", "0");
		RESULT = appendChild(createElement("Selector", "Rep"), e, zero); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR PLUS 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		  Element one = createElement("Expr", "Literal");
		setAttribute(one, "literal-kind", "Integer");
		setAttribute(one, "value", "1");
		RESULT = appendChild(createElement("Selector", "Rep"), e, one); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // schedule_multiplicity_expression ::= LPAR schedule_expression RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(96/*schedule_multiplicity_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // schedule_expression ::= schedule_alt_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(95/*schedule_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // schedule_alt_expressions ::= schedule_alt_expressions VBAR schedule_seq_expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(e1, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(94/*schedule_alt_expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // schedule_alt_expressions ::= schedule_seq_expression VBAR schedule_seq_expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Selector", "Alt"), e1, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(94/*schedule_alt_expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // schedule_alt_expression ::= schedule_alt_expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(93/*schedule_alt_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // schedule_alt_expression ::= schedule_seq_expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(93/*schedule_alt_expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // schedule_regexp ::= SCHEDULE error end_schedule 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal schedule.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(92/*schedule_regexp*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // schedule_regexp ::= SCHEDULE REGEXP schedule_expression end_schedule 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(92/*schedule_regexp*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // schedule_fsm ::= SCHEDULE FSM end_schedule 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(91/*schedule_fsm*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // schedule ::= schedule_regexp 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(90/*schedule*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // schedule ::= schedule_fsm 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(90/*schedule*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // requires_opt ::= REQUIRE expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChildren(createElement("Requires"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(89/*requires_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // requires_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(89/*requires_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // repeat_opt ::= REPEAT expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Repeat"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(88/*repeat_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // repeat_opt ::= 
            {
              Element RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(88/*repeat_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // port_outputs_opt ::= port_outputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(85/*port_outputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // port_outputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(85/*port_outputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // port_outputs ::= port_outputs COMMA port_output 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(port); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(84/*port_outputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // port_outputs ::= port_output 
            {
              Vector RESULT = null;
		int portleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(port); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(84/*port_outputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // port_output ::= multi_opt type_expr id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element port = createElement("Port", "Output");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                appendChild(port, t);
                RESULT = port; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(83/*port_output*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // port_output ::= multi_opt id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element port = createElement("Port", "Output");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                RESULT = port; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(83/*port_output*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // port_inputs_opt ::= port_inputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(82/*port_inputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // port_inputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(82/*port_inputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // port_inputs ::= port_inputs COMMA port_input 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(port); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(81/*port_inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // port_inputs ::= port_input 
            {
              Vector RESULT = null;
		int portleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(port); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(81/*port_inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // port_input ::= multi_opt type_expr id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element port = createElement("Port", "Input");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                appendChild(port, t);
                RESULT = port; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(80/*port_input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // port_input ::= multi_opt id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element port = createElement("Port", "Input");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                RESULT = port; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(80/*port_input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // package_name ::= package_name DOT any_id 
            {
              String RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = s1 + s2 + s3; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(79/*package_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // package_name ::= any_id 
            {
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = n; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(79/*package_name*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // package_name_opt ::= PACKAGE error SEMI 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal package declaration.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(78/*package_name_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // package_name_opt ::= PACKAGE package_name SEMI 
            {
              Element RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = setName(createElement("Package"), n); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(78/*package_name_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // package_name_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(78/*package_name_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // outputs_opt ::= outputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(77/*outputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // outputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(77/*outputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // outputs ::= outputs COMMA output 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(76/*outputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // outputs ::= output 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(76/*outputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // output ::= label_opt LBRACK expressions_opt RBRACK repeat_opt channel_opt 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element r = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element output = createElement("Output");
                setAttribute(output, "port", id);
                appendChildren(output, e);
                RESULT = appendChild(output, c, r); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(75/*output*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // mappings ::= mappings COMMA mapping 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(74/*mappings*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // mappings ::= mapping 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(74/*mappings*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // mapping ::= expression DASH_GT expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Mapping"), e1, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(73/*mapping*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // invariants ::= INVARIANT error end_initialize 
            {
              Vector RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal invariant.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(72/*invariants*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // invariants ::= INVARIANT expressions end_invariant 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(72/*invariants*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // inputs_opt ::= inputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(71/*inputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // inputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(71/*inputs_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // inputs ::= inputs COMMA input 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(70/*inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // inputs ::= input 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(70/*inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // input_body ::= LBRACK decl_inputs RBRACK 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = appendChildren(createElement("Input", "Elements"), d); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(69/*input_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // input_body ::= LBRACK RBRACK 
            {
              Element RESULT = null;
		  RESULT = createElement("Input", "Elements"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(69/*input_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // input_body ::= decl_input 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = appendChild(createElement("Input", "Sequence"), d); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(69/*input_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // input ::= id COLON input_body repeat_opt channel_opt 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int inputleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element input = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element r = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  setAttribute(input, "port", id);
                RESULT = appendChild(input, c, r); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(68/*input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // input ::= input_body repeat_opt channel_opt 
            {
              Element RESULT = null;
		int inputleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int inputright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element input = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element r = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = appendChild(input, c, r); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(68/*input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // initializer ::= INITIALIZE end_initialize 
            {
              Element RESULT = null;
		  RESULT = createElement("Initializer"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(67/*initializer*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // initializer ::= INITIALIZE do_opt statements end_initialize 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		   RESULT = appendChildren(createElement("Initializer"), s); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(67/*initializer*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // initializer ::= INITIALIZE guards_opt VAR decl_variables do_statements_opt end_initialize 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element g = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element action = createElement("Initializer");
                appendChild(action, g);
                appendChildren(action, v);
                appendChildren(action, s);
                RESULT = action; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(67/*initializer*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // initializer ::= INITIALIZE EQUALS_EQUALS_GT outputs_opt guards_opt var_decl_variables_opt do_statements_opt end_initialize 
            {
              Element RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element g = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element action = createElement("Initializer");
                appendChildren(action, o);
                appendChild(action, g);
                appendChildren(action, v);
                appendChildren(action, s);
                RESULT = action; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(67/*initializer*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // import_ ::= IMPORT error SEMI 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal import declaration.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(66/*import_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // import_ ::= IMPORT qid EQUALS id SEMI 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "single");
                setAttribute(element, "alias", name);
                RESULT = appendChild(element, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(66/*import_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // import_ ::= IMPORT qid SEMI 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "single");
                RESULT = appendChild(element, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(66/*import_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // import_ ::= IMPORT ALL qid SEMI 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "package");
                RESULT = appendChild(element, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(66/*import_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // imports_opt ::= imports 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(65/*imports_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // imports_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(65/*imports_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // imports ::= imports import_ 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(64/*imports*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // imports ::= import_ 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(64/*imports*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // guards_opt ::= GUARD expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChildren(createElement("Guards"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(63/*guards_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // guards_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(63/*guards_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // generator_in_opt ::= IN expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(62/*generator_in_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // generator_in_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(62/*generator_in_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // generators ::= generators COMMA generator 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(60/*generators*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // generators ::= generators COMMA expression 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element generator = (Element)list.get(list.size()-1);
                NodeList filtList = generator.getElementsByTagName("Filters");
                if ((filtList == null) || (filtList.getLength() <= 0))
                    appendChild(generator, appendChild(createElement("Filters"), e));
                else
                    appendChild((Element)filtList.item(filtList.getLength()-1), e);
                RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(60/*generators*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // generators ::= generator 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(60/*generators*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // generator ::= for_each type_expr decl_generators generator_in_opt 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element element = createElement("Generator");
                appendChild(element, type);
                appendChildren(element, g);
                RESULT = appendChild(element, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(61/*generator*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // generator ::= for_each decl_generators generator_in_opt 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element element = createElement("Generator");
                appendChildren(element, g);
                RESULT = appendChild(element, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(61/*generator*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_var ::= OLD id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = createElement("Expr", "Var");
                setName(e, id);
                RESULT = setAttribute(e, "old", "Yes"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(53/*expr_var*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_var ::= id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Expr", "Var"), id); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(53/*expr_var*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr_unary ::= unary_expression_op expr_postfix 
            {
              Element RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Expr", "UnaryOp"), o, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(52/*expr_unary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr_unary ::= expr_postfix 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(52/*expr_unary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr_tuple_tagged_head ::= expr_tuple_tagged_head COMMA entry_tagged_expr 
            {
              Element RESULT = null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element tuple = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(tuple, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(51/*expr_tuple_tagged_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr_tuple_tagged_head ::= LPAR entry_tagged_expr 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Expr", "TaggedTuple"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(51/*expr_tuple_tagged_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr_tuple ::= expr_tuple_tagged_head RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(50/*expr_tuple*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr_tuple ::= LPAR RPAR 
            {
              Element RESULT = null;
		  RESULT = createElement("Expr", "TaggedTuple"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(50/*expr_tuple*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr_set ::= LBRACE expressions colon_generators_opt RBRACE 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector m = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = createElement("Expr", "Set");
                appendChildren(e, m);
                appendChildren(e, g);
                RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(49/*expr_set*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr_set ::= LBRACE RBRACE 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "Set"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(49/*expr_set*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr_proc ::= PROC error end_procedure 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal proc expression.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(48/*expr_proc*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr_proc ::= PROC LPAR decl_parameters_opt RPAR var_decl_variables_opt BEGIN statements end_proc 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = createElement("Expr", "Proc");
                appendChildren(e, d);
                appendChildren(e, v);
                appendChildren(e, s);
                RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(48/*expr_proc*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_primary ::= LPAR expression RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_primary ::= expr_map 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_primary ::= expr_set 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_primary ::= expr_list 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr_primary ::= expr_tuple 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr_primary ::= expr_let 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_primary ::= expr_proc 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_primary ::= expr_lambda 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_primary ::= expr_if 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_primary ::= expr_literal 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_primary ::= expr_var 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(47/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_postfix ::= expr_postfix DOT id 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(setName(createElement("Expr", "Entry"), id), c); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(46/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_postfix ::= expr_postfix LBRACK expressions_opt RBRACK 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = appendChild(createElement("Expr", "Indexer"), c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(46/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_postfix ::= expr_postfix LPAR expressions_opt RPAR 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = appendChild(createElement("Expr", "Application"), c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(46/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_postfix ::= expr_primary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(46/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_map ::= MAP LBRACE mappings colon_generators_opt RBRACE 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector m = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = appendChildren(appendChildren(createElement("Expr", "Map"), m), g); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(45/*expr_map*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_map ::= MAP LBRACE RBRACE 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "Map"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(45/*expr_map*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_literal ::= TRUE 
            {
              Element RESULT = null;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Boolean");
                RESULT = setAttribute(e, "value", "1"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_literal ::= string 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "String");
                RESULT = setAttribute(e, "value", v); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_literal ::= Real 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Real");
                RESULT = setAttribute(e, "value", v); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_literal ::= NULL 
            {
              Element RESULT = null;
		  RESULT = setAttribute(createElement("Expr", "Literal"), "literal-kind", "Null"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_literal ::= Integer 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Integer");
                RESULT = setAttribute(e, "value", v); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_literal ::= FALSE 
            {
              Element RESULT = null;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Boolean");
                RESULT = setAttribute(e, "value", "0"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_literal ::= character 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Character");
                RESULT = setAttribute(e, "value", v); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(44/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_list_tail_opt ::= VBAR expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Tail"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(43/*expr_list_tail_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_list_tail_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(43/*expr_list_tail_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_list ::= LBRACK expressions colon_generators_opt expr_list_tail_opt RBRACK 
            {
              Element RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = createElement("Expr", "List");
                appendChildren(e, l);
                appendChildren(e, g);
                RESULT = appendChild(e, t); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(42/*expr_list*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_list ::= LBRACK RBRACK 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "List"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(42/*expr_list*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_let ::= LET error end_let 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal let expression.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(41/*expr_let*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_let ::= LET decl_variables COLON expression end_let 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = createElement("Expr", "Let");
                appendChildren(e, v);
                RESULT = appendChild(e, b); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(41/*expr_let*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_lambda ::= const_opt LAMBDA LPAR decl_parameters_opt RPAR function_ret_type_opt var_decl_variables_opt COLON expression end_lambda 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element e = createElement("Expr", "Lambda");
                if (c != null) setAttribute(e, "const", "Yes");
                appendChildren(e, d);
                appendChild(e, t);
                appendChildren(e, v);
                RESULT = appendChild(e, b); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(40/*expr_lambda*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_if ::= IF error end_if 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal if expression.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(39/*expr_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_if ::= IF expression THEN expression ELSE expression end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = appendChild(createElement("Expr", "If"), i, t, f); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(39/*expr_if*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_binary ::= expr_binary binary_expression_op expr_unary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(e, o, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(38/*expr_binary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_binary ::= expr_unary binary_expression_op expr_unary 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Expr", "BinOpSeq"), e1, o, e2); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(38/*expr_binary*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expressions_opt ::= expressions 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(56/*expressions_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expressions_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(56/*expressions_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expressions ::= expressions COMMA expression 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(55/*expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expressions ::= expression 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(55/*expressions*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expr_binary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(54/*expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expr_unary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = e; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(54/*expression*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // entry_types_opt ::= entry_types 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(37/*entry_types_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // entry_types_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(37/*entry_types_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // entry_types ::= entry_types COMMA entry_type 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(36/*entry_types*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // entry_types ::= entry_type 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(36/*entry_types*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // entry_type ::= type_expr 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Entry", "Type"), type); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(35/*entry_type*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // entry_tagged_types_opt ::= entry_tagged_types 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(34/*entry_tagged_types_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // entry_tagged_types_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(34/*entry_tagged_types_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // entry_tagged_types ::= entry_tagged_types COMMA entry_tagged_type 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(33/*entry_tagged_types*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // entry_tagged_types ::= entry_tagged_type 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(33/*entry_tagged_types*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // entry_tagged_type ::= id COLON type_expr 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element element = createElement("Entry", "Type");
                setName(element, id);
                RESULT = appendChild(element, type); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(32/*entry_tagged_type*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // entry_tagged_expr ::= id COLON expression 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element option = createElement("Entry", "Expr");
                setName(option, id);
                RESULT = appendChild(option, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(31/*entry_tagged_expr*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // entry_taggeds_opt ::= entry_taggeds 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(30/*entry_taggeds_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // entry_taggeds_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(30/*entry_taggeds_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // entry_taggeds ::= entry_taggeds COMMA entry_tagged 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(29/*entry_taggeds*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // entry_taggeds ::= entry_tagged 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(29/*entry_taggeds*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // entry_tagged ::= id EQUALS expression 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element option = createElement("Entry", "Expr");
                setName(option, id);
                RESULT = appendChild(option, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(28/*entry_tagged*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // entry_tagged ::= id COLON type_expr 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element option = createElement("Entry", "Type");
                setName(option, id);
                RESULT = appendChild(option, type); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(28/*entry_tagged*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ensures_opt ::= ENSURE expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChildren(createElement("Ensures"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(27/*ensures_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ensures_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(27/*ensures_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // delay_opt ::= DELAY expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Delay"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(22/*delay_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // delay_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(22/*delay_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decl_variable_state_head ::= type_expr id 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element decl = createElement("Decl" , "Variable");
                setName(decl, i);
                RESULT = appendChild(decl, t); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(26/*decl_variable_state_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decl_variable_state_head ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element decl = createElement("Decl" , "Variable");
                setName(decl, i);
                RESULT = decl; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(26/*decl_variable_state_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decl_variable_state ::= MUTABLE decl_variable_state_head EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 setAttribute(d, "mutable", "Yes"); RESULT = appendChild(d, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(25/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decl_variable_state ::= decl_variable_state_head EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(d, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(25/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decl_variable_state ::= decl_variable_state_head COLON_EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 setAttribute(d, "assignable", "Yes"); RESULT = appendChild(d, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(25/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // decl_variable_state ::= decl_variable_state_head 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 setAttribute(d, "assignable", "Yes"); RESULT = d; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(25/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decl_variable_procedure ::= PROCEDURE error end_procedure 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal procedure declaration.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(24/*decl_variable_procedure*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decl_variable_procedure ::= PROCEDURE id LPAR decl_parameters_opt RPAR var_decl_variables_opt BEGIN statements end_procedure 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element decl = createElement("Decl" , "Variable");
                Element type = createElement("Type", "Procedure" );
                Element proc = createElement("Expr", "Proc");
                appendChild(decl, type, proc);
                setName(decl, id);
                if (p != null) {
                    appendChildren(proc, p);
             /*       for (Iterator pi = p.iterator(); pi.hasNext(); ) {
                        Element aParameter = (Element)pi.next();
                        NodeList type_list = aParameter.getElementsByTagName("Type");
                        int typeCount = type_list.getLength();
                        for (int i = 0; i < typeCount; i++) {
                            Element typeNode = (Element)type_list.item(i);
                            Element entry = createElement("Entry", "Type");
                            appendChild(entry, typeNode.cloneNode(true));
                            appendChild(type, entry);
                        }
                    } */
                }
                setAttribute(type, "infer", "true");
                appendChildren(proc, v);
                appendChildren(proc, s);
                RESULT = decl; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(24/*decl_variable_procedure*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_ret_type_opt ::= DASH_DASH_GT type_expr 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = t; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(23/*function_ret_type_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_ret_type_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(23/*function_ret_type_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decl_variable_function ::= FUNCTION error end_function 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal function declaration.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(21/*decl_variable_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decl_variable_function ::= FUNCTION id LPAR decl_parameters_opt RPAR function_ret_type_opt var_decl_variables_opt COLON expression end_function 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element decl = createElement("Decl" , "Variable");
                Element type = createElement("Type", "Function");
                Element lambda = createElement("Expr", "Lambda");
                appendChild(decl, type, lambda);
                setName(decl, id);
                if (p != null) {
                    appendChildren(lambda, p);
          /*          for (Iterator pi = p.iterator(); pi.hasNext(); ) {
                        Element aParameter = (Element)pi.next();
                        NodeList type_list = aParameter.getElementsByTagName("Type");
                        int typeCount = type_list.getLength();
                        for (int i = 0; i < typeCount; i++) {
                            Element typeNode = (Element)type_list.item(i);
                            Element entry = createElement("Entry", "Type");
                            appendChild(entry, typeNode.cloneNode(true));
                            appendChild(type, entry);
                        }
                    }   */
                }
                appendChild(lambda, t);  // may be null, then nothing happens.
           //     appendChild(type, (t == null) ? null : t.cloneNode(true));
                setAttribute(type, "infer", "true");
                appendChildren(lambda, v);
                appendChild(lambda, e);
                RESULT = decl; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(21/*decl_variable_function*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decl_variables ::= decl_variables COMMA decl_variable 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(19/*decl_variables*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decl_variables ::= decl_variable 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(19/*decl_variables*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decl_variable ::= decl_variable_procedure 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = d; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(20/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decl_variable ::= decl_variable_function 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = d; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(20/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decl_variable ::= decl_variable_state 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = d; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(20/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decl_parameter_head ::= type_expr id 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element p = createElement("Decl", "Parameter");
                setName(p, i);
                appendChild(p, t);
                RESULT = p; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(18/*decl_parameter_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_parameter_head ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Element p = createElement("Decl", "Parameter");
                setName(p, i);
                RESULT = p; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(18/*decl_parameter_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl_parameter ::= decl_parameter_head EQUALS expression 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(p, e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(17/*decl_parameter*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl_parameter ::= decl_parameter_head 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = p; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(17/*decl_parameter*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl_parameters_opt ::= decl_parameters 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(16/*decl_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decl_parameters_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(16/*decl_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decl_parameters ::= decl_parameters COMMA decl_parameter 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(15/*decl_parameters*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decl_parameters ::= decl_parameter 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(15/*decl_parameters*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decl_inputs ::= decl_inputs COMMA decl_input 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(14/*decl_inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decl_inputs ::= decl_input 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(14/*decl_inputs*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decl_input ::= UNDER_SCORE 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Input"), i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(13/*decl_input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl_input ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Input"), i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(13/*decl_input*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decl_generator ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Generator"), i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(12/*decl_generator*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl_generators ::= decl_generators COMMA decl_generator 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(11/*decl_generators*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl_generators ::= decl_generator 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(11/*decl_generators*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // clause_guard ::= decl_parameters DO body_opt END 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element clause = createElement("Clause", "Guard");
                appendChildren(clause, p);
                appendChild(clause, b);
                RESULT = clause; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(10/*clause_guard*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // clause_guard ::= decl_parameters END 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = appendChildren(createElement("Clause", "Guard"), p); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(10/*clause_guard*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // clause_default ::= DEFAULT do_opt body_opt END 
            {
              Element RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = appendChild(createElement("Clause", "Default"), b); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(9/*clause_default*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // channel_opt ::= AT expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Channel", "Single"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // channel_opt ::= ALL 
            {
              Element RESULT = null;
		 RESULT = createElement("Channel", "All"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // channel_opt ::= ANY 
            {
              Element RESULT = null;
		 RESULT = createElement("Channel", "Any"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // channel_opt ::= ATN expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(createElement("Channel", "Multi"), e); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // channel_opt ::= ATN ALL 
            {
              Element RESULT = null;
		 RESULT = createElement("Channel", "All"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // channel_opt ::= ATN ANY 
            {
              Element RESULT = null;
		 RESULT = createElement("Channel", "Any"); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // channel_opt ::= 
            {
              Element RESULT = null;
		  RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(8/*channel_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // body_opt ::= body 
            {
              Element RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element list = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = list; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // body_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body ::= statements 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChildren(createElement("Stmt", "Block"), s); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(6/*body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_ ::= label_opt ACTION error end_action 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal action.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(5/*action_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // action_ ::= label_opt ACTION inputs_opt EQUALS_EQUALS_GT outputs_opt guards_opt delay_opt requires_opt ensures_opt var_decl_variables_opt do_statements_opt end_action 
            {
              Element RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-7)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).right;
		Element g = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left;
		int delright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).right;
		Element del = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Element r = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element action = createElement("Action");
                setName(action, l);
                appendChildren(action, i);
                appendChildren(action, o);
                appendChild(action, g);
                appendChild(action, del);
                appendChild(action, r);
                appendChild(action, e);
                appendChildren(action, v);
                appendChildren(action, s);
                RESULT = action; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(5/*action_*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // caltrop_head ::= package_name_opt imports_opt ACTOR id type_parameters_opt LPAR decl_parameters_opt RPAR port_inputs_opt EQUALS_EQUALS_GT port_outputs_opt time_opt COLON 
            {
              Element RESULT = null;
		int package_nameleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-12)).left;
		int package_nameright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-12)).right;
		Element package_name = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-12)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).right;
		Vector imports = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-9)).value;
		int type_parametersleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).left;
		int type_parametersright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).right;
		Vector type_parameters = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-8)).value;
		int decl_parametersleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).left;
		int decl_parametersright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).right;
		Vector decl_parameters = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-6)).value;
		int port_inputsleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).left;
		int port_inputsright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).right;
		Vector port_inputs = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-4)).value;
		int port_outputsleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int port_outputsright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Vector port_outputs = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element time = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		  Element actor = getDocumentElement();
                setName(actor, i);
                appendChild(actor, package_name);
                appendChildren(actor, imports);
                appendChildren(actor, type_parameters);
                appendChildren(actor, decl_parameters);
                appendChildren(actor, port_inputs);
                appendChildren(actor, port_outputs);
                appendChild(actor, time);
                RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(4/*caltrop_head*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // caltrop_body_end ::= END_SCHEDULE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // caltrop_body_end ::= END_PROCEDURE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // caltrop_body_end ::= END_INVARIANT 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // caltrop_body_end ::= END_INITIALIZE 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // caltrop_body_end ::= END_FUNCTION 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // caltrop_body_end ::= END_ACTION 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // caltrop_body_end ::= END 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // caltrop_body_end ::= SEMI 
            {
              Object RESULT = null;

              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(3/*caltrop_body_end*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // caltrop_body ::= caltrop_body error caltrop_body_end 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 error("Illegal actor content."); RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // caltrop_body ::= caltrop_body schedule 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(actor, s); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // caltrop_body ::= caltrop_body action_ 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(actor, a); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // caltrop_body ::= caltrop_body invariants 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		  NodeList invList = actor.getElementsByTagName("Invariants");
                if ((invList == null) || (invList.getLength() <= 0))
                    appendChild(actor, appendChildren(createElement("Invariants"), i));
                else
                    appendChildren((Element)invList.item(invList.getLength()-1), i);
                RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // caltrop_body ::= caltrop_body initializer 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(actor, i); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // caltrop_body ::= caltrop_body decl_variable_procedure 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(actor, d); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // caltrop_body ::= caltrop_body decl_variable_function 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = appendChild(actor, d); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // caltrop_body ::= caltrop_body decl_variable_state SEMI 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = appendChild(actor, d); 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // caltrop_body ::= caltrop_body SEMI 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		 RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // caltrop_body ::= caltrop_head 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).value;
		 RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(2/*caltrop_body*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // caltrop ::= package_name_opt imports_opt ACTOR error end_actor semi_opt 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-3)).value;
		 error("Illegal actor.", k, kleft, kright); RESULT = null; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(1/*caltrop*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // caltrop ::= caltrop_body end_actor semi_opt 
            {
              Element RESULT = null;
		int actorleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left;
		int actorright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).right;
		Element actor = (Element)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).value;
		 RESULT = actor; 
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(1/*caltrop*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          return CUP$CalStatementParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements_opt EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).right;
		Vector start_val = (Vector)((java_cup.runtime.Symbol) CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).value;
		RESULT = start_val;
              CUP$CalStatementParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CalStatementParser$stack.elementAt(CUP$CalStatementParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CalStatementParser$parser.done_parsing();
          return CUP$CalStatementParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

