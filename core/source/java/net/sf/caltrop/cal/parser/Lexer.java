/* The following code was generated by JFlex 1.4_pre1 on 6/19/07 1:42 PM */

/* Caltrop lexer

 Copyright (c) 2002 The Regents of the University of California.
 Copyright (c) 2007 Xilinx Inc.
 All rights reserved.
 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the above
 copyright notice and the following two paragraphs appear in all copies
 of this software.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.

                                        PT_COPYRIGHT_VERSION_2
                                        COPYRIGHTENDKEY

@ProposedRating Red (Ed.Willink@uk.thalesgroup.com)
@AcceptedRating Red

EDW September 2002 Original 
EDW 18-Sep-2002 Lex # token too..

*/
package net.sf.caltrop.cal.parser;

import java_cup.runtime.Symbol;
import java.lang.Integer;
import java.lang.String;

/**
Lexing class for Caltrop.
<p>
This JFlex lexer supports the CUP Parser via the java_cup.runtime.Scanner interface.
<p>
{Build as "java -jar ../../lib/jflex.jar Caltrop.lex").

@author Ed Willink
@version $Id: Caltrop.lex 57 2007-01-26 06:44:42Z jornj $
*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre1
 * on 6/19/07 1:42 PM from the specification file
 * <tt>file:/C:/JWJ/svnreps/caltrop/core/source/java/net/sf/caltrop/cal/parser/Caltrop.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\77\1\2\1\0\1\77\1\23\22\0\1\77\1\26\1\24"+
    "\1\63\1\27\2\26\1\22\1\66\1\73\1\3\1\12\1\60\1\61"+
    "\1\13\1\1\1\5\3\21\4\10\2\4\1\56\1\74\1\67\1\57"+
    "\1\62\1\70\1\26\3\7\1\14\1\11\1\14\21\25\1\6\2\25"+
    "\1\65\1\15\1\72\1\26\1\75\1\0\1\30\1\17\1\31\1\37"+
    "\1\43\1\20\1\42\1\44\1\33\1\25\1\53\1\36\1\47\1\35"+
    "\1\34\1\51\1\55\1\16\1\41\1\32\1\45\1\46\1\52\1\54"+
    "\1\40\1\50\1\64\1\76\1\71\1\26\101\0\5\25\1\27\20\25"+
    "\1\27\1\0\1\27\14\25\1\27\20\25\1\27\1\0\1\27\7\25"+
    "\u0560\25\12\25\206\25\12\25\u026c\25\12\25\166\25\12\25\166\25\12\25"+
    "\166\25\12\25\166\25\12\25\167\25\11\25\166\25\12\25\166\25\12\25"+
    "\166\25\12\25\340\25\12\25\166\25\12\25\u0166\25\12\25\u0fb6\25\u1040\0"+
    "\u0150\25\u0170\0\200\25\200\0\u092e\25\u10d2\0\u5200\25\u5900\0\u0200\25\u0500\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    64,   128,   192,   256,   320,   384,   448,   256,   512, 
      576,   640,   704,   768,   832,   896,   256,   960,  1024,  1088, 
     1152,  1216,  1280,  1344,  1408,  1472,  1536,  1600,  1664,  1728, 
     1792,  1856,  1920,  1984,  2048,    64,  2112,   256,   256,    64, 
       64,    64,   256,   256,    64,    64,    64,    64,   448,   256, 
     2176,  2240,  2304,  2368,    64,  2432,  2496,  2560,    64,   576, 
     2624,  2688,  2752,  2816,  2880,  2944,  3008,  3072,  3136,   896, 
       64,  3200,    64,  3264,  3328,  3392,  3456,  3520,  3584,  3648, 
     3712,  3776,   448,  3840,   448,  3904,  3968,   448,  4032,  4096, 
     4160,  4224,  4288,  4352,  4416,  4480,  4544,  4608,  4672,  4736, 
     4800,  4864,  4928,  4992,  5056,  5120,  5184,    64,  5248,  5312, 
      256,  5376,    64,  5440,  5504,  5568,  5632,  2560,  5696,  5760, 
     5824,  5888,  5952,  6016,   448,  6080,    64,    64,  6144,  6208, 
     6272,    64,   448,   448,   448,  6336,  6400,  6464,  6528,  6592, 
     6656,  6720,  6784,  6848,   448,   448,  6912,  6976,   448,   448, 
      448,  7040,  7104,  7168,  7232,  7296,  7360,  7424,   448,   448, 
      448,  7488,  7552,  7616,  7680,  7744,  7808,   256,   256,  7872, 
      256,  7936,  8000,  8064,  8128,  8192,  8256,  8320,  8384,  8448, 
     8512,  8576,  8640,   448,   448,   448,  8704,  8768,  8832,   448, 
     8896,  8960,  9024,  9088,  9152,  9216,  9280,  9344,  9408,  9472, 
     9536,  9600,  9664,  9728,  9792,   448,  9856,  9920,  9984, 10048, 
    10112, 10176,    64, 10240, 10304, 10368,   448,   448, 10432, 10496, 
    10560,   448, 10624,   448, 10688, 10752, 10816, 10880, 10944, 11008, 
      448, 11072,   448, 11136, 11200, 11264, 11328, 11392, 11456,   448, 
    11520, 11584, 11648, 11712, 11776, 11840, 11904, 11968,   448, 12032, 
    12096, 12160,   448,   448,   448, 12224, 12288, 12352,   448,   448, 
      448, 12416, 12480,   448,   448, 12544, 12608, 12672, 12736, 12800, 
    12864, 12928, 12992, 13056, 13120, 13184,   448, 13248, 13312, 13376, 
    13440,   448, 13504, 13568, 13632, 13696,   448,   448, 13760, 13824, 
    13888,   448, 13952, 14016, 14080, 14144, 14208, 14272, 14336, 14400, 
    14464, 14528, 14592, 14656, 14720, 14784, 14848,   448, 14912, 14976, 
      448,   448, 15040, 15104,   448,   448, 15168, 15232, 15296,   448, 
    15360, 15424, 15488, 15552, 15616, 15680, 15744, 15808,   448,   448, 
    15872, 15936,   448, 16000, 16064,   448,   448,   448, 16128, 16192, 
      448, 16256, 16320, 16384,   448,   448,   448, 16448, 16512, 16576, 
    16640, 16704, 16768,   448, 16832, 16896,   448,   448, 16960, 17024, 
      448,   448,   448
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\6"+
    "\1\10\1\11\1\12\1\10\1\13\1\14\1\15\1\16"+
    "\1\6\1\17\1\4\1\20\1\10\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\1\34\1\35\2\10\1\36\1\37\1\10\1\40"+
    "\1\41\3\10\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\4\101\0\1\63\1\0\1\64"+
    "\6\0\1\21\13\0\2\21\27\0\1\21\1\0\3\21"+
    "\3\0\2\21\5\0\1\21\3\0\1\4\20\0\1\4"+
    "\53\0\1\4\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\13\0\2\21\27\0\1\21\1\0\3\21\3\0\2\21"+
    "\5\0\1\21\5\0\2\6\2\0\1\6\1\65\1\0"+
    "\1\66\1\67\3\0\1\67\1\6\15\0\1\67\3\0"+
    "\1\65\40\0\1\70\1\71\1\72\1\0\1\71\1\65"+
    "\1\0\1\66\1\67\3\0\1\67\1\71\15\0\1\67"+
    "\3\0\1\65\10\0\1\72\27\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\27\10\17\0\1\10"+
    "\6\0\2\66\2\0\1\66\2\0\1\73\5\0\1\66"+
    "\56\0\2\74\1\0\12\74\1\75\5\74\2\0\53\74"+
    "\4\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\76\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\77\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\1\10\1\100\3\10"+
    "\1\101\4\10\1\102\3\10\1\103\10\10\17\0\1\10"+
    "\2\0\2\104\1\0\12\104\1\105\4\104\2\0\54\104"+
    "\2\106\1\107\12\106\1\110\5\106\1\107\1\111\53\106"+
    "\1\0\1\21\1\0\1\21\6\10\1\21\1\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\21\1\22\26\10\1\0"+
    "\1\21\1\0\3\21\3\0\2\21\4\0\1\10\1\21"+
    "\5\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\2\10\1\112\1\113\2\10\1\114\1\115\2\10"+
    "\1\116\14\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\5\10\1\117\7\10"+
    "\1\120\11\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\1\121\3\10\3\0\1\10\1\0\4\10\1\122"+
    "\1\123\7\10\1\124\11\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\2\10\1\125\1\10\3\0\1\10"+
    "\1\0\6\10\1\126\11\10\1\127\6\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\1\130\3\10\3\0"+
    "\1\10\1\0\7\10\1\131\17\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\5\10\1\132\10\10\1\133\10\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\1\10\1\134\12\10\1\135\12\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\4\10\1\136\1\137\6\10\1\140\12\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\2\10\1\141\24\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\16\10"+
    "\1\142\10\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\6\10\1\143\1\144"+
    "\17\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\1\10\1\145\25\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\1\10\1\146\3\10\1\147\10\10\1\150"+
    "\10\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\1\151\3\10\3\0\1\10\1\0\1\10\1\152\25\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\15\10\1\153\11\10\17\0\1\10"+
    "\61\0\1\154\21\0\1\21\1\0\1\21\6\0\1\21"+
    "\13\0\2\21\27\0\1\155\1\0\3\21\3\0\2\21"+
    "\5\0\1\21\2\0\1\21\1\0\1\21\6\0\1\21"+
    "\13\0\2\21\27\0\1\21\1\0\1\156\1\157\1\21"+
    "\3\0\2\21\5\0\1\21\1\0\1\160\1\63\1\161"+
    "\1\63\6\160\1\63\13\160\2\63\27\160\1\63\1\160"+
    "\3\63\3\160\2\63\5\160\1\63\1\160\1\162\1\64"+
    "\1\162\1\163\6\162\1\64\13\162\2\64\27\162\1\64"+
    "\1\162\3\64\3\162\2\64\5\162\1\64\1\162\4\0"+
    "\2\164\2\0\1\164\1\0\1\165\6\0\1\164\37\0"+
    "\1\165\22\0\2\66\2\0\1\66\1\65\2\0\1\67"+
    "\3\0\1\67\1\66\15\0\1\67\3\0\1\65\40\0"+
    "\2\70\2\0\1\70\1\65\1\0\1\66\1\67\3\0"+
    "\1\67\1\70\15\0\1\67\3\0\1\65\40\0\1\70"+
    "\1\71\2\0\1\71\1\65\1\0\1\66\1\67\3\0"+
    "\1\67\1\71\15\0\1\67\3\0\1\65\40\0\2\166"+
    "\1\0\3\166\2\0\1\166\2\0\3\166\6\0\2\166"+
    "\5\0\1\166\3\0\1\166\41\0\1\74\2\0\1\74"+
    "\4\0\6\74\1\0\1\74\5\0\1\74\2\0\1\74"+
    "\46\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\13\10\1\167\6\10\1\170\3\10\1\171\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\13\10\1\172\13\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\7\10\1\173\17\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\1\174\3\10\3\0\1\10\1\0\27\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\20\10\1\175\6\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\6\10\1\176\20\10\17\0\1\10\4\0\1\177"+
    "\17\0\1\200\1\177\61\0\1\201\2\0\1\202\4\0"+
    "\4\104\1\201\1\104\1\0\1\104\5\0\1\104\2\0"+
    "\1\104\47\0\1\106\2\0\1\106\4\0\6\106\1\0"+
    "\1\106\5\0\1\106\2\0\1\106\46\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\3\10\1\203"+
    "\23\10\17\0\1\10\5\0\1\204\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\27\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\10\10\1\205\1\206\15\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\7\10\1\207\17\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\12\10\1\210"+
    "\14\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\6\10\1\211\20\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\5\10\1\212\21\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\16\10\1\213\10\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\20\10\1\214"+
    "\6\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\14\10\1\215\12\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\216\12\10\1\217\7\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\22\10\1\220\4\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\10\10\1\221\16\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\3\10\1\222"+
    "\23\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\7\10\1\223\17\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\20\10\1\224\6\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\3\10\1\225\23\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\17\10\1\226"+
    "\7\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\20\10\1\227\6\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\2\10\1\230"+
    "\1\10\3\0\1\10\1\0\7\10\1\231\17\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\15\10\1\232\11\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\1\10\1\233\25\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\10\10\1\234"+
    "\1\10\1\235\14\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\12\10\1\236"+
    "\14\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\1\237\3\10\3\0\1\10\1\0\27\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\22\10\1\240\4\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\10\10"+
    "\1\241\16\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\3\10\1\242\3\10"+
    "\1\243\17\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\244\1\245"+
    "\21\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\2\10\1\246\24\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\247\22\10\17\0\1\10\3\0"+
    "\1\21\1\0\1\21\6\0\1\21\13\0\2\21\27\0"+
    "\1\21\1\0\1\21\1\250\1\21\3\0\2\21\5\0"+
    "\1\21\2\0\1\21\1\0\1\21\6\0\1\21\13\0"+
    "\2\21\27\0\1\21\1\0\1\21\1\251\1\21\3\0"+
    "\2\21\5\0\1\21\1\0\2\160\1\161\75\160\3\162"+
    "\1\252\75\162\1\253\1\162\1\64\6\162\1\64\13\162"+
    "\2\64\27\162\1\64\1\162\3\64\3\162\2\64\5\162"+
    "\1\64\1\162\4\0\2\164\2\0\1\164\3\0\1\67"+
    "\3\0\1\67\1\164\15\0\1\67\44\0\2\164\2\0"+
    "\1\164\10\0\1\164\62\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\14\10\1\254\12\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\14\10\1\255\12\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\16\10\1\256\10\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\4\10\1\257"+
    "\22\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\12\10\1\260\14\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\14\10\1\261\12\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\2\10\1\262\24\10\17\0\1\10\4\0\1\177\2\0"+
    "\1\202\2\0\1\202\10\0\1\202\1\200\1\177\56\0"+
    "\1\177\2\0\1\104\2\0\1\104\10\0\1\104\1\200"+
    "\1\177\60\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\263\1\264\21\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\4\10\1\265\22\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\12\10"+
    "\1\266\14\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\5\10\1\267\21\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\14\10\1\270\12\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\271\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\6\10"+
    "\1\272\20\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\3\10\1\273\23\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\1\10\1\274\25\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\5\10\1\275\21\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\7\10"+
    "\1\276\17\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\1\10\1\277\2\10\3\0\1\10\1\0\27\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\1\10\1\300\25\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\1\10\1\301\25\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\302\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\1\303\3\10\3\0\1\10\1\0\27\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\1\10\1\304"+
    "\1\305\1\10\3\0\1\10\1\0\1\10\1\306\1\307"+
    "\1\10\1\310\2\10\1\311\2\10\1\312\7\10\1\313"+
    "\1\314\3\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\16\10\1\315\10\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\14\10\1\316\12\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\1\10\1\317\25\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\3\10"+
    "\1\320\23\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\5\10\1\321\21\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\2\10\1\322\24\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\24\10\1\323\2\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\7\10"+
    "\1\324\17\10\17\0\1\10\2\0\1\162\1\325\76\162"+
    "\4\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\25\10\1\326\1\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\1\10"+
    "\1\327\25\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\330\22\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\6\10\1\331\20\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\332\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\1\10"+
    "\1\333\25\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\3\10\1\334\23\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\5\10\1\335\21\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\1\336\3\10\3\0"+
    "\1\10\1\0\27\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\13\10\1\337"+
    "\13\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\3\10\1\340\23\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\12\10\1\341\14\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\4\10\1\342\22\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\1\343\3\10\3\0\1\10\1\0\27\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\1\344"+
    "\3\10\3\0\1\10\1\0\27\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\10\10\1\345\16\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\16\10\1\346"+
    "\10\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\11\10\1\347\15\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\10\10\1\350\16\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\10\10\1\351\16\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\14\10\1\352"+
    "\12\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\5\10\1\353\10\10\1\354"+
    "\10\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\2\10\1\355\7\10\1\356"+
    "\14\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\15\10\1\357\11\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\2\10\1\360"+
    "\1\10\3\0\1\10\1\0\6\10\1\361\20\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\1\10\1\362\12\10\1\363\12\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\2\10\1\364\24\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\1\365\3\10\3\0\1\10"+
    "\1\0\27\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\15\10\1\366\11\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\1\367"+
    "\3\10\3\0\1\10\1\0\27\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\1\10\1\370\2\10\3\0"+
    "\1\10\1\0\27\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\4\10\1\371"+
    "\22\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\1\372\3\10\3\0\1\10\1\0\27\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\373\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\1\10"+
    "\1\374\25\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\14\10\1\375\12\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\22\10\1\376\4\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\3\10\1\377\23\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\1\u0100\3\10\3\0\1\10\1\0"+
    "\27\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\2\10\1\u0101\24\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\u0102\22\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\6\10\1\u0103\20\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\6\10\1\u0104"+
    "\20\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\14\10\1\u0105\12\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\1\10\1\u0106\25\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\4\10\1\u0107\22\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\3\10\1\u0108"+
    "\23\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\1\10\1\u0109\25\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\7\10\1\u010a\17\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\16\10\1\u010b\10\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\13\10\1\u010c"+
    "\13\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\1\u010d\3\10\3\0\1\10\1\0\27\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\6\10\1\u010e\20\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\3\10"+
    "\1\u010f\23\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\12\10\1\u0110\14\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\5\10\1\u0111\21\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\4\10\1\u0112\12\10\1\u0113\7\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\20\10\1\u0114\6\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\3\10"+
    "\1\u0115\23\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\15\10\1\u0116\11\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\4\10\1\u0117\1\u0118\21\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\u0119\22\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\14\10\1\u011a\12\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\7\10\1\u011b"+
    "\17\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\4\10\1\u011c\22\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\10\10\1\u011d\16\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\13\10\1\u011e\13\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\14\10\1\u011f"+
    "\12\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\15\10\1\u0120\11\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\5\10\1\u0121\21\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\7\10\1\u0122\17\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\1\10\1\u0123"+
    "\25\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\3\10\1\u0124\23\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\7\10\1\u0125\17\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\4\10\1\u0126\22\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\14\10\1\u0127"+
    "\12\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\2\10\1\u0128\24\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\4\10\1\u0129\1\u012a\21\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\4\10\1\u012b\22\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\5\10"+
    "\1\u012c\21\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\3\10\1\u012d\23\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\1\10\1\u012e\25\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\1\10\1\u012f\2\10"+
    "\3\0\1\10\1\0\27\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\u0130\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\5\10\1\u0131\21\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\2\10\1\u0132\24\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\7\10\1\u0133\17\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\u0134\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\3\10\1\u0135\23\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\16\10\1\u0136\10\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\u0137\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\6\10"+
    "\1\u0138\20\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\u0139\22\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\6\10\1\u013a\20\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\u013b\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\6\10"+
    "\1\u013c\20\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\1\10\1\u013d\25\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\3\10\1\u013e\23\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\5\10\1\u013f\21\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\1\u0140\3\10\3\0\1\10\1\0"+
    "\27\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\13\10\1\u0141\13\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\12\10\1\u0142\14\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\4\10\1\u0143\22\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\1\u0144\3\10\3\0\1\10\1\0\27\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\10\10\1\u0145\16\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\10\10\1\u0146\16\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\1\u0147\3\10\3\0\1\10\1\0"+
    "\27\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\14\10\1\u0148\12\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\14\10\1\u0149\12\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\11\10\1\u014a\15\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\1\u014b\3\10\3\0\1\10\1\0\27\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\21\10\1\u014c\5\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\3\10\1\u014d\23\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\2\10"+
    "\1\u014e\24\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\u014f\22\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\6\10\1\u0150\20\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\6\10\1\u0151\20\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\u0152\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\1\10\1\u0153\25\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\4\10\1\u0154\22\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\1\10\1\u0155\25\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\16\10"+
    "\1\u0156\10\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\u0157\22\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\10\10\1\u0158\16\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\u0159\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\14\10"+
    "\1\u015a\12\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\15\10\1\u015b\11\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\5\10\1\u015c\21\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\7\10\1\u015d\17\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\1\10"+
    "\1\u015e\25\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\7\10\1\u015f\17\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\3\10\1\u0160\23\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\16\10\1\u0161\10\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\6\10"+
    "\1\u0162\20\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\4\10\3\0\1\10\1\0\4\10\1\u0163\22\10"+
    "\17\0\1\10\6\0\6\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\1\0\6\10\1\u0164\20\10\17\0\1\10"+
    "\6\0\6\10\2\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\0\14\10\1\u0165\12\10\17\0\1\10\6\0\6\10"+
    "\2\0\1\10\1\0\4\10\3\0\1\10\1\0\11\10"+
    "\1\u0166\15\10\17\0\1\10\6\0\6\10\2\0\1\10"+
    "\1\0\1\u0167\3\10\3\0\1\10\1\0\27\10\17\0"+
    "\1\10\6\0\6\10\2\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\0\21\10\1\u0168\5\10\17\0\1\10\6\0"+
    "\6\10\2\0\1\10\1\0\4\10\3\0\1\10\1\0"+
    "\3\10\1\u0169\23\10\17\0\1\10\6\0\6\10\2\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\0\14\10\1\u016a"+
    "\12\10\17\0\1\10\6\0\6\10\2\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\0\14\10\1\u016b\12\10\17\0"+
    "\1\10\2\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  9,  9,  9,  1,  1,  9,  9,  9,  9, 
     1,  1,  1,  1,  0,  1,  9,  0,  1,  0,  9,  0,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  9,  0,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  0, 
     9,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     0,  0,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    public final String kwAction = new String("action");
    public final String kwActor = new String("actor");
    public final String kwAll = new String("all");
    public final String kwAnd = new String("and");
    public final String kwAny = new String("any");
    public final String kwAssign = new String("assign");
    public final String kwAt = new String("at");
    public final String kwAtN = new String("at*");
    public final String kwBegin = new String("begin");
    public final String kwChoose = new String("choose");
    public final String kwConst = new String("const");
    public final String kwDefault = new String("default");
    public final String kwDelay = new String("delay");
    public final String kwDiv = new String("div");
    public final String kwDo = new String("do");
    public final String kwDom = new String("dom");
    public final String kwElse = new String("else");
    public final String kwEnd = new String("end");
    public final String kwEndAction = new String("endaction");
    public final String kwEndActor = new String("endactor");
    public final String kwEndAssign = new String("endassign");
    public final String kwEndBegin = new String("endbegin");
    public final String kwEndChoose = new String("endchoose");
    public final String kwEndForeach = new String("endforeach");
    public final String kwEndFunction = new String("endfunction");
    public final String kwEndIf = new String("endif");
    public final String kwEndInitialize = new String("endinitialize");
    public final String kwEndInvariant = new String("endinvariant");
    public final String kwEndLambda = new String("endlambda");
    public final String kwEndLet = new String("endlet");
    public final String kwEndPriority = new String("endpriority");
    public final String kwEndProc = new String("endproc");
    public final String kwEndProcedure = new String("endprocedure");
    public final String kwEndSchedule = new String("endschedule");
    public final String kwEndWhile = new String("endwhile");
    public final String kwEnsure = new String("ensure");
    public final String kwFalse = new String("false");
    public final String kwFor = new String("for");
    public final String kwForeach = new String("foreach");
    public final String kwFsm = new String("fsm");
    public final String kwFunction = new String("function");
    public final String kwGuard = new String("guard");
    public final String kwIf = new String("if");
    public final String kwImport = new String("import");
    public final String kwIn = new String("in");
    public final String kwInitialize = new String("initialize");
    public final String kwInvariant = new String("invariant");
    public final String kwLambda = new String("lambda");
    public final String kwLet = new String("let");
    public final String kwMap = new String("map");
    public final String kwMod = new String("mod");
    public final String kwMulti = new String("multi");
    public final String kwMutable = new String("mutable");
    public final String kwNot = new String("not");
    public final String kwNull = new String("null");
    public final String kwOld = new String("old");
    public final String kwOr = new String("or");
    public final String kwPackage = new String("package");
    public final String kwPriority = new String("priority");
    public final String kwProc = new String("proc");
    public final String kwProcedure = new String("procedure");
    public final String kwRegexp = new String("regexp");
    public final String kwRepeat = new String("repeat");
    public final String kwRequire = new String("require");
    public final String kwSchedule = new String("schedule");
    public final String kwThen = new String("then");
    public final String kwTime = new String("time");
    public final String kwTo = new String("to");
    public final String kwTrue = new String("true");
    public final String kwVar = new String("var");
    public final String kwWhile = new String("while");

    public final String opColon = new String(":");
    public final String opColonEquals = new String(":=");
    public final String opComma = new String(",");
    public final String opDashDashGt = new String("-->");
    public final String opDashGt = new String("->");
    public final String opDot = new String(".");
    public final String opDotDot = new String("..");
    public final String opEquals = new String("=");
    public final String opEqualsEqualsGt = new String("==>");
    public final String opGt = new String(">");
    public final String opHash = new String("#");
    public final String opLBrace = new String("{");
    public final String opLBrack = new String("[");
    public final String opLPar = new String("(");
    public final String opLt = new String("<");
    public final String opPlus = new String("+");
    public final String opQmark = new String("?");
    public final String opRBrace = new String("}");
    public final String opRBrack = new String("]");
    public final String opRPar = new String(")");
    public final String opSemi = new String(";");
    public final String opStar = new String("*");
    public final String opUnderScore = new String("_");
    public final String opVBar = new String("|");

    /*--INSERT-CONSTANTS--*/

    //
    //  Return 's' with escape sequences replaced by their binary equivalents.
    //
    static public String decode(String s) {
        int iMax = s.length();
        StringBuffer result = new StringBuffer(iMax);
        for (int i = 0; i < iMax; ) {
        
            char c = s.charAt(i);           // FIXME: where did the 16 bit Unicode characters go ?
            if (c != '\\') {
                result.append(c);
                i++;
            }
            else if ((i + 1 <= iMax) && (s.charAt(i+1) == 'b')) {
                result.append('\b');
                i += 2;
            }
            else if ((i + 1 <= iMax) && (s.charAt(i+1) == 'f')) {
                result.append('\f');
                i += 2;
            }
            else if ((i + 1 <= iMax) && (s.charAt(i+1) == 'n')) {
                result.append('\n');
                i += 2;
            }
            else if ((i + 1 <= iMax) && (s.charAt(i+1) == 'r')) {
                result.append('\r');
                i += 2;
            }
            else if ((i + 1 <= iMax) && (s.charAt(i+1) == 't')) {
                result.append('\t');
                i += 2;
            }
            else if ((i + 4 <= iMax)
                  && (('0' <= s.charAt(i+1)) && (s.charAt(i+1) <= '3'))
                  && (('0' <= s.charAt(i+2)) && (s.charAt(i+2) <= '7'))
                  && (('0' <= s.charAt(i+3)) && (s.charAt(i+3) <= '7'))) {
                String n = s.substring(i+1 , i+3);
                result.append((char)Integer.parseInt(n, 8));
                i += 4;
            }
            else if ((i + 3 <= iMax)
                  && (('0' <= s.charAt(i+1)) && (s.charAt(i+1) <= '7'))
                  && (('0' <= s.charAt(i+2)) && (s.charAt(i+2) <= '7'))) {
                String n = s.substring(i+1 , i+2);
                result.append((char)Integer.parseInt(n, 8));
                i += 3;
            }
            else if ((i + 2 <= iMax)
                  && (('0' <= s.charAt(i+1)) && (s.charAt(i+1) <= '7'))) {
                String n = s.substring(i+1 , i+1);
                result.append((char)Integer.parseInt(n, 8));
                i += 2;
            }
            else if ((i + 4 <= iMax) && ((s.charAt(i+1) == 'x') || (s.charAt(i+1) == 'X'))) {
                String n = s.substring(i+2 , i+3);
                result.append((char)Integer.parseInt(n, 16));
                i +=4;
            }
            else if ((i + 6 <= iMax) && (s.charAt(i+1) == 'u')) {
                String n = s.substring(i+2 , i+5);
                result.append((char)Integer.parseInt(n, 16));
                i += 6;
            }
            else {
                result.append(s.charAt(i+1));
                i += 2;
            }
        }
        return result.toString();
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[17088];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 7: 
        case 11: 
        case 12: 
        case 13: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 73: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 83: 
        case 86: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 125: 
        case 130: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 146: 
        case 147: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 156: 
        case 157: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 186: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 206: 
        case 207: 
        case 208: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 215: 
        case 218: 
        case 219: 
        case 220: 
        case 222: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 231: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 249: 
        case 250: 
        case 251: 
        case 255: 
        case 256: 
        case 257: 
        case 261: 
        case 262: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 288: 
        case 289: 
        case 290: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 306: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 316: 
        case 317: 
        case 318: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 330: 
        case 331: 
        case 333: 
        case 334: 
        case 338: 
        case 339: 
        case 341: 
        case 342: 
        case 343: 
        case 347: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 354: 
        case 355: 
        case 358: 
        case 359: 
          {  return new Symbol(Terminal.Id, yyline+1, yycolumn+1, yytext());  }
        case 364: break;
        case 124: 
          {  return new Symbol(Terminal.FSM, yyline+1, yycolumn+1, kwFunction);  }
        case 365: break;
        case 2: 
        case 16: 
        case 17: 
        case 36: 
        case 50: 
        case 51: 
        case 108: 
        case 109: 
        case 114: 
          {  return new Symbol(Terminal.PartialOp, yyline+1, yycolumn+1, yytext());  }
        case 366: break;
        case 170: 
        case 212: 
          {  /* ignore multi-line comment. */  }
        case 367: break;
        case 0: 
        case 3: 
          {  /* ignore white space. */  }
        case 368: break;
        case 1: 
        case 10: 
        case 14: 
        case 15: 
          {  return new Symbol(Terminal.IllegalCharacter, yyline+1, yycolumn+1, yytext());  }
        case 369: break;
        case 167: 
          {  return new Symbol(Terminal.EQUALS_EQUALS_GT, yyline+1, yycolumn+1, opEqualsEqualsGt);  }
        case 370: break;
        case 168: 
          {  return new Symbol(Terminal.DASH_DASH_GT, yyline+1, yycolumn+1, opDashDashGt);  }
        case 371: break;
        case 362: 
          {  return new Symbol(Terminal.END_INITIALIZE, yyline+1, yycolumn+1, kwEndInitialize);  }
        case 372: break;
        case 361: 
          {  return new Symbol(Terminal.END_PROCEDURE, yyline+1, yycolumn+1, kwEndProcedure);  }
        case 373: break;
        case 360: 
          {  return new Symbol(Terminal.END_INVARIANT, yyline+1, yycolumn+1, kwEndInvariant);  }
        case 374: break;
        case 357: 
          {  return new Symbol(Terminal.END_PRIORITY, yyline+1, yycolumn+1, kwEndPriority);  }
        case 375: break;
        case 356: 
          {  return new Symbol(Terminal.END_SCHEDULE, yyline+1, yycolumn+1, kwEndSchedule);  }
        case 376: break;
        case 353: 
          {  return new Symbol(Terminal.END_FUNCTION, yyline+1, yycolumn+1, kwEndFunction);  }
        case 377: break;
        case 346: 
          {  return new Symbol(Terminal.END_FOREACH, yyline+1, yycolumn+1, kwEndForeach);  }
        case 378: break;
        case 345: 
          {  return new Symbol(Terminal.INITIALIZE, yyline+1, yycolumn+1, kwInitialize);  }
        case 379: break;
        case 344: 
          {  return new Symbol(Terminal.PROCEDURE, yyline+1, yycolumn+1, kwProcedure);  }
        case 380: break;
        case 340: 
          {  return new Symbol(Terminal.END_LAMBDA, yyline+1, yycolumn+1, kwEndLambda);  }
        case 381: break;
        case 337: 
          {  return new Symbol(Terminal.END_CHOOSE, yyline+1, yycolumn+1, kwEndChoose);  }
        case 382: break;
        case 336: 
          {  return new Symbol(Terminal.END_ASSIGN, yyline+1, yycolumn+1, kwEndAssign);  }
        case 383: break;
        case 335: 
          {  return new Symbol(Terminal.END_ACTION, yyline+1, yycolumn+1, kwEndAction);  }
        case 384: break;
        case 332: 
          {  return new Symbol(Terminal.INVARIANT, yyline+1, yycolumn+1, kwInvariant);  }
        case 385: break;
        case 329: 
          {  return new Symbol(Terminal.PRIORITY, yyline+1, yycolumn+1, kwPriority);  }
        case 386: break;
        case 328: 
          {  return new Symbol(Terminal.END_WHILE, yyline+1, yycolumn+1, kwEndWhile);  }
        case 387: break;
        case 319: 
          {  return new Symbol(Terminal.END_ACTOR, yyline+1, yycolumn+1, kwEndActor);  }
        case 388: break;
        case 315: 
          {  return new Symbol(Terminal.END_BEGIN, yyline+1, yycolumn+1, kwEndBegin);  }
        case 389: break;
        case 314: 
          {  return new Symbol(Terminal.SCHEDULE, yyline+1, yycolumn+1, kwSchedule);  }
        case 390: break;
        case 311: 
          {  return new Symbol(Terminal.FUNCTION, yyline+1, yycolumn+1, kwFunction);  }
        case 391: break;
        case 310: 
          {  return new Symbol(Terminal.PACKAGE, yyline+1, yycolumn+1, kwPackage);  }
        case 392: break;
        case 307: 
          {  return new Symbol(Terminal.MUTABLE, yyline+1, yycolumn+1, kwMutable);  }
        case 393: break;
        case 305: 
          {  return new Symbol(Terminal.END_PROC, yyline+1, yycolumn+1, kwEndProc);  }
        case 394: break;
        case 291: 
          {  return new Symbol(Terminal.DEFAULT, yyline+1, yycolumn+1, kwDefault);  }
        case 395: break;
        case 287: 
          {  return new Symbol(Terminal.FOREACH, yyline+1, yycolumn+1, kwForeach);  }
        case 396: break;
        case 286: 
          {  return new Symbol(Terminal.REQUIRE, yyline+1, yycolumn+1, kwRequire);  }
        case 397: break;
        case 281: 
          {  return new Symbol(Terminal.ENSURE, yyline+1, yycolumn+1, kwEnsure);  }
        case 398: break;
        case 276: 
          {  return new Symbol(Terminal.END_LET, yyline+1, yycolumn+1, kwEndLet);  }
        case 399: break;
        case 264: 
          {  return new Symbol(Terminal.LAMBDA, yyline+1, yycolumn+1, kwLambda);  }
        case 400: break;
        case 263: 
          {  return new Symbol(Terminal.IMPORT, yyline+1, yycolumn+1, kwImport);  }
        case 401: break;
        case 260: 
          {  return new Symbol(Terminal.CHOOSE, yyline+1, yycolumn+1, kwChoose);  }
        case 402: break;
        case 259: 
          {  return new Symbol(Terminal.ASSIGN, yyline+1, yycolumn+1, kwAssign);  }
        case 403: break;
        case 258: 
          {  return new Symbol(Terminal.ACTION, yyline+1, yycolumn+1, kwAction);  }
        case 404: break;
        case 254: 
          {  return new Symbol(Terminal.REPEAT, yyline+1, yycolumn+1, kwRepeat);  }
        case 405: break;
        case 253: 
          {  return new Symbol(Terminal.REGEXP, yyline+1, yycolumn+1, kwRepeat);  }
        case 406: break;
        case 252: 
          {  return new Symbol(Terminal.WHILE, yyline+1, yycolumn+1, kwWhile);  }
        case 407: break;
        case 248: 
          {  return new Symbol(Terminal.MULTI, yyline+1, yycolumn+1, kwMulti);  }
        case 408: break;
        case 94: 
          {  return new Symbol(Terminal.DO, yyline+1, yycolumn+1, kwDo);  }
        case 409: break;
        case 87: 
          {  return new Symbol(Terminal.OR, yyline+1, yycolumn+1, kwOr);  }
        case 410: break;
        case 85: 
          {  return new Symbol(Terminal.IN, yyline+1, yycolumn+1, kwIn);  }
        case 411: break;
        case 84: 
          {  return new Symbol(Terminal.IF, yyline+1, yycolumn+1, kwIf);  }
        case 412: break;
        case 82: 
          {  return new Symbol(Terminal.TO, yyline+1, yycolumn+1, kwTo);  }
        case 413: break;
        case 74: 
          {  return new Symbol(Terminal.AT, yyline+1, yycolumn+1, kwAt);  }
        case 414: break;
        case 58: 
          {  return new Symbol(Terminal.DOTDOT, yyline+1, yycolumn+1, opDotDot);  }
        case 415: break;
        case 49: 
          {  return new Symbol(Terminal.VBAR, yyline+1, yycolumn+1, opVBar);  }
        case 416: break;
        case 48: 
          {  return new Symbol(Terminal.UNDER_SCORE, yyline+1, yycolumn+1, opUnderScore);  }
        case 417: break;
        case 47: 
          {  return new Symbol(Terminal.SEMI, yyline+1, yycolumn+1, opSemi);  }
        case 418: break;
        case 46: 
          {  return new Symbol(Terminal.RPAR, yyline+1, yycolumn+1, opRPar);  }
        case 419: break;
        case 45: 
          {  return new Symbol(Terminal.RBRACK, yyline+1, yycolumn+1, opRBrack);  }
        case 420: break;
        case 44: 
          {  return new Symbol(Terminal.RBRACE, yyline+1, yycolumn+1, opRBrace);  }
        case 421: break;
        case 43: 
          {  return new Symbol(Terminal.QMARK, yyline+1, yycolumn+1, opQmark);  }
        case 422: break;
        case 9: 
          {  return new Symbol(Terminal.DOT, yyline+1, yycolumn+1, opDot);  }
        case 423: break;
        case 8: 
          {  return new Symbol(Terminal.PLUS, yyline+1, yycolumn+1, opPlus);  }
        case 424: break;
        case 5: 
        case 6: 
        case 56: 
        case 117: 
          {  return new Symbol(Terminal.Integer, yyline+1, yycolumn+1, yytext());  }
        case 425: break;
        case 4: 
          {  return new Symbol(Terminal.STAR, yyline+1, yycolumn+1, opStar);  }
        case 426: break;
        case 33: 
          {  return new Symbol(Terminal.COLON, yyline+1, yycolumn+1, opColon);  }
        case 427: break;
        case 34: 
          {  return new Symbol(Terminal.EQUALS, yyline+1, yycolumn+1, opEquals);  }
        case 428: break;
        case 35: 
          {  return new Symbol(Terminal.COMMA, yyline+1, yycolumn+1, opComma);  }
        case 429: break;
        case 37: 
          {  return new Symbol(Terminal.GT, yyline+1, yycolumn+1, opGt);  }
        case 430: break;
        case 38: 
          {  return new Symbol(Terminal.HASH, yyline+1, yycolumn+1, opHash);  }
        case 431: break;
        case 39: 
          {  return new Symbol(Terminal.LBRACE, yyline+1, yycolumn+1, opLBrace);  }
        case 432: break;
        case 40: 
          {  return new Symbol(Terminal.LBRACK, yyline+1, yycolumn+1, opLBrack);  }
        case 433: break;
        case 41: 
          {  return new Symbol(Terminal.LPAR, yyline+1, yycolumn+1, opLPar);  }
        case 434: break;
        case 42: 
          {  return new Symbol(Terminal.LT, yyline+1, yycolumn+1, opLt);  }
        case 435: break;
        case 107: 
          {  return new Symbol(Terminal.COLON_EQUALS, yyline+1, yycolumn+1, opColonEquals);  }
        case 436: break;
        case 110: 
          {  return new Symbol(Terminal.DASH_GT, yyline+1, yycolumn+1, opDashGt);  }
        case 437: break;
        case 123: 
          {  return new Symbol(Terminal.FOR, yyline+1, yycolumn+1, kwFor);  }
        case 438: break;
        case 131: 
          {  return new Symbol(Terminal.ATN, yyline+1, yycolumn+1, kwAtN);  }
        case 439: break;
        case 132: 
          {  return new Symbol(Terminal.AND, yyline+1, yycolumn+1, kwAnd);  }
        case 440: break;
        case 133: 
          {  return new Symbol(Terminal.ANY, yyline+1, yycolumn+1, kwAny);  }
        case 441: break;
        case 134: 
          {  return new Symbol(Terminal.ALL, yyline+1, yycolumn+1, kwAll);  }
        case 442: break;
        case 144: 
          {  return new Symbol(Terminal.OLD, yyline+1, yycolumn+1, kwOld);  }
        case 443: break;
        case 145: 
          {  return new Symbol(Terminal.NOT, yyline+1, yycolumn+1, kwNot);  }
        case 444: break;
        case 148: 
          {  return new Symbol(Terminal.LET, yyline+1, yycolumn+1, kwLet);  }
        case 445: break;
        case 149: 
          {  return new Symbol(Terminal.DIV, yyline+1, yycolumn+1, kwDiv);  }
        case 446: break;
        case 150: 
          {  return new Symbol(Terminal.DOM, yyline+1, yycolumn+1, kwDom);  }
        case 447: break;
        case 155: 
          {  return new Symbol(Terminal.END, yyline+1, yycolumn+1, kwEnd);  }
        case 448: break;
        case 158: 
          {  return new Symbol(Terminal.VAR, yyline+1, yycolumn+1, kwVar);  }
        case 449: break;
        case 159: 
          {  return new Symbol(Terminal.MAP, yyline+1, yycolumn+1, kwMap);  }
        case 450: break;
        case 160: 
          {  return new Symbol(Terminal.MOD, yyline+1, yycolumn+1, kwMod);  }
        case 451: break;
        case 183: 
          {  return new Symbol(Terminal.TRUE, yyline+1, yycolumn+1, kwTrue);  }
        case 452: break;
        case 184: 
          {  return new Symbol(Terminal.TIME, yyline+1, yycolumn+1, kwTime);  }
        case 453: break;
        case 185: 
          {  return new Symbol(Terminal.THEN, yyline+1, yycolumn+1, kwThen);  }
        case 454: break;
        case 189: 
          {  return new Symbol(Terminal.NULL, yyline+1, yycolumn+1, kwNull);  }
        case 455: break;
        case 205: 
          {  return new Symbol(Terminal.ELSE, yyline+1, yycolumn+1, kwElse);  }
        case 456: break;
        case 209: 
          {  return new Symbol(Terminal.PROC, yyline+1, yycolumn+1, kwProc);  }
        case 457: break;
        case 216: 
          {  return new Symbol(Terminal.BEGIN, yyline+1, yycolumn+1, kwBegin);  }
        case 458: break;
        case 217: 
          {  return new Symbol(Terminal.FALSE, yyline+1, yycolumn+1, kwFalse);  }
        case 459: break;
        case 221: 
          {  return new Symbol(Terminal.ACTOR, yyline+1, yycolumn+1, kwActor);  }
        case 460: break;
        case 223: 
          {  return new Symbol(Terminal.CONST, yyline+1, yycolumn+1, kwConst);  }
        case 461: break;
        case 230: 
          {  return new Symbol(Terminal.DELAY, yyline+1, yycolumn+1, kwDelay);  }
        case 462: break;
        case 232: 
          {  return new Symbol(Terminal.GUARD, yyline+1, yycolumn+1, kwGuard);  }
        case 463: break;
        case 239: 
          {  return new Symbol(Terminal.END_IF, yyline+1, yycolumn+1, kwEndIf);  }
        case 464: break;
        case 72: 
          {  return new Symbol(Terminal.String, yyline+1, yycolumn+1,
                            decode(yytext().substring(1, yytext().length()-1)));  }
        case 465: break;
        case 70: 
          {  return new Symbol(Terminal.UnterminatedString, yyline+1, yycolumn+1,
                            decode(yytext().substring(1, yytext().length())));  }
        case 466: break;
        case 60: 
          {  return new Symbol(Terminal.Id, yyline+1, yycolumn+1,
                            decode(yytext().substring(1, yytext().length()-1)));  }
        case 467: break;
        case 53: 
        case 54: 
        case 115: 
          {  return new Symbol(Terminal.Real, yyline+1, yycolumn+1, yytext());  }
        case 468: break;
        case 112: 
          {  /* ignore single line comment. */  }
        case 469: break;
        case 126: 
          {  return new Symbol(Terminal.UnterminatedCharacter, yyline+1, yycolumn+1,
                            decode(yytext().substring(1, yytext().length())));  }
        case 470: break;
        case 127: 
          {  return new Symbol(Terminal.Character, yyline+1, yycolumn+1,
                            decode(yytext().substring(1, yytext().length()-1)));  }
        case 471: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(Terminal.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
