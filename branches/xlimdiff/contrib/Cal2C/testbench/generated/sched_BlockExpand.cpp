#include <systemc.h>
#include <tlm.h>
#include "sched_BlockExpand.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct BlockExpand_variables {
   int last ;
   int run ;
   int count ;
   int next_value ;
   int BLOCK_SIZE ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void BlockExpand_done(struct BlockExpand_variables *_actor_variables ) ;
void BlockExpand_read_dot_immediate(struct BlockExpand_variables *_actor_variables ,
                                    int r , int v , int l , int *out ) ;
void BlockExpand_read_dot_save(struct BlockExpand_variables *_actor_variables , int r ,
                               int v , int l , int *out ) ;
void BlockExpand_write_dot_value(struct BlockExpand_variables *_actor_variables ,
                                 int *out ) ;
void BlockExpand_write_dot_zero(struct BlockExpand_variables *_actor_variables , int *out ) ;

#ifdef __cplusplus
}
#endif

void sched_BlockExpand::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _out_1 ;
  int _token_4 ;
  int _token_5 ;
  int _token_6 ;
  int _out_2 ;
  int _out_3 ;
  int _out_4 ;
  int _call_12 ;
  int _call_13 ;
  int _call_14 ;
  int _call_15 ;
  int _call_16 ;
  int _call_17 ;
  struct BlockExpand_variables *_actor_variables ;

  {
  _actor_variables = (struct BlockExpand_variables *)malloc(20);
  _actor_variables->BLOCK_SIZE = 64;
  _actor_variables->count = 0;
  _actor_variables->last = 0;
  _actor_variables->run = -1;
  while (1) {
    if (_actor_variables->count == _actor_variables->BLOCK_SIZE) {
      BlockExpand_done(_actor_variables);
    } else {
      if (_actor_variables->run == 0) {
        BlockExpand_write_dot_value(_actor_variables, & _out_4);
        libcal_printf("action BlockExpand_write_dot_value: put value %i to out\n",
                      _out_4);
        out->put(_out_4);
        libcal_printf("action BlockExpand_write_dot_value: put to out OK\n");
      } else {
        if (_actor_variables->run > 0 || _actor_variables->last) {
          BlockExpand_write_dot_zero(_actor_variables, & _out_3);
          libcal_printf("action BlockExpand_write_dot_zero: put value %i to out\n",
                        _out_3);
          out->put(_out_3);
          libcal_printf("action BlockExpand_write_dot_zero: put to out OK\n");
        } else {
          if (RUN->peek() == 0) {
            libcal_printf("action BlockExpand_read_dot_immediate: get from RUN\n");
            _call_12 = RUN->get();
            _token_4 = _call_12;
            libcal_printf("action BlockExpand_read_dot_immediate: got %i from RUN\n",
                          _token_4);
            libcal_printf("action BlockExpand_read_dot_immediate: get from VALUE\n");
            _call_13 = VALUE->get();
            _token_5 = _call_13;
            libcal_printf("action BlockExpand_read_dot_immediate: got %i from VALUE\n",
                          _token_5);
            libcal_printf("action BlockExpand_read_dot_immediate: get from LAST\n");
            _call_14 = LAST->get();
            _token_6 = _call_14;
            libcal_printf("action BlockExpand_read_dot_immediate: got %i from LAST\n",
                          _token_6);
            BlockExpand_read_dot_immediate(_actor_variables, _token_4, _token_5, _token_6,
                                           & _out_2);
            libcal_printf("action BlockExpand_read_dot_immediate: put value %i to out\n",
                          _out_2);
            out->put(_out_2);
            libcal_printf("action BlockExpand_read_dot_immediate: put to out OK\n");
          } else {
            libcal_printf("action BlockExpand_read_dot_save: get from RUN\n");
            _call_15 = RUN->get();
            _token_1 = _call_15;
            libcal_printf("action BlockExpand_read_dot_save: got %i from RUN\n", _token_1);
            libcal_printf("action BlockExpand_read_dot_save: get from VALUE\n");
            _call_16 = VALUE->get();
            _token_2 = _call_16;
            libcal_printf("action BlockExpand_read_dot_save: got %i from VALUE\n",
                          _token_2);
            libcal_printf("action BlockExpand_read_dot_save: get from LAST\n");
            _call_17 = LAST->get();
            _token_3 = _call_17;
            libcal_printf("action BlockExpand_read_dot_save: got %i from LAST\n",
                          _token_3);
            BlockExpand_read_dot_save(_actor_variables, _token_1, _token_2, _token_3,
                                      & _out_1);
            libcal_printf("action BlockExpand_read_dot_save: put value %i to out\n",
                          _out_1);
            out->put(_out_1);
            libcal_printf("action BlockExpand_read_dot_save: put to out OK\n");
          }
        }
      }
    }
  }
}
}

}
