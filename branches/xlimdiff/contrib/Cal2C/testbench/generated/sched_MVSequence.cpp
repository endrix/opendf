#include <systemc.h>
#include <tlm.h>
#include "sched_MVSequence.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MVSequence_variables {
   int BUF_SIZE ;
   int ptr_left ;
   int mbwidth ;
   int ptr_above ;
   int ptr_above_right ;
   int mbx ;
   int comp ;
   int right_edge ;
   int top_edge ;
   int ptr ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
int MVSequence_function_access(struct MVSequence_variables *_actor_variables , int mbptr ,
                               int c ) ;
int MVSequence_function_decrement(struct MVSequence_variables *_actor_variables ,
                                  int p ) ;
void MVSequence_geth(struct MVSequence_variables *_actor_variables , int h ) ;
void MVSequence_getw(struct MVSequence_variables *_actor_variables , int w ) ;
void MVSequence_read_dot_noPredict(struct MVSequence_variables *_actor_variables ,
                                   int cmd ) ;
void MVSequence_read_dot_predict_dot_y0(struct MVSequence_variables *_actor_variables ,
                                        int cmd , int A[3] ) ;
void MVSequence_read_dot_predict_dot_y1(struct MVSequence_variables *_actor_variables ,
                                        int cmd , int A[3] ) ;
void MVSequence_read_dot_predict_dot_y2(struct MVSequence_variables *_actor_variables ,
                                        int cmd , int A[3] ) ;
void MVSequence_read_dot_predict_dot_y3(struct MVSequence_variables *_actor_variables ,
                                        int cmd , int A[3] ) ;
void MVSequence_start(struct MVSequence_variables *_actor_variables , int cmd ) ;

#ifdef __cplusplus
}
#endif

void sched_MVSequence::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _out_1[3] ;
  int _token_4 ;
  int _out_2[3] ;
  int _token_5 ;
  int _out_3[3] ;
  int _token_6 ;
  int _out_4[3] ;
  int _token_7 ;
  int _token_8 ;
  int _call_15 ;
  int _call_16 ;
  int _call_17 ;
  int i ;
  int _list_19[3] ;
  int _call_20 ;
  int _list_21[3] ;
  int _call_22 ;
  int _list_23[3] ;
  int _call_24 ;
  int _list_25[3] ;
  int _call_26 ;
  int _call_27 ;
  struct MVSequence_variables *_actor_variables ;

  {
  _actor_variables = (struct MVSequence_variables *)malloc(40);
  _actor_variables->BUF_SIZE = 121;
  _actor_variables->comp = 0;
  _actor_variables->mbwidth = 0;
  _actor_variables->mbx = 0;
  _actor_variables->right_edge = 0;
  _actor_variables->top_edge = 1;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MVSequence_start: get from btype\n");
      _call_15 = btype->get();
      _token_8 = _call_15;
      libcal_printf("action MVSequence_start: got %i from btype\n", _token_8);
      MVSequence_start(_actor_variables, _token_8);
      fsm_state = 3;
    } else {
      if (((_actor_variables->comp > 3 || (btype->peek() & 512) == 0) || (btype->peek() & 8) == 0) || (_actor_variables->comp != 0 && (btype->peek() & 4) == 0)) {
        libcal_printf("action MVSequence_read_dot_noPredict: get from btype\n");
        _call_16 = btype->get();
        _token_7 = _call_16;
        libcal_printf("action MVSequence_read_dot_noPredict: got %i from btype\n",
                      _token_7);
        MVSequence_read_dot_noPredict(_actor_variables, _token_7);
        fsm_state = 1;
      } else {
        if (_actor_variables->comp == 0) {
          libcal_printf("action MVSequence_read_dot_predict_dot_y0: get from btype\n");
          _call_17 = btype->get();
          _token_6 = _call_17;
          libcal_printf("action MVSequence_read_dot_predict_dot_y0: got %i from btype\n",
                        _token_6);
          MVSequence_read_dot_predict_dot_y0(_actor_variables, _token_6, _out_4);
          i = 0;
          while (i < 3) {
            libcal_printf("action MVSequence_read_dot_predict_dot_y0: put value %i to A\n",
                          _out_4[i]);
            A->put(_out_4[i]);
            libcal_printf("action MVSequence_read_dot_predict_dot_y0: put to A OK\n");
            _list_19[1 * i + 0] = 0;
            i ++;
          }
          fsm_state = 1;
        } else {
          if (_actor_variables->comp == 1) {
            libcal_printf("action MVSequence_read_dot_predict_dot_y1: get from btype\n");
            _call_20 = btype->get();
            _token_5 = _call_20;
            libcal_printf("action MVSequence_read_dot_predict_dot_y1: got %i from btype\n",
                          _token_5);
            MVSequence_read_dot_predict_dot_y1(_actor_variables, _token_5, _out_3);
            i = 0;
            while (i < 3) {
              libcal_printf("action MVSequence_read_dot_predict_dot_y1: put value %i to A\n",
                            _out_3[i]);
              A->put(_out_3[i]);
              libcal_printf("action MVSequence_read_dot_predict_dot_y1: put to A OK\n");
              _list_21[1 * i + 0] = 0;
              i ++;
            }
            fsm_state = 1;
          } else {
            if (_actor_variables->comp == 2) {
              libcal_printf("action MVSequence_read_dot_predict_dot_y2: get from btype\n");
              _call_22 = btype->get();
              _token_4 = _call_22;
              libcal_printf("action MVSequence_read_dot_predict_dot_y2: got %i from btype\n",
                            _token_4);
              MVSequence_read_dot_predict_dot_y2(_actor_variables, _token_4, _out_2);
              i = 0;
              while (i < 3) {
                libcal_printf("action MVSequence_read_dot_predict_dot_y2: put value %i to A\n",
                              _out_2[i]);
                A->put(_out_2[i]);
                libcal_printf("action MVSequence_read_dot_predict_dot_y2: put to A OK\n");
                _list_23[1 * i + 0] = 0;
                i ++;
              }
              fsm_state = 1;
            } else {
              libcal_printf("action MVSequence_read_dot_predict_dot_y3: get from btype\n");
              _call_24 = btype->get();
              _token_3 = _call_24;
              libcal_printf("action MVSequence_read_dot_predict_dot_y3: got %i from btype\n",
                            _token_3);
              MVSequence_read_dot_predict_dot_y3(_actor_variables, _token_3, _out_1);
              i = 0;
              while (i < 3) {
                libcal_printf("action MVSequence_read_dot_predict_dot_y3: put value %i to A\n",
                              _out_1[i]);
                A->put(_out_1[i]);
                libcal_printf("action MVSequence_read_dot_predict_dot_y3: put to A OK\n");
                _list_25[1 * i + 0] = 0;
                i ++;
              }
              fsm_state = 1;
            }
          }
        }
      }
    }
    break;
    }
    case 2: 
    {
    libcal_printf("action MVSequence_geth: get from btype\n");
    _call_26 = btype->get();
    _token_1 = _call_26;
    libcal_printf("action MVSequence_geth: got %i from btype\n", _token_1);
    MVSequence_geth(_actor_variables, _token_1);
    fsm_state = 1;
    break;
    }
    case 3: 
    {
    libcal_printf("action MVSequence_getw: get from btype\n");
    _call_27 = btype->get();
    _token_2 = _call_27;
    libcal_printf("action MVSequence_getw: got %i from btype\n", _token_2);
    MVSequence_getw(_actor_variables, _token_2);
    fsm_state = 2;
    break;
    }
    }
  }
}
}

}
