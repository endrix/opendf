#include <systemc.h>
#include <tlm.h>
#include "sched_splitter_420_B.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct splitter_420_B_variables {
   int comp ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void splitter_420_B_consume(struct splitter_420_B_variables *_actor_variables , int cmd ) ;
void splitter_420_B_skip_other(struct splitter_420_B_variables *_actor_variables ,
                               int cmd ) ;
void splitter_420_B_skip_uncoded(struct splitter_420_B_variables *_actor_variables ,
                                 int cmd ) ;
void splitter_420_B_splitU(struct splitter_420_B_variables *_actor_variables , int cmd ,
                           int x[64] , int U[64] ) ;
void splitter_420_B_splitV(struct splitter_420_B_variables *_actor_variables , int cmd ,
                           int x[64] , int V[64] ) ;
void splitter_420_B_splitY(struct splitter_420_B_variables *_actor_variables , int cmd ,
                           int x[64] , int Y[64] ) ;
void splitter_420_B_start(struct splitter_420_B_variables *_actor_variables , int cmd ) ;

#ifdef __cplusplus
}
#endif

void sched_splitter_420_B::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _out_1[64] ;
  int _token_5 ;
  int _token_6 ;
  int _out_2[64] ;
  int _token_7 ;
  int _token_8 ;
  int _out_3[64] ;
  int _token_9 ;
  int _token_10 ;
  int _token_11 ;
  int _call_17 ;
  int _call_18 ;
  int _call_19 ;
  int _call_20 ;
  int i ;
  int _list_22[64] ;
  int _call_23 ;
  int _list_24[64] ;
  int _call_25 ;
  int _list_26[64] ;
  int _call_27 ;
  int _list_28[64] ;
  int _call_29 ;
  int _list_30[64] ;
  int _call_31 ;
  int _list_32[64] ;
  int _call_33 ;
  int _call_34 ;
  struct splitter_420_B_variables *_actor_variables ;

  {
  _actor_variables = (struct splitter_420_B_variables *)malloc(4);
  _actor_variables->comp = 0;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action splitter_420_B_start: get from btype\n");
      _call_17 = btype->get();
      _token_11 = _call_17;
      libcal_printf("action splitter_420_B_start: got %i from btype\n", _token_11);
      splitter_420_B_start(_actor_variables, _token_11);
      fsm_state = 3;
    } else {
      if ((btype->peek() & 512) != 0 && (btype->peek() & 2) == 0) {
        libcal_printf("action splitter_420_B_skip_uncoded: get from btype\n");
        _call_18 = btype->get();
        _token_10 = _call_18;
        libcal_printf("action splitter_420_B_skip_uncoded: got %i from btype\n", _token_10);
        splitter_420_B_skip_uncoded(_actor_variables, _token_10);
        fsm_state = 1;
      } else {
        if ((btype->peek() & 512) == 0 && (btype->peek() & 1024) == 0) {
          libcal_printf("action splitter_420_B_skip_other: get from btype\n");
          _call_19 = btype->get();
          _token_9 = _call_19;
          libcal_printf("action splitter_420_B_skip_other: got %i from btype\n", _token_9);
          splitter_420_B_skip_other(_actor_variables, _token_9);
          fsm_state = 1;
        } else {
          if (_actor_variables->comp < 4) {
            libcal_printf("action splitter_420_B_splitY: get from btype\n");
            _call_20 = btype->get();
            _token_7 = _call_20;
            libcal_printf("action splitter_420_B_splitY: got %i from btype\n", _token_7);
            i = 0;
            while (i < 64) {
              libcal_printf("action splitter_420_B_splitY: get from B\n");
              _call_23 = B->get();
              _token_8 = _call_23;
              libcal_printf("action splitter_420_B_splitY: got %i from B\n", _token_8);
              _list_22[1 * i + 0] = _token_8;
              i ++;
            }
            splitter_420_B_splitY(_actor_variables, _token_7, _list_22, _out_3);
            i = 0;
            while (i < 64) {
              libcal_printf("action splitter_420_B_splitY: put value %i to Y\n", _out_3[i]);
              Y->put(_out_3[i]);
              libcal_printf("action splitter_420_B_splitY: put to Y OK\n");
              _list_24[1 * i + 0] = 0;
              i ++;
            }
            fsm_state = 1;
          } else {
            if (_actor_variables->comp == 4) {
              libcal_printf("action splitter_420_B_splitU: get from btype\n");
              _call_25 = btype->get();
              _token_5 = _call_25;
              libcal_printf("action splitter_420_B_splitU: got %i from btype\n", _token_5);
              i = 0;
              while (i < 64) {
                libcal_printf("action splitter_420_B_splitU: get from B\n");
                _call_27 = B->get();
                _token_6 = _call_27;
                libcal_printf("action splitter_420_B_splitU: got %i from B\n", _token_6);
                _list_26[1 * i + 0] = _token_6;
                i ++;
              }
              splitter_420_B_splitU(_actor_variables, _token_5, _list_26, _out_2);
              i = 0;
              while (i < 64) {
                libcal_printf("action splitter_420_B_splitU: put value %i to U\n",
                              _out_2[i]);
                U->put(_out_2[i]);
                libcal_printf("action splitter_420_B_splitU: put to U OK\n");
                _list_28[1 * i + 0] = 0;
                i ++;
              }
              fsm_state = 1;
            } else {
              if (_actor_variables->comp == 5) {
                libcal_printf("action splitter_420_B_splitV: get from btype\n");
                _call_29 = btype->get();
                _token_3 = _call_29;
                libcal_printf("action splitter_420_B_splitV: got %i from btype\n",
                              _token_3);
                i = 0;
                while (i < 64) {
                  libcal_printf("action splitter_420_B_splitV: get from B\n");
                  _call_31 = B->get();
                  _token_4 = _call_31;
                  libcal_printf("action splitter_420_B_splitV: got %i from B\n", _token_4);
                  _list_30[1 * i + 0] = _token_4;
                  i ++;
                }
                splitter_420_B_splitV(_actor_variables, _token_3, _list_30, _out_1);
                i = 0;
                while (i < 64) {
                  libcal_printf("action splitter_420_B_splitV: put value %i to V\n",
                                _out_1[i]);
                  V->put(_out_1[i]);
                  libcal_printf("action splitter_420_B_splitV: put to V OK\n");
                  _list_32[1 * i + 0] = 0;
                  i ++;
                }
                fsm_state = 1;
              }
            }
          }
        }
      }
    }
    break;
    }
    case 2: 
    {
    libcal_printf("action splitter_420_B_consume: get from btype\n");
    _call_33 = btype->get();
    _token_1 = _call_33;
    libcal_printf("action splitter_420_B_consume: got %i from btype\n", _token_1);
    splitter_420_B_consume(_actor_variables, _token_1);
    fsm_state = 1;
    break;
    }
    case 3: 
    {
    libcal_printf("action splitter_420_B_consume: get from btype\n");
    _call_34 = btype->get();
    _token_2 = _call_34;
    libcal_printf("action splitter_420_B_consume: got %i from btype\n", _token_2);
    splitter_420_B_consume(_actor_variables, _token_2);
    fsm_state = 2;
    break;
    }
    }
  }
}
}

}
