#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_IAP_16x16.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_IAP_16x16_variables {
   int BUF_SIZE ;
   int acpred_flag ;
   int top ;
   int comp ;
   int pred_ptr ;
   int count ;
   int ptr ;
   int buf[7872] ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_algo_IAP_16x16_advance(struct MPEG4_algo_IAP_16x16_variables *_actor_variables ) ;
void MPEG4_algo_IAP_16x16_copy(struct MPEG4_algo_IAP_16x16_variables *_actor_variables ,
                               int ac , int *QF_AC ) ;
void MPEG4_algo_IAP_16x16_newvop(struct MPEG4_algo_IAP_16x16_variables *_actor_variables ,
                                 int s ) ;
void MPEG4_algo_IAP_16x16_skip(struct MPEG4_algo_IAP_16x16_variables *_actor_variables ,
                               int s ) ;
void MPEG4_algo_IAP_16x16_start(struct MPEG4_algo_IAP_16x16_variables *_actor_variables ,
                                int s , int p ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_IAP_16x16::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _out_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _token_5 ;
  int _call_9 ;
  int _call_10 ;
  int _call_11 ;
  int _call_12 ;
  int _call_13 ;
  struct MPEG4_algo_IAP_16x16_variables *_actor_variables ;
  int k ;

  {
  _actor_variables = (struct MPEG4_algo_IAP_16x16_variables *)malloc(31516);
  _actor_variables->BUF_SIZE = 492;
  k = 0;
  while (k < 7872) {
    _actor_variables->buf[1 * k + 0] = 0;
    k ++;
  }
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if (AC_PRED_DIR->peek() == - 2) {
      libcal_printf("action MPEG4_algo_IAP_16x16_newvop: get from AC_PRED_DIR\n");
      _call_9 = AC_PRED_DIR->get();
      _token_5 = _call_9;
      libcal_printf("action MPEG4_algo_IAP_16x16_newvop: got %i from AC_PRED_DIR\n",
                    _token_5);
      MPEG4_algo_IAP_16x16_newvop(_actor_variables, _token_5);
      fsm_state = 1;
    } else {
      if (AC_PRED_DIR->peek() < 0) {
        libcal_printf("action MPEG4_algo_IAP_16x16_skip: get from AC_PRED_DIR\n");
        _call_10 = AC_PRED_DIR->get();
        _token_4 = _call_10;
        libcal_printf("action MPEG4_algo_IAP_16x16_skip: got %i from AC_PRED_DIR\n",
                      _token_4);
        MPEG4_algo_IAP_16x16_skip(_actor_variables, _token_4);
        fsm_state = 2;
      } else {
        libcal_printf("action MPEG4_algo_IAP_16x16_start: get from AC_PRED_DIR\n");
        _call_11 = AC_PRED_DIR->get();
        _token_2 = _call_11;
        libcal_printf("action MPEG4_algo_IAP_16x16_start: got %i from AC_PRED_DIR\n",
                      _token_2);
        libcal_printf("action MPEG4_algo_IAP_16x16_start: get from PTR\n");
        _call_12 = PTR->get();
        _token_3 = _call_12;
        libcal_printf("action MPEG4_algo_IAP_16x16_start: got %i from PTR\n", _token_3);
        MPEG4_algo_IAP_16x16_start(_actor_variables, _token_2, _token_3);
        fsm_state = 2;
      }
    }
    break;
    }
    case 2: 
    {
    if (_actor_variables->count == 64) {
      MPEG4_algo_IAP_16x16_advance(_actor_variables);
      fsm_state = 1;
    } else {
      libcal_printf("action MPEG4_algo_IAP_16x16_copy: get from PQF_AC\n");
      _call_13 = PQF_AC->get();
      _token_1 = _call_13;
      libcal_printf("action MPEG4_algo_IAP_16x16_copy: got %i from PQF_AC\n", _token_1);
      MPEG4_algo_IAP_16x16_copy(_actor_variables, _token_1, & _out_1);
      libcal_printf("action MPEG4_algo_IAP_16x16_copy: put value %i to QF_AC\n", _out_1);
      QF_AC->put(_out_1);
      libcal_printf("action MPEG4_algo_IAP_16x16_copy: put to QF_AC OK\n");
      fsm_state = 2;
    }
    break;
    }
    }
  }
}
}

}
