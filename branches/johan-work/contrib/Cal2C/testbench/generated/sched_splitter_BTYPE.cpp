#include <systemc.h>
#include <tlm.h>
#include "sched_splitter_BTYPE.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct splitter_BTYPE_variables {

};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void splitter_BTYPE_cmd_dot_newVop(struct splitter_BTYPE_variables *_actor_variables ,
                                   int cmd , int *Y , int *U , int *V ) ;
void splitter_BTYPE_cmd_dot_split(struct splitter_BTYPE_variables *_actor_variables ,
                                  int list[6] , int Y[4] , int *U , int *V ) ;
void splitter_BTYPE_skip(struct splitter_BTYPE_variables *_actor_variables , int cmd[2] ,
                         int Y[2] , int U[2] , int V[2] ) ;

#ifdef __cplusplus
}
#endif

void sched_splitter_BTYPE::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _out_1[4] ;
  int _out_2 ;
  int _out_3 ;
  int _token_2 ;
  int _out_4 ;
  int _out_5 ;
  int _out_6 ;
  int _token_3 ;
  int _out_7[2] ;
  int _out_8[2] ;
  int _out_9[2] ;
  int _call_15 ;
  int i ;
  int _list_17[6] ;
  int _call_18 ;
  int _list_19[4] ;
  int _list_20[2] ;
  int _call_21 ;
  int _list_22[2] ;
  int _list_23[2] ;
  int _list_24[2] ;
  struct splitter_BTYPE_variables *_actor_variables ;

  {
  _actor_variables = (struct splitter_BTYPE_variables *)malloc(sizeof(struct splitter_BTYPE_variables ));
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: get from btype\n");
      _call_15 = btype->get();
      _token_2 = _call_15;
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: got %i from btype\n", _token_2);
      splitter_BTYPE_cmd_dot_newVop(_actor_variables, _token_2, & _out_4, & _out_5,
                                    & _out_6);
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put value %i to Y\n", _out_4);
      Y->put(_out_4);
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put to Y OK\n");
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put value %i to U\n", _out_5);
      U->put(_out_5);
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put to U OK\n");
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put value %i to V\n", _out_6);
      V->put(_out_6);
      libcal_printf("action splitter_BTYPE_cmd_dot_newVop: put to V OK\n");
      fsm_state = 2;
    } else {
      i = 0;
      while (i < 6) {
        libcal_printf("action splitter_BTYPE_cmd_dot_split: get from btype\n");
        _call_18 = btype->get();
        _token_1 = _call_18;
        libcal_printf("action splitter_BTYPE_cmd_dot_split: got %i from btype\n",
                      _token_1);
        _list_17[1 * i + 0] = _token_1;
        i ++;
      }
      splitter_BTYPE_cmd_dot_split(_actor_variables, _list_17, _out_1, & _out_2, & _out_3);
      i = 0;
      while (i < 4) {
        libcal_printf("action splitter_BTYPE_cmd_dot_split: put value %i to Y\n",
                      _out_1[i]);
        Y->put(_out_1[i]);
        libcal_printf("action splitter_BTYPE_cmd_dot_split: put to Y OK\n");
        _list_19[1 * i + 0] = 0;
        i ++;
      }
      libcal_printf("action splitter_BTYPE_cmd_dot_split: put value %i to U\n", _out_2);
      U->put(_out_2);
      libcal_printf("action splitter_BTYPE_cmd_dot_split: put to U OK\n");
      libcal_printf("action splitter_BTYPE_cmd_dot_split: put value %i to V\n", _out_3);
      V->put(_out_3);
      libcal_printf("action splitter_BTYPE_cmd_dot_split: put to V OK\n");
      fsm_state = 1;
    }
    break;
    }
    case 2: 
    {
    i = 0;
    while (i < 2) {
      libcal_printf("action splitter_BTYPE_skip: get from btype\n");
      _call_21 = btype->get();
      _token_3 = _call_21;
      libcal_printf("action splitter_BTYPE_skip: got %i from btype\n", _token_3);
      _list_20[1 * i + 0] = _token_3;
      i ++;
    }
    splitter_BTYPE_skip(_actor_variables, _list_20, _out_7, _out_8, _out_9);
    i = 0;
    while (i < 2) {
      libcal_printf("action splitter_BTYPE_skip: put value %i to Y\n", _out_7[i]);
      Y->put(_out_7[i]);
      libcal_printf("action splitter_BTYPE_skip: put to Y OK\n");
      _list_22[1 * i + 0] = 0;
      i ++;
    }
    i = 0;
    while (i < 2) {
      libcal_printf("action splitter_BTYPE_skip: put value %i to U\n", _out_8[i]);
      U->put(_out_8[i]);
      libcal_printf("action splitter_BTYPE_skip: put to U OK\n");
      _list_23[1 * i + 0] = 0;
      i ++;
    }
    i = 0;
    while (i < 2) {
      libcal_printf("action splitter_BTYPE_skip: put value %i to V\n", _out_9[i]);
      V->put(_out_9[i]);
      libcal_printf("action splitter_BTYPE_skip: put to V OK\n");
      _list_24[1 * i + 0] = 0;
      i ++;
    }
    fsm_state = 1;
    break;
    }
    }
  }
}
}

}
