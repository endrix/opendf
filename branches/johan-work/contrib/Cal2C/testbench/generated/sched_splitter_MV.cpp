#include <systemc.h>
#include <tlm.h>
#include "sched_splitter_MV.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct splitter_MV_variables {

};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void splitter_MV_B1(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int Y[2] ) ;
void splitter_MV_B2(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int Y[2] ) ;
void splitter_MV_B3(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int Y[2] ) ;
void splitter_MV_B4(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int Y[2] ) ;
void splitter_MV_B5(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int U[2] ) ;
void splitter_MV_B6(struct splitter_MV_variables *_actor_variables , int mv[2] , int btype ,
                    int V[2] ) ;
void splitter_MV_newvop(struct splitter_MV_variables *_actor_variables , int cmd ) ;
void splitter_MV_skip(struct splitter_MV_variables *_actor_variables , int btype[2] ) ;
void splitter_MV_skipbtype(struct splitter_MV_variables *_actor_variables , int btype ) ;

#ifdef __cplusplus
}
#endif

void sched_splitter_MV::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _out_1[2] ;
  int _token_4 ;
  int _token_5 ;
  int _token_6 ;
  int _out_2[2] ;
  int _token_7 ;
  int _token_8 ;
  int _token_9 ;
  int _out_3[2] ;
  int _token_10 ;
  int _token_11 ;
  int _token_12 ;
  int _out_4[2] ;
  int _token_13 ;
  int _token_14 ;
  int _token_15 ;
  int _out_5[2] ;
  int _token_16 ;
  int _token_17 ;
  int _token_18 ;
  int _out_6[2] ;
  int _token_19 ;
  int _token_20 ;
  int _call_29 ;
  int i ;
  int _list_31[2] ;
  int _call_32 ;
  int _call_33 ;
  int _list_34[2] ;
  int _call_35 ;
  int _list_36[2] ;
  int _call_37 ;
  int _call_38 ;
  int _list_39[2] ;
  int _call_40 ;
  int _list_41[2] ;
  int _call_42 ;
  int _call_43 ;
  int _list_44[2] ;
  int _call_45 ;
  int _list_46[2] ;
  int _call_47 ;
  int _call_48 ;
  int _list_49[2] ;
  int _call_50 ;
  int _list_51[2] ;
  int _call_52 ;
  int _call_53 ;
  int _list_54[2] ;
  int _call_55 ;
  int _list_56[2] ;
  int _call_57 ;
  int _call_58 ;
  int _list_59[2] ;
  int _call_60 ;
  int _list_61[2] ;
  int _call_62 ;
  struct splitter_MV_variables *_actor_variables ;

  {
  _actor_variables = (struct splitter_MV_variables *)malloc(sizeof(struct splitter_MV_variables ));
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action splitter_MV_newvop: get from btype\n");
      _call_29 = btype->get();
      _token_19 = _call_29;
      libcal_printf("action splitter_MV_newvop: got %i from btype\n", _token_19);
      splitter_MV_newvop(_actor_variables, _token_19);
      fsm_state = 7;
    } else {
      if ((btype->peek() & 8) != 0) {
        i = 0;
        while (i < 2) {
          libcal_printf("action splitter_MV_B1: get from MV\n");
          _call_32 = MV->get();
          _token_17 = _call_32;
          libcal_printf("action splitter_MV_B1: got %i from MV\n", _token_17);
          _list_31[1 * i + 0] = _token_17;
          i ++;
        }
        libcal_printf("action splitter_MV_B1: get from btype\n");
        _call_33 = btype->get();
        _token_18 = _call_33;
        libcal_printf("action splitter_MV_B1: got %i from btype\n", _token_18);
        splitter_MV_B1(_actor_variables, _list_31, _token_18, _out_6);
        i = 0;
        while (i < 2) {
          libcal_printf("action splitter_MV_B1: put value %i to Y\n", _out_6[i]);
          Y->put(_out_6[i]);
          libcal_printf("action splitter_MV_B1: put to Y OK\n");
          _list_34[1 * i + 0] = 0;
          i ++;
        }
        fsm_state = 2;
      } else {
        if ((btype->peek() & 8) == 0) {
          libcal_printf("action splitter_MV_skipbtype: get from btype\n");
          _call_35 = btype->get();
          _token_16 = _call_35;
          libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_16);
          splitter_MV_skipbtype(_actor_variables, _token_16);
          fsm_state = 2;
        }
      }
    }
    break;
    }
    case 2: 
    {
    if ((btype->peek() & 8) != 0) {
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B2: get from MV\n");
        _call_37 = MV->get();
        _token_2 = _call_37;
        libcal_printf("action splitter_MV_B2: got %i from MV\n", _token_2);
        _list_36[1 * i + 0] = _token_2;
        i ++;
      }
      libcal_printf("action splitter_MV_B2: get from btype\n");
      _call_38 = btype->get();
      _token_3 = _call_38;
      libcal_printf("action splitter_MV_B2: got %i from btype\n", _token_3);
      splitter_MV_B2(_actor_variables, _list_36, _token_3, _out_1);
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B2: put value %i to Y\n", _out_1[i]);
        Y->put(_out_1[i]);
        libcal_printf("action splitter_MV_B2: put to Y OK\n");
        _list_39[1 * i + 0] = 0;
        i ++;
      }
      fsm_state = 3;
    } else {
      if ((btype->peek() & 8) == 0) {
        libcal_printf("action splitter_MV_skipbtype: get from btype\n");
        _call_40 = btype->get();
        _token_1 = _call_40;
        libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_1);
        splitter_MV_skipbtype(_actor_variables, _token_1);
        fsm_state = 3;
      }
    }
    break;
    }
    case 3: 
    {
    if ((btype->peek() & 8) != 0) {
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B3: get from MV\n");
        _call_42 = MV->get();
        _token_5 = _call_42;
        libcal_printf("action splitter_MV_B3: got %i from MV\n", _token_5);
        _list_41[1 * i + 0] = _token_5;
        i ++;
      }
      libcal_printf("action splitter_MV_B3: get from btype\n");
      _call_43 = btype->get();
      _token_6 = _call_43;
      libcal_printf("action splitter_MV_B3: got %i from btype\n", _token_6);
      splitter_MV_B3(_actor_variables, _list_41, _token_6, _out_2);
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B3: put value %i to Y\n", _out_2[i]);
        Y->put(_out_2[i]);
        libcal_printf("action splitter_MV_B3: put to Y OK\n");
        _list_44[1 * i + 0] = 0;
        i ++;
      }
      fsm_state = 4;
    } else {
      if ((btype->peek() & 8) == 0) {
        libcal_printf("action splitter_MV_skipbtype: get from btype\n");
        _call_45 = btype->get();
        _token_4 = _call_45;
        libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_4);
        splitter_MV_skipbtype(_actor_variables, _token_4);
        fsm_state = 4;
      }
    }
    break;
    }
    case 4: 
    {
    if ((btype->peek() & 8) != 0) {
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B4: get from MV\n");
        _call_47 = MV->get();
        _token_8 = _call_47;
        libcal_printf("action splitter_MV_B4: got %i from MV\n", _token_8);
        _list_46[1 * i + 0] = _token_8;
        i ++;
      }
      libcal_printf("action splitter_MV_B4: get from btype\n");
      _call_48 = btype->get();
      _token_9 = _call_48;
      libcal_printf("action splitter_MV_B4: got %i from btype\n", _token_9);
      splitter_MV_B4(_actor_variables, _list_46, _token_9, _out_3);
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B4: put value %i to Y\n", _out_3[i]);
        Y->put(_out_3[i]);
        libcal_printf("action splitter_MV_B4: put to Y OK\n");
        _list_49[1 * i + 0] = 0;
        i ++;
      }
      fsm_state = 5;
    } else {
      if ((btype->peek() & 8) == 0) {
        libcal_printf("action splitter_MV_skipbtype: get from btype\n");
        _call_50 = btype->get();
        _token_7 = _call_50;
        libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_7);
        splitter_MV_skipbtype(_actor_variables, _token_7);
        fsm_state = 5;
      }
    }
    break;
    }
    case 5: 
    {
    if ((btype->peek() & 8) != 0) {
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B5: get from MV\n");
        _call_52 = MV->get();
        _token_11 = _call_52;
        libcal_printf("action splitter_MV_B5: got %i from MV\n", _token_11);
        _list_51[1 * i + 0] = _token_11;
        i ++;
      }
      libcal_printf("action splitter_MV_B5: get from btype\n");
      _call_53 = btype->get();
      _token_12 = _call_53;
      libcal_printf("action splitter_MV_B5: got %i from btype\n", _token_12);
      splitter_MV_B5(_actor_variables, _list_51, _token_12, _out_4);
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B5: put value %i to U\n", _out_4[i]);
        U->put(_out_4[i]);
        libcal_printf("action splitter_MV_B5: put to U OK\n");
        _list_54[1 * i + 0] = 0;
        i ++;
      }
      fsm_state = 6;
    } else {
      if ((btype->peek() & 8) == 0) {
        libcal_printf("action splitter_MV_skipbtype: get from btype\n");
        _call_55 = btype->get();
        _token_10 = _call_55;
        libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_10);
        splitter_MV_skipbtype(_actor_variables, _token_10);
        fsm_state = 6;
      }
    }
    break;
    }
    case 6: 
    {
    if ((btype->peek() & 8) != 0) {
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B6: get from MV\n");
        _call_57 = MV->get();
        _token_14 = _call_57;
        libcal_printf("action splitter_MV_B6: got %i from MV\n", _token_14);
        _list_56[1 * i + 0] = _token_14;
        i ++;
      }
      libcal_printf("action splitter_MV_B6: get from btype\n");
      _call_58 = btype->get();
      _token_15 = _call_58;
      libcal_printf("action splitter_MV_B6: got %i from btype\n", _token_15);
      splitter_MV_B6(_actor_variables, _list_56, _token_15, _out_5);
      i = 0;
      while (i < 2) {
        libcal_printf("action splitter_MV_B6: put value %i to V\n", _out_5[i]);
        V->put(_out_5[i]);
        libcal_printf("action splitter_MV_B6: put to V OK\n");
        _list_59[1 * i + 0] = 0;
        i ++;
      }
      fsm_state = 1;
    } else {
      if ((btype->peek() & 8) == 0) {
        libcal_printf("action splitter_MV_skipbtype: get from btype\n");
        _call_60 = btype->get();
        _token_13 = _call_60;
        libcal_printf("action splitter_MV_skipbtype: got %i from btype\n", _token_13);
        splitter_MV_skipbtype(_actor_variables, _token_13);
        fsm_state = 1;
      }
    }
    break;
    }
    case 7: 
    {
    i = 0;
    while (i < 2) {
      libcal_printf("action splitter_MV_skip: get from btype\n");
      _call_62 = btype->get();
      _token_20 = _call_62;
      libcal_printf("action splitter_MV_skip: got %i from btype\n", _token_20);
      _list_61[1 * i + 0] = _token_20;
      i ++;
    }
    splitter_MV_skip(_actor_variables, _list_61);
    fsm_state = 1;
    break;
    }
    }
  }
}
}

}
