<?xml version="1.0" encoding="UTF-8"?>

<!-- 
    xdfSynthChecks.xml
    Synthesizability checks for the completed XDF network.
-->

<sch:schema
   xmlns:sch="http://www.ascc.net/xml/schematron"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
   xmlns:cal="java:net.sf.opendf.xslt.cal.CalmlEvaluator"
   defaultPhase="general" >
  
  <sch:phase id="general">
    <sch:active pattern="xdfSynthesis"/>
  </sch:phase> 
 
  <sch:pattern id="xdfSynthesis">

    <sch:rule context="Connection[not(@dst='') and not(@src='')]">
      <xsl:variable name="conn" select="."/>

      <sch:assert role="Error" id="unknownDestinationPort"
                  test="../Instance[@id=$conn/@dst]/Actor/Port[@name=$conn/@dst-port] or 
                  ../HDL/Port[@name=$conn/@dst-port]">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="." mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        Unknown destination port
      </sch:assert>
      
      <sch:assert role="Error" id="unknownSourcePort"
        test="../Instance[@id=$conn/@src]/Actor/Port[@name=$conn/@src-port] or
        ../HDL/Port[@name=$conn/@src-port]">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="." mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        Unknown source port
      </sch:assert>
      
      <xsl:variable name="dstType" select="../Instance[@id=$conn/@dst]/Actor/Port[@name=$conn/@dst-port]/Type"/>
      <xsl:variable name="srcType" select="../Instance[@id=$conn/@src]/Actor/Port[@name=$conn/@src-port]/Type"/>
      <sch:assert role="Error" id="typeMismatch"
                  test="$srcType/@name = $dstType/@name or
                  ../HDL[@id=$conn/@dst]/Port[@name=$conn/@dst-port]">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="." mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        Mismatched types in network connection
      </sch:assert>

      <xsl:variable name="srcSize" select="$srcType/Entry[@name='size']/Expr[@kind='Literal']/@value"/>
      <xsl:variable name="dstSize" select="$dstType/Entry[@name='size']/Expr[@kind='Literal']/@value"/>
      <sch:assert role="Error" id="sizeMismatch"
                  test="$dstType/@name='bool' or $srcType/@name='bool' or $srcSize = $dstSize or
                  ../HDL[@id=$conn/@dst]/Port[@name=$conn/@dst-port]">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="." mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        Mismatched sizes in network connection
      </sch:assert>

    </sch:rule>

    <sch:rule context="Actor/Port">
      <xsl:variable name="portName" select="@name"/>
      <xsl:variable name="instId" select="../../@id"/>
      
      <sch:assert role="Error" id="sizeMissing"
                  test="./Type/@name='bool' or ./Type/Entry[@name='size']">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="." mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        Port size missing
      </sch:assert>
  
      <!-- Check fan-in on input ports-->      
      <sch:assert role="Error" id="fanin.actor" test="@kind='Output' or count(../../../Connection[@dst=$instId][@dst-port=$portName]) &lt; 2">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="parent::*" mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        <xsl:text>Actor input port has fan-in: </xsl:text><xsl:value-of select="$portName"/>
      </sch:assert>
      
    </sch:rule>
    
    
    <!-- Check Network Ports -->
    <sch:rule context="XDF/Port[@kind='Output']">
      <xsl:variable name="portName" select="@name"/>
      
      <sch:assert role="Error" id="fanin.network" test="count(../Connection[@dst=''][@dst-port=$portName]) &lt; 2">
        <xsl:attribute name="subject">
          <xsl:apply-templates select="parent::*" mode="report-offender"/>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="annotate-location"/>
        <xsl:text>Network output port has fan-in: </xsl:text><xsl:value-of select="$portName"/>
      </sch:assert>
      
    </sch:rule>
    
  </sch:pattern>
  
</sch:schema>