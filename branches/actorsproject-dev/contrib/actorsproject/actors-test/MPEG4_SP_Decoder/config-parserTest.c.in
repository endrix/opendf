#include "actors-rts.h"

enum Fifos{
  ParseHeaders_0_BTYPE,
  ParseHeaders_0_MV,
  ParseHeaders_0_RUN,
  ParseHeaders_0_VALUE,
  ParseHeaders_0_LAST,
  MVSequence_0_A,
  BlockExpand_0_OUT,
  MVReconstruct_0_MV,
  art_Source_bin_0_Out,
  byte2bit_0_out,
  numberOfFifos
};

static int ActorClass_ParseHeaders_0_Out[]={ParseHeaders_0_BTYPE, ParseHeaders_0_MV, ParseHeaders_0_RUN, ParseHeaders_0_VALUE, ParseHeaders_0_LAST};
static int ActorClass_ParseHeaders_0_In[]={byte2bit_0_out};

static int ActorClass_MVSequence_0_Out[]={MVSequence_0_A};
static int ActorClass_MVSequence_0_In[]={ParseHeaders_0_BTYPE};

static int ActorClass_BlockExpand_0_Out[]={BlockExpand_0_OUT};
static int ActorClass_BlockExpand_0_In[]={ParseHeaders_0_RUN, ParseHeaders_0_VALUE, ParseHeaders_0_LAST};

static int ActorClass_MVReconstruct_0_Out[]={MVReconstruct_0_MV};
static int ActorClass_MVReconstruct_0_In[]={ParseHeaders_0_BTYPE, ParseHeaders_0_MV, MVSequence_0_A};

static int ActorClass_art_Source_bin_0_Out[]={art_Source_bin_0_Out};
static int ActorClass_art_Source_bin_0_In[]={};

static int ActorClass_byte2bit_0_Out[]={byte2bit_0_out};
static int ActorClass_byte2bit_0_In[]={art_Source_bin_0_Out};

static int ActorClass_art_Sink_txt_0_Out[]={};
static int ActorClass_art_Sink_txt_0_In[]={ParseHeaders_0_BTYPE};

static int ActorClass_art_Sink_txt_1_Out[]={};
static int ActorClass_art_Sink_txt_1_In[]={BlockExpand_0_OUT};

static int ActorClass_art_Sink_txt_2_Out[]={};
static int ActorClass_art_Sink_txt_2_In[]={MVReconstruct_0_MV};



extern ActorClass ActorClass_ParseHeaders_0;
extern ActorClass ActorClass_MVSequence_0;
extern ActorClass ActorClass_BlockExpand_0;
extern ActorClass ActorClass_MVReconstruct_0;
extern ActorClass ActorClass_art_Source_bin;
extern ActorClass ActorClass_byte2bit_0;
extern ActorClass ActorClass_art_Sink_txt;
extern ActorClass ActorClass_art_Sink_txt;
extern ActorClass ActorClass_art_Sink_txt;

static ActorConfig actorConfig_ParseHeaders_0={
   &ActorClass_ParseHeaders_0,
   ActorClass_ParseHeaders_0_In,
   ActorClass_ParseHeaders_0_Out
};

static ActorConfig actorConfig_MVSequence_0={
   &ActorClass_MVSequence_0,
   ActorClass_MVSequence_0_In,
   ActorClass_MVSequence_0_Out
};

static ActorConfig actorConfig_BlockExpand_0={
   &ActorClass_BlockExpand_0,
   ActorClass_BlockExpand_0_In,
   ActorClass_BlockExpand_0_Out
};

static ActorConfig actorConfig_MVReconstruct_0={
   &ActorClass_MVReconstruct_0,
   ActorClass_MVReconstruct_0_In,
   ActorClass_MVReconstruct_0_Out
};

static ActorParameter para_art_Source_bin_0[]={
  { "fileName", "@datadir@/actors-test/MPEG4_SP_Decoder/input/parserTest/bits.bin"}
};

static ActorConfig actorConfig_art_Source_bin_0={
   &ActorClass_art_Source_bin,
   ActorClass_art_Source_bin_0_In,
   ActorClass_art_Source_bin_0_Out,
   1,
   para_art_Source_bin_0
};

static ActorConfig actorConfig_byte2bit_0={
   &ActorClass_byte2bit_0,
   ActorClass_byte2bit_0_In,
   ActorClass_byte2bit_0_Out
};

static ActorParameter para_art_Sink_txt_0[]={
  { "fileName", "./output/parserTest/BTYPE.txt"}
};

static ActorConfig actorConfig_art_Sink_txt_0={
   &ActorClass_art_Sink_txt,
   ActorClass_art_Sink_txt_0_In,
   ActorClass_art_Sink_txt_0_Out,
   1,
   para_art_Sink_txt_0
};

static ActorParameter para_art_Sink_txt_1[]={
  { "fileName", "./output/parserTest/B.txt"}
};

static ActorConfig actorConfig_art_Sink_txt_1={
   &ActorClass_art_Sink_txt,
   ActorClass_art_Sink_txt_1_In,
   ActorClass_art_Sink_txt_1_Out,
   1,
   para_art_Sink_txt_1
};

static ActorParameter para_art_Sink_txt_2[]={
  { "fileName", "./output/parserTest/MV.txt"}
};

static ActorConfig actorConfig_art_Sink_txt_2={
   &ActorClass_art_Sink_txt,
   ActorClass_art_Sink_txt_2_In,
   ActorClass_art_Sink_txt_2_Out,
   1,
   para_art_Sink_txt_2
};


static ActorConfig *actors []={
   &actorConfig_ParseHeaders_0, 
   &actorConfig_MVSequence_0, 
   &actorConfig_BlockExpand_0, 
   &actorConfig_MVReconstruct_0, 
   &actorConfig_art_Source_bin_0, 
   &actorConfig_byte2bit_0, 
   &actorConfig_art_Sink_txt_0, 
   &actorConfig_art_Sink_txt_1, 
   &actorConfig_art_Sink_txt_2 
};

static NetworkConfig networkConfig = {
  actors,
   sizeof(actors)/sizeof(ActorConfig*),
  numberOfFifos
};

int main(int argc, char *argv[]) {
  return execute_network(argc, argv, &networkConfig);
};

