actor scaled_1d_idct (int IN_SZ, int OUT_SZ) int (size=IN_SZ) In ==> int (size=OUT_SZ) Out : 
  function pmul_1 (int X)
    var int (size=16) Temp1 = rshift(X, 3) - rshift(X, 7),
        int (size=16) Temp2 = Temp1 - rshift(X, 11),
        int (size=16) Y = X - Temp1,
		int (size=16) Z = Temp1 + rshift(Temp2, 1)
        :
    [Y, Z]
  end

  function pmul_2 (int X)
    var int (size=16) Temp1 = rshift(X, 9) - X,
        int (size=16) Y = rshift(Temp1, 2) - Temp1,
        int (size=16) Z = rshift(X, 1):
    [Y, Z]
  end

  function pmul_3 (int X)
    var int (size=16) Temp1 = X + rshift(X, 5),
        int (size=16) Temp2 = rshift(Temp1, 2),
	int (size=16) Y = Temp2 + rshift(X, 4),
        int (size=16) Z = Temp1 - Temp2:
    [Y, Z]
  end       
        
action In: [x] repeat 8 ==> Out: [y] repeat 8
  var list (type: int (size=14), size=2) L1,
      list (type: int (size=14), size=2) L2,
      int xa,
      int xb,
      list (type: int) y
  do
    xa := x[1] + x[7];
    xb := x[1] - x[7];
    x[1] := xa + x[3];
    x[3] := xa - x[3];
    x[7] := xb + x[5];
    x[5] := xb - x[5];

    L1 := pmul_1(x[3]);
    L2 := pmul_1(x[5]);

    x[3] := L1[0] - L2[1];
    x[5] := L2[0] + L1[1];
    
    L1 := pmul_2(x[1]);
    L2 := pmul_2(x[7]);

    x[1] := L1[0] + L2[1];
    x[7] := L2[0] - L1[1];
    
    L1 := pmul_3(x[2]);
    L2 := pmul_3(x[6]);

    x[2] := L1[0] - L2[1];
    x[6] := L2[0] + L1[1];

    xa := x[0] + x[4];
    xb := x[0] - x[4];

    x[0] := xa + x[6];
    x[6] := xa - x[6];

    x[4] := xb + x[2];
    x[2] := xb - x[2];

    y := [x[0] + x[1], x[4] + x[5], x[2] + x[3], x[6] + x[7], x[6] - x[7], x[2] - x[3], x[4] - x[5], x[0] - x[1]];

  end
end


      
     
