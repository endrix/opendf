// GEN_algo_Clip.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

// Author: Matthieu Wipliez (mwipliez@insa-rennes.fr)
// Rewrote the actor at block-level

// ECARVON: comprehension -> loop

// Limit pixel value to either [0,255] or [-255,255]

actor GEN_algo_Clip ( int isz, int osz ) int(size=isz) I, bool SIGNED ==> int(size=osz) O :

  bool sflag;

  read_signed: action SIGNED:[s] ==>
  do
    sflag := s;
  end

  clip: action I:[ x ] repeat 64 ==> O:[ y ] repeat 64
  var
    List(type:int(size=osz), size=64) y = [ 0: for k in Integers(0,63) ],
    int min=if (sflag) then -255 else 0 end,
    int i:=0
  do
    while (i<64) do
      y[i]:=if x[i]>255 then
              255
            else
              if x[i]<min then
                min
              else
                x[i]
              end
            end;
      i:=i+1;
    end
  end     

  schedule fsm set_sign:
    set_sign (read_signed) --> clip;
    clip (clip) --> set_sign;
  end
end
