
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Feb 14 20:24:23 PST 2008
//----------------------------------------------------

package net.sf.opendf.nl.parser;

import java_cup.runtime.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.util.*;
import net.sf.opendf.util.source.ParserErrorException;
import net.sf.opendf.util.source.GenericError;

/** CUP v0.10k generated parser.
  * @version Thu Feb 14 20:24:23 PST 2008
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\002\003\017\000\002\002\004\000\002\005" +
    "\002\000\002\005\003\000\002\006\003\000\002\006\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\013\003\000\002\013\004\000\002\014\004\000\002\014" +
    "\003\000\002\004\016\000\002\011\004\000\002\015\002" +
    "\000\002\015\003\000\002\016\003\000\002\016\004\000" +
    "\002\017\010\000\002\017\007\000\002\033\002\000\002" +
    "\033\003\000\002\034\003\000\002\034\004\000\002\035" +
    "\004\000\002\035\005\000\002\036\007\000\002\036\011" +
    "\000\002\036\006\000\002\037\003\000\002\037\005\000" +
    "\002\040\002\000\002\040\003\000\002\042\005\000\002" +
    "\042\007\000\002\012\004\000\002\020\002\000\002\020" +
    "\003\000\002\021\003\000\002\021\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\007\000" +
    "\002\026\003\000\002\026\005\000\002\027\004\000\002" +
    "\030\004\000\002\031\002\000\002\031\003\000\002\032" +
    "\005\000\002\032\006\000\002\043\002\000\002\043\005" +
    "\000\002\044\003\000\002\044\004\000\002\045\006\000" +
    "\002\045\006\000\002\024\007\000\002\024\011\000\002" +
    "\025\006\000\002\053\003\000\002\053\005\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\056\003" +
    "\000\002\056\005\000\002\057\003\000\002\057\005\000" +
    "\002\060\002\000\002\060\003\000\002\061\003\000\002" +
    "\061\005\000\002\062\003\000\002\062\004\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\063\003" +
    "\000\002\063\005\000\002\065\014\000\002\065\005\000" +
    "\002\066\002\000\002\066\004\000\002\067\013\000\002" +
    "\067\005\000\002\070\003\000\002\070\005\000\002\070" +
    "\005\000\002\070\006\000\002\071\003\000\002\071\004" +
    "\000\002\072\005\000\002\072\005\000\002\073\003\000" +
    "\002\073\005\000\002\074\002\000\002\074\003\000\002" +
    "\075\005\000\002\076\005\000\002\077\003\000\002\077" +
    "\005\000\002\100\002\000\002\100\003\000\002\101\003" +
    "\000\002\102\003\000\002\102\005\000\002\103\002\000" +
    "\002\103\003\000\002\124\003\000\002\124\003\000\002" +
    "\125\003\000\002\125\005\000\002\126\002\000\002\126" +
    "\003\000\002\104\005\000\002\104\005\000\002\105\011" +
    "\000\002\105\005\000\002\106\013\000\002\107\007\000" +
    "\002\107\005\000\002\110\004\000\002\110\006\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\113\005\000\002\113\007\000\002\114\003\000" +
    "\002\114\006\000\002\114\006\000\002\114\005\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\115\005\000" +
    "\002\116\012\000\002\116\005\000\002\117\004\000\002" +
    "\117\006\000\002\122\003\000\002\122\004\000\002\123" +
    "\003\000\002\123\004\000\002\133\005\000\002\133\006" +
    "\000\002\132\003\000\002\132\005\000\002\132\005\000" +
    "\002\134\002\000\002\134\004\000\002\135\002\000\002" +
    "\135\004\000\002\136\003\000\002\136\004\000\002\137" +
    "\002\000\002\137\003\000\002\140\007\000\002\140\006" +
    "\000\002\140\010\000\002\140\005\000\002\141\002\000" +
    "\002\141\003\000\002\141\003\000\002\141\003\000\002" +
    "\142\005\000\002\143\003\000\002\143\005\000\002\146" +
    "\004\000\002\146\005\000\002\147\003\000\002\147\005" +
    "\000\002\150\002\000\002\150\003\000\002\151\004\000" +
    "\002\151\005\000\002\152\003\000\002\152\005\000\002" +
    "\153\002\000\002\153\003\000\002\156\003\000\002\156" +
    "\003\000\002\156\003\000\002\156\003\000\002\156\003" +
    "\000\002\156\003\000\002\156\003\000\002\156\003\000" +
    "\002\156\003\000\002\156\004\000\002\157\003\000\002" +
    "\157\004\000\002\160\002\000\002\160\003\000\002\161" +
    "\006\000\002\162\003\000\002\162\006\000\002\162\005" +
    "\000\002\165\010\000\002\165\005\000\002\163\007\000" +
    "\002\163\005\000\002\163\005\000\002\164\007\000\002" +
    "\166\007\000\002\166\005\000\002\167\004\000\002\167" +
    "\005\000\002\170\005\000\002\170\004\000\002\170\004" +
    "\000\002\171\007\000\002\171\011\000\002\172\010\000" +
    "\002\172\005\000\002\173\003\000\002\173\003\000\002" +
    "\173\003\000\002\174\005\000\002\174\006\000\002\174" +
    "\007\000\002\176\006\000\002\177\003\000\002\177\005" +
    "\000\002\200\002\000\002\200\004\000\002\200\005\000" +
    "\002\201\003\000\002\201\005\000\002\202\003\000\002" +
    "\203\005\000\002\204\003\000\002\127\003\000\002\130" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\232\003\000" +
    "\002\232\003\000\002\233\003\000\002\154\004\000\002" +
    "\155\002\000\002\155\005\000\002\234\003\000\002\234" +
    "\003\000\002\205\002\000\002\205\004\000\002\207\002" +
    "\000\002\207\003\000\002\210\002\000\002\210\004\000" +
    "\002\046\003\000\002\211\003\000\002\211\003\000\002" +
    "\212\003\000\002\212\003\000\002\213\003\000\002\213" +
    "\003\000\002\214\003\000\002\214\003\000\002\215\003" +
    "\000\002\215\003\000\002\216\003\000\002\216\003\000" +
    "\002\221\003\000\002\221\003\000\002\222\003\000\002" +
    "\222\003\000\002\224\003\000\002\224\003\000\002\225" +
    "\003\000\002\225\003\000\002\227\003\000\002\227\003" +
    "\000\002\230\003\000\002\230\003\000\002\235\002\000" +
    "\002\235\004\000\002\236\002\000\002\236\003\000\002" +
    "\237\002\000\002\237\003\000\002\206\002\000\002\206" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u020d\000\004\015\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\014\126\u020d\130\ufef1\134\ufef1\135\ufef1\144\ufef1\001" +
    "\002\000\006\134\012\135\uff11\001\002\000\004\135\u0160" +
    "\001\002\000\006\006\014\142\013\001\002\000\004\135" +
    "\uff10\001\002\000\132\004\ufef3\006\ufef3\010\ufef3\025\ufef3" +
    "\031\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\041\ufef3\046" +
    "\ufef3\047\ufef3\052\ufef3\053\ufef3\062\ufef3\072\ufef3\077\ufef3" +
    "\102\ufef3\105\ufef3\113\ufef3\114\ufef3\116\ufef3\120\ufef3\122" +
    "\ufef3\123\ufef3\124\ufef3\125\ufef3\126\ufef3\127\ufef3\130\ufef3" +
    "\131\ufef3\132\ufef3\133\ufef3\134\ufef3\135\ufef3\136\ufef3\137" +
    "\ufef3\140\ufef3\141\ufef3\142\ufef3\143\ufef3\144\ufef3\145\ufef3" +
    "\147\ufef3\001\002\000\006\123\u015d\142\u015e\001\002\000" +
    "\006\123\uff13\142\uff13\001\002\000\010\123\uff0e\136\021" +
    "\142\uff0e\001\002\000\010\123\uff0c\136\uff0c\142\uff0c\001" +
    "\002\000\006\006\014\134\024\001\002\000\022\006\uff19" +
    "\116\uff19\120\uff19\123\uff19\124\uff19\142\uff19\143\uff19\144" +
    "\uff19\001\002\000\006\123\uff0d\142\uff0d\001\002\000\012" +
    "\006\014\124\uff91\134\024\142\uff91\001\002\000\022\006" +
    "\uff1a\116\uff1a\120\uff1a\123\uff1a\124\uff1a\142\uff1a\143\uff1a" +
    "\144\uff1a\001\002\000\022\006\uff18\116\uff18\120\uff18\123" +
    "\uff18\124\uff18\142\uff18\143\uff18\144\uff18\001\002\000\022" +
    "\116\uff0a\120\uff0a\123\uff0a\124\uff0a\135\030\142\uff0a\143" +
    "\uff0a\144\uff0a\001\002\000\006\006\014\143\uff9c\001\002" +
    "\000\006\123\uff9e\143\uff9e\001\002\000\004\143\u0151\001" +
    "\002\000\006\123\u014f\143\uff9b\001\002\000\006\120\036" +
    "\130\035\001\002\000\114\004\060\005\051\006\014\007" +
    "\101\010\072\011\044\012\111\013\067\014\113\025\055" +
    "\035\065\037\077\063\121\070\071\074\112\075\100\076" +
    "\040\077\104\102\054\103\102\104\061\105\062\107\115" +
    "\115\076\124\117\127\066\130\042\131\123\132\045\133" +
    "\110\134\106\135\116\136\056\137\070\140\063\145\052" +
    "\147\103\001\002\000\006\006\014\134\024\001\002\000" +
    "\006\123\uffa0\143\uffa0\001\002\000\004\133\u0144\001\002" +
    "\000\122\004\uff6f\010\uff6f\025\uff6f\031\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\041\uff6f\046\uff6f\047\uff6f\052\uff6f" +
    "\053\uff6f\077\uff6f\102\uff6f\105\uff6f\113\uff6f\114\uff6f\116" +
    "\uff6f\120\uff6f\122\uff6f\123\uff6f\124\uff6f\125\uff6f\126\uff6f" +
    "\127\uff6f\130\uff6f\131\uff6f\132\uff6f\134\uff6f\135\uff6f\136" +
    "\uff6f\137\uff6f\140\uff6f\141\uff6f\142\uff6f\143\uff6f\144\uff6f" +
    "\145\uff6f\147\uff6f\001\002\000\114\004\ufefe\005\ufefe\006" +
    "\ufefe\007\ufefe\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014\ufefe" +
    "\025\ufefe\035\ufefe\037\ufefe\063\ufefe\070\ufefe\074\ufefe\075" +
    "\ufefe\076\ufefe\077\ufefe\102\ufefe\103\ufefe\104\ufefe\105\ufefe" +
    "\107\ufefe\115\ufefe\124\ufefe\127\ufefe\130\ufefe\131\ufefe\132" +
    "\ufefe\133\ufefe\134\ufefe\135\ufefe\136\ufefe\137\ufefe\140\ufefe" +
    "\145\ufefe\147\ufefe\001\002\000\122\004\uff6e\010\uff6e\025" +
    "\uff6e\031\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e" +
    "\046\uff6e\047\uff6e\052\uff6e\053\uff6e\077\uff6e\102\uff6e\105" +
    "\uff6e\113\uff6e\114\uff6e\116\uff6e\120\uff6e\122\uff6e\123\uff6e" +
    "\124\uff6e\125\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e\132" +
    "\uff6e\134\uff6e\135\uff6e\136\uff6e\137\uff6e\140\uff6e\141\uff6e" +
    "\142\uff6e\143\uff6e\144\uff6e\145\uff6e\147\uff6e\001\002\000" +
    "\122\004\uff7c\010\uff7c\025\uff7c\031\uff7c\035\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\046\uff7c\047\uff7c\052\uff7c\053" +
    "\uff7c\077\uff7c\102\uff7c\105\uff7c\113\uff7c\114\uff7c\116\uff7c" +
    "\120\uff7c\122\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c\127" +
    "\uff7c\130\uff7c\131\uff7c\132\uff7c\134\uff7c\135\uff7c\136\uff7c" +
    "\137\uff7c\140\uff7c\141\uff7c\142\uff7c\143\uff7c\144\uff7c\145" +
    "\uff7c\147\uff7c\001\002\000\114\004\ufefd\005\ufefd\006\ufefd" +
    "\007\ufefd\010\ufefd\011\ufefd\012\ufefd\013\ufefd\014\ufefd\025" +
    "\ufefd\035\ufefd\037\ufefd\063\ufefd\070\ufefd\074\ufefd\075\ufefd" +
    "\076\ufefd\077\ufefd\102\ufefd\103\ufefd\104\ufefd\105\ufefd\107" +
    "\ufefd\115\ufefd\124\ufefd\127\ufefd\130\ufefd\131\ufefd\132\ufefd" +
    "\133\ufefd\134\ufefd\135\ufefd\136\ufefd\137\ufefd\140\ufefd\145" +
    "\ufefd\147\ufefd\001\002\000\112\004\060\010\072\025\055" +
    "\031\uff8e\035\065\036\uff8e\037\077\040\uff8e\041\uff8e\046" +
    "\uff8e\047\uff8e\052\uff8e\053\uff8e\077\104\102\054\105\062" +
    "\113\uff8e\114\uff8e\116\uff8e\120\uff8e\123\uff8e\124\117\125" +
    "\uff8e\127\066\130\042\131\123\132\045\136\056\137\070" +
    "\140\063\141\uff8e\142\uff8e\143\uff8e\144\uff8e\145\052\147" +
    "\103\001\002\000\122\004\uff7b\010\uff7b\025\uff7b\031\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\046\uff7b\047" +
    "\uff7b\052\uff7b\053\uff7b\077\uff7b\102\uff7b\105\uff7b\113\uff7b" +
    "\114\uff7b\116\uff7b\120\uff7b\122\uff7b\123\uff7b\124\uff7b\125" +
    "\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132\uff7b\134\uff7b" +
    "\135\uff7b\136\uff7b\137\uff7b\140\uff7b\141\uff7b\142\uff7b\143" +
    "\uff7b\144\uff7b\145\uff7b\147\uff7b\001\002\000\122\004\uff72" +
    "\010\uff72\025\uff72\031\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\046\uff72\047\uff72\052\uff72\053\uff72\077\uff72" +
    "\102\uff72\105\uff72\113\uff72\114\uff72\116\uff72\120\uff72\122" +
    "\uff72\123\uff72\124\uff72\125\uff72\126\uff72\127\uff72\130\uff72" +
    "\131\uff72\132\uff72\134\uff72\135\uff72\136\uff72\137\uff72\140" +
    "\uff72\141\uff72\142\uff72\143\uff72\144\uff72\145\uff72\147\uff72" +
    "\001\002\000\122\004\ufef5\010\ufef5\025\ufef5\031\ufef5\035" +
    "\ufef5\036\ufef5\037\ufef5\040\ufef5\041\ufef5\046\ufef5\047\ufef5" +
    "\052\ufef5\053\ufef5\077\ufef5\102\ufef5\105\ufef5\113\ufef5\114" +
    "\ufef5\116\ufef5\120\ufef5\122\ufef5\123\ufef5\124\ufef5\125\ufef5" +
    "\126\ufef5\127\ufef5\130\ufef5\131\ufef5\132\ufef5\134\ufef5\135" +
    "\ufef5\136\ufef5\137\ufef5\140\ufef5\141\ufef5\142\ufef5\143\ufef5" +
    "\144\ufef5\145\ufef5\147\ufef5\001\002\000\114\004\ufef8\005" +
    "\ufef8\006\ufef8\007\ufef8\010\ufef8\011\ufef8\012\ufef8\013\ufef8" +
    "\014\ufef8\025\ufef8\035\ufef8\037\ufef8\063\ufef8\070\ufef8\074" +
    "\ufef8\075\ufef8\076\ufef8\077\ufef8\102\ufef8\103\ufef8\104\ufef8" +
    "\105\ufef8\107\ufef8\115\ufef8\124\ufef8\127\ufef8\130\ufef8\131" +
    "\ufef8\132\ufef8\133\ufef8\134\ufef8\135\ufef8\136\ufef8\137\ufef8" +
    "\140\ufef8\145\ufef8\147\ufef8\001\002\000\122\004\uff73\010" +
    "\uff73\025\uff73\031\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\041\uff73\046\uff73\047\uff73\052\uff73\053\uff73\077\uff73\102" +
    "\uff73\105\uff73\113\uff73\114\uff73\116\uff73\120\uff73\122\uff73" +
    "\123\uff73\124\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131" +
    "\uff73\132\uff73\134\uff73\135\uff73\136\uff73\137\uff73\140\uff73" +
    "\141\uff73\142\uff73\143\uff73\144\uff73\145\uff73\147\uff73\001" +
    "\002\000\114\004\uff01\005\uff01\006\uff01\007\uff01\010\uff01" +
    "\011\uff01\012\uff01\013\uff01\014\uff01\025\uff01\035\uff01\037" +
    "\uff01\063\uff01\070\uff01\074\uff01\075\uff01\076\uff01\077\uff01" +
    "\102\uff01\103\uff01\104\uff01\105\uff01\107\uff01\115\uff01\124" +
    "\uff01\127\uff01\130\uff01\131\uff01\132\uff01\133\uff01\134\uff01" +
    "\135\uff01\136\uff01\137\uff01\140\uff01\145\uff01\147\uff01\001" +
    "\002\000\114\004\uff06\005\uff06\006\uff06\007\uff06\010\uff06" +
    "\011\uff06\012\uff06\013\uff06\014\uff06\025\uff06\035\uff06\037" +
    "\uff06\063\uff06\070\uff06\074\uff06\075\uff06\076\uff06\077\uff06" +
    "\102\uff06\103\uff06\104\uff06\105\uff06\107\uff06\115\uff06\124" +
    "\uff06\127\uff06\130\uff06\131\uff06\132\uff06\133\uff06\134\uff06" +
    "\135\uff06\136\uff06\137\uff06\140\uff06\145\uff06\147\uff06\001" +
    "\002\000\114\004\ufefc\005\ufefc\006\ufefc\007\ufefc\010\ufefc" +
    "\011\ufefc\012\ufefc\013\ufefc\014\ufefc\025\ufefc\035\ufefc\037" +
    "\ufefc\063\ufefc\070\ufefc\074\ufefc\075\ufefc\076\ufefc\077\ufefc" +
    "\102\ufefc\103\ufefc\104\ufefc\105\ufefc\107\ufefc\115\ufefc\124" +
    "\ufefc\127\ufefc\130\ufefc\131\ufefc\132\ufefc\133\ufefc\134\ufefc" +
    "\135\ufefc\136\ufefc\137\ufefc\140\ufefc\145\ufefc\147\ufefc\001" +
    "\002\000\122\004\uff6c\010\uff6c\025\uff6c\031\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\046\uff6c\047\uff6c\052" +
    "\uff6c\053\uff6c\077\uff6c\102\uff6c\105\uff6c\113\uff6c\114\uff6c" +
    "\116\uff6c\120\uff6c\122\uff6c\123\uff6c\124\uff6c\125\uff6c\126" +
    "\uff6c\127\uff6c\130\uff6c\131\uff6c\132\uff6c\134\uff6c\135\uff6c" +
    "\136\uff6c\137\uff6c\140\uff6c\141\uff6c\142\uff6c\143\uff6c\144" +
    "\uff6c\145\uff6c\147\uff6c\001\002\000\114\004\ufef6\005\ufef6" +
    "\006\ufef6\007\ufef6\010\ufef6\011\ufef6\012\ufef6\013\ufef6\014" +
    "\ufef6\025\ufef6\035\ufef6\037\ufef6\063\ufef6\070\ufef6\074\ufef6" +
    "\075\ufef6\076\ufef6\077\ufef6\102\ufef6\103\ufef6\104\ufef6\105" +
    "\ufef6\107\ufef6\115\ufef6\124\ufef6\127\ufef6\130\ufef6\131\ufef6" +
    "\132\ufef6\133\ufef6\134\ufef6\135\ufef6\136\ufef6\137\ufef6\140" +
    "\ufef6\145\ufef6\147\ufef6\001\002\000\004\006\014\001\002" +
    "\000\114\004\uff00\005\uff00\006\uff00\007\uff00\010\uff00\011" +
    "\uff00\012\uff00\013\uff00\014\uff00\025\uff00\035\uff00\037\uff00" +
    "\063\uff00\070\uff00\074\uff00\075\uff00\076\uff00\077\uff00\102" +
    "\uff00\103\uff00\104\uff00\105\uff00\107\uff00\115\uff00\124\uff00" +
    "\127\uff00\130\uff00\131\uff00\132\uff00\133\uff00\134\uff00\135" +
    "\uff00\136\uff00\137\uff00\140\uff00\145\uff00\147\uff00\001\002" +
    "\000\114\004\ufef9\005\ufef9\006\ufef9\007\ufef9\010\ufef9\011" +
    "\ufef9\012\ufef9\013\ufef9\014\ufef9\025\ufef9\035\ufef9\037\ufef9" +
    "\063\ufef9\070\ufef9\074\ufef9\075\ufef9\076\ufef9\077\ufef9\102" +
    "\ufef9\103\ufef9\104\ufef9\105\ufef9\107\ufef9\115\ufef9\124\ufef9" +
    "\127\ufef9\130\ufef9\131\ufef9\132\ufef9\133\ufef9\134\ufef9\135" +
    "\ufef9\136\ufef9\137\ufef9\140\ufef9\145\ufef9\147\ufef9\001\002" +
    "\000\122\004\uff6b\010\uff6b\025\uff6b\031\uff6b\035\uff6b\036" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\046\uff6b\047\uff6b\052\uff6b" +
    "\053\uff6b\077\uff6b\102\uff6b\105\uff6b\113\uff6b\114\uff6b\116" +
    "\uff6b\120\uff6b\122\uff6b\123\uff6b\124\uff6b\125\uff6b\126\uff6b" +
    "\127\uff6b\130\uff6b\131\uff6b\132\uff6b\134\uff6b\135\uff6b\136" +
    "\uff6b\137\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b\144\uff6b" +
    "\145\uff6b\147\uff6b\001\002\000\114\004\uff05\005\uff05\006" +
    "\uff05\007\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014\uff05" +
    "\025\uff05\035\uff05\037\uff05\063\uff05\070\uff05\074\uff05\075" +
    "\uff05\076\uff05\077\uff05\102\uff05\103\uff05\104\uff05\105\uff05" +
    "\107\uff05\115\uff05\124\uff05\127\uff05\130\uff05\131\uff05\132" +
    "\uff05\133\uff05\134\uff05\135\uff05\136\uff05\137\uff05\140\uff05" +
    "\145\uff05\147\uff05\001\002\000\114\004\uff03\005\uff03\006" +
    "\uff03\007\uff03\010\uff03\011\uff03\012\uff03\013\uff03\014\uff03" +
    "\025\uff03\035\uff03\037\uff03\063\uff03\070\uff03\074\uff03\075" +
    "\uff03\076\uff03\077\uff03\102\uff03\103\uff03\104\uff03\105\uff03" +
    "\107\uff03\115\uff03\124\uff03\127\uff03\130\uff03\131\uff03\132" +
    "\uff03\133\uff03\134\uff03\135\uff03\136\uff03\137\uff03\140\uff03" +
    "\145\uff03\147\uff03\001\002\000\122\004\ufef4\010\ufef4\025" +
    "\ufef4\031\ufef4\035\ufef4\036\ufef4\037\ufef4\040\ufef4\041\ufef4" +
    "\046\ufef4\047\ufef4\052\ufef4\053\ufef4\077\ufef4\102\ufef4\105" +
    "\ufef4\113\ufef4\114\ufef4\116\ufef4\120\ufef4\122\ufef4\123\ufef4" +
    "\124\ufef4\125\ufef4\126\ufef4\127\ufef4\130\ufef4\131\ufef4\132" +
    "\ufef4\134\ufef4\135\ufef4\136\ufef4\137\ufef4\140\ufef4\141\ufef4" +
    "\142\ufef4\143\ufef4\144\ufef4\145\ufef4\147\ufef4\001\002\000" +
    "\114\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa" +
    "\012\ufefa\013\ufefa\014\ufefa\025\ufefa\035\ufefa\037\ufefa\063" +
    "\ufefa\070\ufefa\074\ufefa\075\ufefa\076\ufefa\077\ufefa\102\ufefa" +
    "\103\ufefa\104\ufefa\105\ufefa\107\ufefa\115\ufefa\124\ufefa\127" +
    "\ufefa\130\ufefa\131\ufefa\132\ufefa\133\ufefa\134\ufefa\135\ufefa" +
    "\136\ufefa\137\ufefa\140\ufefa\145\ufefa\147\ufefa\001\002\000" +
    "\116\003\272\004\060\005\051\006\014\007\101\010\072" +
    "\011\044\012\111\013\067\014\113\025\055\035\065\037" +
    "\077\063\121\070\071\074\112\075\100\076\040\077\104" +
    "\102\054\103\102\104\061\105\062\107\115\115\076\124" +
    "\117\127\066\130\042\131\123\132\045\133\110\134\106" +
    "\135\116\136\056\137\070\140\063\145\052\147\103\001" +
    "\002\000\114\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07" +
    "\011\uff07\012\uff07\013\uff07\014\uff07\025\uff07\035\uff07\037" +
    "\uff07\063\uff07\070\uff07\074\uff07\075\uff07\076\uff07\077\uff07" +
    "\102\uff07\103\uff07\104\uff07\105\uff07\107\uff07\115\uff07\124" +
    "\uff07\127\uff07\130\uff07\131\uff07\132\uff07\133\uff07\134\uff07" +
    "\135\uff07\136\uff07\137\uff07\140\uff07\145\uff07\147\uff07\001" +
    "\002\000\120\004\uff65\010\uff65\025\uff65\031\uff65\035\uff65" +
    "\036\uff65\037\uff65\040\uff65\041\uff65\046\uff65\047\uff65\052" +
    "\uff65\053\uff65\077\uff65\102\uff65\105\uff65\113\uff65\114\uff65" +
    "\116\uff65\120\uff65\123\uff65\124\uff65\125\uff65\126\132\127" +
    "\uff65\130\uff65\131\uff65\132\uff65\134\131\135\130\136\uff65" +
    "\137\uff65\140\uff65\141\uff65\142\uff65\143\uff65\144\uff65\145" +
    "\uff65\147\uff65\001\002\000\006\123\uff9f\143\uff9f\001\002" +
    "\000\120\004\uff77\010\uff77\025\uff77\031\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\046\uff77\047\uff77\052\uff77" +
    "\053\uff77\077\uff77\102\uff77\105\uff77\113\uff77\114\uff77\116" +
    "\uff77\120\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127\uff77" +
    "\130\uff77\131\uff77\132\uff77\134\uff77\135\uff77\136\uff77\137" +
    "\uff77\140\uff77\141\uff77\142\uff77\143\uff77\144\uff77\145\uff77" +
    "\147\uff77\001\002\000\122\004\uff7a\010\uff7a\025\uff7a\031" +
    "\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\046\uff7a" +
    "\047\uff7a\052\uff7a\053\uff7a\077\uff7a\102\uff7a\105\uff7a\113" +
    "\uff7a\114\uff7a\116\uff7a\120\uff7a\122\uff7a\123\uff7a\124\uff7a" +
    "\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a\132\uff7a\134" +
    "\uff7a\135\uff7a\136\uff7a\137\uff7a\140\uff7a\141\uff7a\142\uff7a" +
    "\143\uff7a\144\uff7a\145\uff7a\147\uff7a\001\002\000\114\004" +
    "\uff04\005\uff04\006\uff04\007\uff04\010\uff04\011\uff04\012\uff04" +
    "\013\uff04\014\uff04\025\uff04\035\uff04\037\uff04\063\uff04\070" +
    "\uff04\074\uff04\075\uff04\076\uff04\077\uff04\102\uff04\103\uff04" +
    "\104\uff04\105\uff04\107\uff04\115\uff04\124\uff04\127\uff04\130" +
    "\uff04\131\uff04\132\uff04\133\uff04\134\uff04\135\uff04\136\uff04" +
    "\137\uff04\140\uff04\145\uff04\147\uff04\001\002\000\004\135" +
    "\u0135\001\002\000\122\004\uff7e\010\uff7e\025\uff7e\031\uff7e" +
    "\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\046\uff7e\047" +
    "\uff7e\052\uff7e\053\uff7e\077\uff7e\102\uff7e\105\uff7e\113\uff7e" +
    "\114\uff7e\116\uff7e\120\uff7e\122\uff7e\123\uff7e\124\uff7e\125" +
    "\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e\132\uff7e\134\uff7e" +
    "\135\uff7e\136\uff7e\137\uff7e\140\uff7e\141\uff7e\142\uff7e\143" +
    "\uff7e\144\uff7e\145\uff7e\147\uff7e\001\002\000\122\004\uff7d" +
    "\010\uff7d\025\uff7d\031\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\046\uff7d\047\uff7d\052\uff7d\053\uff7d\077\uff7d" +
    "\102\uff7d\105\uff7d\113\uff7d\114\uff7d\116\uff7d\120\uff7d\122" +
    "\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d" +
    "\131\uff7d\132\uff7d\134\uff7d\135\uff7d\136\uff7d\137\uff7d\140" +
    "\uff7d\141\uff7d\142\uff7d\143\uff7d\144\uff7d\145\uff7d\147\uff7d" +
    "\001\002\000\114\004\ufef7\005\ufef7\006\ufef7\007\ufef7\010" +
    "\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7\025\ufef7\035\ufef7" +
    "\037\ufef7\063\ufef7\070\ufef7\074\ufef7\075\ufef7\076\ufef7\077" +
    "\ufef7\102\ufef7\103\ufef7\104\ufef7\105\ufef7\107\ufef7\115\ufef7" +
    "\124\ufef7\127\ufef7\130\ufef7\131\ufef7\132\ufef7\133\ufef7\134" +
    "\ufef7\135\ufef7\136\ufef7\137\ufef7\140\ufef7\145\ufef7\147\ufef7" +
    "\001\002\000\114\004\uff02\005\uff02\006\uff02\007\uff02\010" +
    "\uff02\011\uff02\012\uff02\013\uff02\014\uff02\025\uff02\035\uff02" +
    "\037\uff02\063\uff02\070\uff02\074\uff02\075\uff02\076\uff02\077" +
    "\uff02\102\uff02\103\uff02\104\uff02\105\uff02\107\uff02\115\uff02" +
    "\124\uff02\127\uff02\130\uff02\131\uff02\132\uff02\133\uff02\134" +
    "\uff02\135\uff02\136\uff02\137\uff02\140\uff02\145\uff02\147\uff02" +
    "\001\002\000\112\004\060\010\072\025\055\031\uff8f\035" +
    "\065\036\uff8f\037\077\040\uff8f\041\uff8f\046\uff8f\047\uff8f" +
    "\052\uff8f\053\uff8f\077\104\102\054\105\062\113\uff8f\114" +
    "\uff8f\116\uff8f\120\uff8f\123\uff8f\124\117\125\uff8f\127\066" +
    "\130\042\131\123\132\045\136\056\137\070\140\063\141" +
    "\uff8f\142\uff8f\143\uff8f\144\uff8f\145\052\147\103\001\002" +
    "\000\116\004\060\005\051\006\014\007\101\010\072\011" +
    "\044\012\111\013\067\014\113\025\055\035\065\037\077" +
    "\063\121\070\071\074\112\075\100\076\040\077\104\102" +
    "\054\103\102\104\061\105\062\107\115\115\076\124\117" +
    "\127\066\130\042\131\123\132\045\133\110\134\106\135" +
    "\116\136\056\137\070\140\063\142\u012e\145\052\147\103" +
    "\001\002\000\122\004\uff63\010\uff63\025\uff63\031\uff63\035" +
    "\uff63\036\uff63\037\uff63\040\uff63\041\uff63\046\uff63\047\uff63" +
    "\052\uff63\053\uff63\077\uff63\102\uff63\105\uff63\113\uff63\114" +
    "\uff63\116\uff63\120\uff63\122\uff63\123\uff63\124\uff63\125\uff63" +
    "\126\uff63\127\uff63\130\uff63\131\uff63\132\uff63\134\uff63\135" +
    "\uff63\136\uff63\137\uff63\140\uff63\141\uff63\142\uff63\143\uff63" +
    "\144\uff63\145\uff63\147\uff63\001\002\000\116\004\060\005" +
    "\051\006\014\007\101\010\072\011\044\012\111\013\067" +
    "\014\113\025\055\035\065\037\077\063\121\070\071\074" +
    "\112\075\100\076\040\077\104\102\054\103\102\104\061" +
    "\105\062\107\115\115\076\124\117\127\066\130\042\131" +
    "\123\132\045\133\110\134\106\135\116\136\056\137\070" +
    "\140\063\141\u0128\145\052\147\103\001\002\000\122\004" +
    "\ufeef\010\ufeef\025\ufeef\031\ufeef\035\ufeef\036\ufeef\037\ufeef" +
    "\040\ufeef\041\ufeef\046\ufeef\047\ufeef\052\ufeef\053\ufeef\077" +
    "\ufeef\102\ufeef\105\ufeef\113\ufeef\114\ufeef\116\ufeef\120\ufeef" +
    "\122\ufeef\123\ufeef\124\ufeef\125\ufeef\126\ufeef\127\ufeef\130" +
    "\ufeef\131\ufeef\132\ufeef\134\ufeef\135\ufeef\136\ufeef\137\ufeef" +
    "\140\ufeef\141\ufeef\142\ufeef\143\ufeef\144\ufeef\145\ufeef\147" +
    "\ufeef\001\002\000\016\003\u0121\006\014\066\364\101\354" +
    "\110\356\134\024\001\002\000\122\004\ufeee\010\ufeee\025" +
    "\ufeee\031\ufeee\035\ufeee\036\ufeee\037\ufeee\040\ufeee\041\ufeee" +
    "\046\ufeee\047\ufeee\052\ufeee\053\ufeee\077\ufeee\102\ufeee\105" +
    "\ufeee\113\ufeee\114\ufeee\116\ufeee\120\ufeee\122\ufeee\123\ufeee" +
    "\124\ufeee\125\ufeee\126\ufeee\127\ufeee\130\ufeee\131\ufeee\132" +
    "\ufeee\134\ufeee\135\ufeee\136\ufeee\137\ufeee\140\ufeee\141\ufeee" +
    "\142\ufeee\143\ufeee\144\ufeee\145\ufeee\147\ufeee\001\002\000" +
    "\122\004\uff70\010\uff70\025\uff70\031\uff70\035\uff70\036\uff70" +
    "\037\uff70\040\uff70\041\uff70\046\uff70\047\uff70\052\uff70\053" +
    "\uff70\077\uff70\102\uff70\105\uff70\113\uff70\114\uff70\116\uff70" +
    "\120\uff70\122\uff70\123\uff70\124\uff70\125\uff70\126\uff70\127" +
    "\uff70\130\uff70\131\uff70\132\uff70\134\uff70\135\uff70\136\uff70" +
    "\137\uff70\140\uff70\141\uff70\142\uff70\143\uff70\144\uff70\145" +
    "\uff70\147\uff70\001\002\000\006\003\146\135\147\001\002" +
    "\000\114\004\060\005\051\006\014\007\101\010\072\011" +
    "\044\012\111\013\067\014\113\025\055\035\065\037\077" +
    "\063\121\070\071\074\112\075\100\076\040\077\104\102" +
    "\054\103\102\104\061\105\062\107\115\115\076\124\117" +
    "\127\066\130\042\131\123\132\045\133\110\134\106\135" +
    "\116\136\056\137\070\140\063\145\052\147\103\001\002" +
    "\000\114\004\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff\011" +
    "\ufeff\012\ufeff\013\ufeff\014\ufeff\025\ufeff\035\ufeff\037\ufeff" +
    "\063\ufeff\070\ufeff\074\ufeff\075\ufeff\076\ufeff\077\ufeff\102" +
    "\ufeff\103\ufeff\104\ufeff\105\ufeff\107\ufeff\115\ufeff\124\ufeff" +
    "\127\ufeff\130\ufeff\131\ufeff\132\ufeff\133\ufeff\134\ufeff\135" +
    "\ufeff\136\ufeff\137\ufeff\140\ufeff\145\ufeff\147\ufeff\001\002" +
    "\000\122\004\uff80\010\uff80\025\uff80\031\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\046\uff80\047\uff80\052\uff80" +
    "\053\uff80\077\uff80\102\uff80\105\uff80\113\uff80\114\uff80\116" +
    "\uff80\120\uff80\122\uff80\123\uff80\124\uff80\125\uff80\126\uff80" +
    "\127\uff80\130\uff80\131\uff80\132\uff80\134\uff80\135\uff80\136" +
    "\uff80\137\uff80\140\uff80\141\uff80\142\uff80\143\uff80\144\uff80" +
    "\145\uff80\147\uff80\001\002\000\122\004\uff7f\010\uff7f\025" +
    "\uff7f\031\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\046\uff7f\047\uff7f\052\uff7f\053\uff7f\077\uff7f\102\uff7f\105" +
    "\uff7f\113\uff7f\114\uff7f\116\uff7f\120\uff7f\122\uff7f\123\uff7f" +
    "\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f\132" +
    "\uff7f\134\uff7f\135\uff7f\136\uff7f\137\uff7f\140\uff7f\141\uff7f" +
    "\142\uff7f\143\uff7f\144\uff7f\145\uff7f\147\uff7f\001\002\000" +
    "\050\005\051\006\014\007\101\011\044\012\111\013\067" +
    "\014\113\063\121\070\071\074\112\075\100\076\040\103" +
    "\102\104\061\107\115\115\076\133\110\134\106\135\116" +
    "\001\002\000\114\004\ufefb\005\ufefb\006\ufefb\007\ufefb\010" +
    "\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\025\ufefb\035\ufefb" +
    "\037\ufefb\063\ufefb\070\ufefb\074\ufefb\075\ufefb\076\ufefb\077" +
    "\ufefb\102\ufefb\103\ufefb\104\ufefb\105\ufefb\107\ufefb\115\ufefb" +
    "\124\ufefb\127\ufefb\130\ufefb\131\ufefb\132\ufefb\133\ufefb\134" +
    "\ufefb\135\ufefb\136\ufefb\137\ufefb\140\ufefb\145\ufefb\147\ufefb" +
    "\001\002\000\122\004\uff6d\010\uff6d\025\uff6d\031\uff6d\035" +
    "\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\046\uff6d\047\uff6d" +
    "\052\uff6d\053\uff6d\077\uff6d\102\uff6d\105\uff6d\113\uff6d\114" +
    "\uff6d\116\uff6d\120\uff6d\122\uff6d\123\uff6d\124\uff6d\125\uff6d" +
    "\126\uff6d\127\uff6d\130\uff6d\131\uff6d\132\uff6d\134\uff6d\135" +
    "\uff6d\136\uff6d\137\uff6d\140\uff6d\141\uff6d\142\uff6d\143\uff6d" +
    "\144\uff6d\145\uff6d\147\uff6d\001\002\000\122\004\uff71\010" +
    "\uff71\025\uff71\031\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\046\uff71\047\uff71\052\uff71\053\uff71\077\uff71\102" +
    "\uff71\105\uff71\113\uff71\114\uff71\116\uff71\120\uff71\122\uff71" +
    "\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131" +
    "\uff71\132\uff71\134\uff71\135\uff71\136\uff71\137\uff71\140\uff71" +
    "\141\uff71\142\uff71\143\uff71\144\uff71\145\uff71\147\uff71\001" +
    "\002\000\050\005\uff08\006\uff08\007\uff08\011\uff08\012\uff08" +
    "\013\uff08\014\uff08\063\uff08\070\uff08\074\uff08\075\uff08\076" +
    "\uff08\103\uff08\104\uff08\107\uff08\115\uff08\133\uff08\134\uff08" +
    "\135\uff08\001\002\000\120\004\uff64\010\uff64\025\uff64\031" +
    "\uff64\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64\046\uff64" +
    "\047\uff64\052\uff64\053\uff64\077\uff64\102\uff64\105\uff64\113" +
    "\uff64\114\uff64\116\uff64\120\uff64\123\uff64\124\uff64\125\uff64" +
    "\126\132\127\uff64\130\uff64\131\uff64\132\uff64\134\131\135" +
    "\130\136\uff64\137\uff64\140\uff64\141\uff64\142\uff64\143\uff64" +
    "\144\uff64\145\uff64\147\uff64\001\002\000\116\004\060\005" +
    "\051\006\014\007\101\010\072\011\044\012\111\013\067" +
    "\014\113\025\055\035\065\037\077\063\121\070\071\074" +
    "\112\075\100\076\040\077\104\102\054\103\102\104\061" +
    "\105\062\107\115\115\076\124\117\127\066\130\042\131" +
    "\123\132\045\133\110\134\106\135\116\136\056\137\070" +
    "\140\063\143\uff8b\145\052\147\103\001\002\000\116\004" +
    "\060\005\051\006\014\007\101\010\072\011\044\012\111" +
    "\013\067\014\113\025\055\035\065\037\077\063\121\070" +
    "\071\074\112\075\100\076\040\077\104\102\054\103\102" +
    "\104\061\105\062\107\115\115\076\124\117\127\066\130" +
    "\042\131\123\132\045\133\110\134\106\135\116\136\056" +
    "\137\070\140\063\142\uff8b\145\052\147\103\001\002\000" +
    "\004\006\014\001\002\000\120\004\uff74\010\uff74\025\uff74" +
    "\031\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\046" +
    "\uff74\047\uff74\052\uff74\053\uff74\077\uff74\102\uff74\105\uff74" +
    "\113\uff74\114\uff74\116\uff74\120\uff74\123\uff74\124\uff74\125" +
    "\uff74\126\uff74\127\uff74\130\uff74\131\uff74\132\uff74\134\uff74" +
    "\135\uff74\136\uff74\137\uff74\140\uff74\141\uff74\142\uff74\143" +
    "\uff74\144\uff74\145\uff74\147\uff74\001\002\000\004\142\141" +
    "\001\002\000\016\114\uff8d\120\uff8d\123\uff8d\141\uff8d\142" +
    "\uff8d\143\uff8d\001\002\000\010\123\137\142\uff8a\143\uff8a" +
    "\001\002\000\114\004\060\005\051\006\014\007\101\010" +
    "\072\011\044\012\111\013\067\014\113\025\055\035\065" +
    "\037\077\063\121\070\071\074\112\075\100\076\040\077" +
    "\104\102\054\103\102\104\061\105\062\107\115\115\076" +
    "\124\117\127\066\130\042\131\123\132\045\133\110\134" +
    "\106\135\116\136\056\137\070\140\063\145\052\147\103" +
    "\001\002\000\016\114\uff8c\120\uff8c\123\uff8c\141\uff8c\142" +
    "\uff8c\143\uff8c\001\002\000\120\004\uff75\010\uff75\025\uff75" +
    "\031\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\046" +
    "\uff75\047\uff75\052\uff75\053\uff75\077\uff75\102\uff75\105\uff75" +
    "\113\uff75\114\uff75\116\uff75\120\uff75\123\uff75\124\uff75\125" +
    "\uff75\126\uff75\127\uff75\130\uff75\131\uff75\132\uff75\134\uff75" +
    "\135\uff75\136\uff75\137\uff75\140\uff75\141\uff75\142\uff75\143" +
    "\uff75\144\uff75\145\uff75\147\uff75\001\002\000\004\143\143" +
    "\001\002\000\120\004\uff76\010\uff76\025\uff76\031\uff76\035" +
    "\uff76\036\uff76\037\uff76\040\uff76\041\uff76\046\uff76\047\uff76" +
    "\052\uff76\053\uff76\077\uff76\102\uff76\105\uff76\113\uff76\114" +
    "\uff76\116\uff76\120\uff76\123\uff76\124\uff76\125\uff76\126\uff76" +
    "\127\uff76\130\uff76\131\uff76\132\uff76\134\uff76\135\uff76\136" +
    "\uff76\137\uff76\140\uff76\141\uff76\142\uff76\143\uff76\144\uff76" +
    "\145\uff76\147\uff76\001\002\000\004\143\145\001\002\000" +
    "\122\004\uff6a\010\uff6a\025\uff6a\031\uff6a\035\uff6a\036\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\046\uff6a\047\uff6a\052\uff6a\053" +
    "\uff6a\077\uff6a\102\uff6a\105\uff6a\113\uff6a\114\uff6a\116\uff6a" +
    "\120\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\126\uff6a\127" +
    "\uff6a\130\uff6a\131\uff6a\132\uff6a\134\uff6a\135\uff6a\136\uff6a" +
    "\137\uff6a\140\uff6a\141\uff6a\142\uff6a\143\uff6a\144\uff6a\145" +
    "\uff6a\147\uff6a\001\002\000\006\041\u0113\056\u0112\001\002" +
    "\000\010\006\014\134\024\143\uffb7\001\002\000\006\123" +
    "\u011d\143\uffb6\001\002\000\014\006\uff0a\123\uffb3\130\uffb3" +
    "\135\030\143\uffb3\001\002\000\010\123\uffb5\130\u011b\143" +
    "\uffb5\001\002\000\006\123\uffb9\143\uffb9\001\002\000\004" +
    "\006\014\001\002\000\004\143\156\001\002\000\006\031" +
    "\ufec8\116\157\001\002\000\014\006\014\066\364\101\354" +
    "\110\356\134\024\001\002\000\004\031\161\001\002\000" +
    "\070\003\202\005\051\006\014\007\101\011\044\012\111" +
    "\013\067\014\113\027\175\031\173\033\171\063\121\064" +
    "\166\065\204\070\176\074\112\075\100\076\040\103\102" +
    "\104\061\107\115\115\076\117\205\133\110\134\106\135" +
    "\116\144\163\001\002\000\074\003\202\005\051\006\014" +
    "\007\101\011\044\012\111\013\067\014\113\027\175\031" +
    "\173\033\171\041\351\055\350\063\121\064\166\065\204" +
    "\070\176\074\112\075\100\076\040\103\102\104\061\107" +
    "\115\115\076\117\205\133\110\134\106\135\116\144\163" +
    "\001\002\000\106\003\uff3d\005\uff3d\006\uff3d\007\uff3d\011" +
    "\uff3d\012\uff3d\013\uff3d\014\uff3d\027\uff3d\031\uff3d\033\uff3d" +
    "\041\uff3d\043\uff3d\044\uff3d\045\uff3d\055\uff3d\056\uff3d\060" +
    "\uff3d\063\uff3d\064\uff3d\065\uff3d\070\uff3d\074\uff3d\075\uff3d" +
    "\076\uff3d\103\uff3d\104\uff3d\107\uff3d\115\uff3d\117\uff3d\133" +
    "\uff3d\134\uff3d\135\uff3d\144\uff3d\001\002\000\106\003\uff3b" +
    "\005\uff3b\006\uff3b\007\uff3b\011\uff3b\012\uff3b\013\uff3b\014" +
    "\uff3b\027\uff3b\031\uff3b\033\uff3b\041\uff3b\043\uff3b\044\uff3b" +
    "\045\uff3b\055\uff3b\056\uff3b\060\uff3b\063\uff3b\064\uff3b\065" +
    "\uff3b\070\uff3b\074\uff3b\075\uff3b\076\uff3b\103\uff3b\104\uff3b" +
    "\107\uff3b\115\uff3b\117\uff3b\133\uff3b\134\uff3b\135\uff3b\144" +
    "\uff3b\001\002\000\004\122\344\001\002\000\010\003\ufed0" +
    "\006\ufed0\134\ufed0\001\002\000\006\041\315\042\313\001" +
    "\002\000\106\003\uff35\005\uff35\006\uff35\007\uff35\011\uff35" +
    "\012\uff35\013\uff35\014\uff35\027\uff35\031\uff35\033\uff35\041" +
    "\uff35\043\uff35\044\uff35\045\uff35\055\uff35\056\uff35\060\uff35" +
    "\063\uff35\064\uff35\065\uff35\070\uff35\074\uff35\075\uff35\076" +
    "\uff35\103\uff35\104\uff35\107\uff35\115\uff35\117\uff35\133\uff35" +
    "\134\uff35\135\uff35\144\uff35\001\002\000\010\003\330\064" +
    "\166\065\204\001\002\000\106\003\uff38\005\uff38\006\uff38" +
    "\007\uff38\011\uff38\012\uff38\013\uff38\014\uff38\027\uff38\031" +
    "\uff38\033\uff38\041\uff38\043\uff38\044\uff38\045\uff38\055\uff38" +
    "\056\uff38\060\uff38\063\uff38\064\uff38\065\uff38\070\uff38\074" +
    "\uff38\075\uff38\076\uff38\103\uff38\104\uff38\107\uff38\115\uff38" +
    "\117\uff38\133\uff38\134\uff38\135\uff38\144\uff38\001\002\000" +
    "\074\003\317\005\051\006\014\007\101\011\044\012\111" +
    "\013\067\014\113\027\175\031\173\033\171\036\ufec8\063" +
    "\121\064\166\065\204\070\176\074\112\075\100\076\040" +
    "\103\102\104\061\107\115\115\076\116\157\117\205\133" +
    "\110\134\106\135\116\144\163\001\002\000\106\003\uff39" +
    "\005\uff39\006\uff39\007\uff39\011\uff39\012\uff39\013\uff39\014" +
    "\uff39\027\uff39\031\uff39\033\uff39\041\uff39\043\uff39\044\uff39" +
    "\045\uff39\055\uff39\056\uff39\060\uff39\063\uff39\064\uff39\065" +
    "\uff39\070\uff39\074\uff39\075\uff39\076\uff39\103\uff39\104\uff39" +
    "\107\uff39\115\uff39\117\uff39\133\uff39\134\uff39\135\uff39\144" +
    "\uff39\001\002\000\116\003\310\004\060\005\051\006\014" +
    "\007\101\010\072\011\044\012\111\013\067\014\113\025" +
    "\055\035\065\037\077\063\121\070\071\074\112\075\100" +
    "\076\040\077\104\102\054\103\102\104\061\105\062\107" +
    "\115\115\076\124\117\127\066\130\042\131\123\132\045" +
    "\133\110\134\106\135\116\136\056\137\070\140\063\145" +
    "\052\147\103\001\002\000\116\003\272\004\060\005\051" +
    "\006\014\007\101\010\072\011\044\012\111\013\067\014" +
    "\113\025\055\035\065\037\077\063\121\070\071\074\112" +
    "\075\100\076\040\077\104\102\054\103\102\104\061\105" +
    "\062\107\115\115\076\124\117\127\066\130\042\131\123" +
    "\132\045\133\110\134\106\135\116\136\056\137\070\140" +
    "\063\145\052\147\103\001\002\000\010\126\262\134\261" +
    "\135\260\001\002\000\106\003\uff33\005\uff33\006\uff33\007" +
    "\uff33\011\uff33\012\uff33\013\uff33\014\uff33\027\uff33\031\uff33" +
    "\033\uff33\041\uff33\043\uff33\044\uff33\045\uff33\055\uff33\056" +
    "\uff33\060\uff33\063\uff33\064\uff33\065\uff33\070\uff33\074\uff33" +
    "\075\uff33\076\uff33\103\uff33\104\uff33\107\uff33\115\uff33\117" +
    "\uff33\133\uff33\134\uff33\135\uff33\144\uff33\001\002\000\012" +
    "\122\uff2e\126\uff77\134\uff77\135\uff77\001\002\000\004\144" +
    "\257\001\002\000\106\003\uff37\005\uff37\006\uff37\007\uff37" +
    "\011\uff37\012\uff37\013\uff37\014\uff37\027\uff37\031\uff37\033" +
    "\uff37\041\uff37\043\uff37\044\uff37\045\uff37\055\uff37\056\uff37" +
    "\060\uff37\063\uff37\064\uff37\065\uff37\070\uff37\074\uff37\075" +
    "\uff37\076\uff37\103\uff37\104\uff37\107\uff37\115\uff37\117\uff37" +
    "\133\uff37\134\uff37\135\uff37\144\uff37\001\002\000\010\003" +
    "\ufecf\006\ufecf\134\ufecf\001\002\000\116\003\246\004\060" +
    "\005\051\006\014\007\101\010\072\011\044\012\111\013" +
    "\067\014\113\025\055\035\065\037\077\063\121\070\071" +
    "\074\112\075\100\076\040\077\104\102\054\103\102\104" +
    "\061\105\062\107\115\115\076\124\117\127\066\130\042" +
    "\131\123\132\045\133\110\134\106\135\116\136\056\137" +
    "\070\140\063\145\052\147\103\001\002\000\106\003\uff36" +
    "\005\uff36\006\uff36\007\uff36\011\uff36\012\uff36\013\uff36\014" +
    "\uff36\027\uff36\031\uff36\033\uff36\041\uff36\043\uff36\044\uff36" +
    "\045\uff36\055\uff36\056\uff36\060\uff36\063\uff36\064\uff36\065" +
    "\uff36\070\uff36\074\uff36\075\uff36\076\uff36\103\uff36\104\uff36" +
    "\107\uff36\115\uff36\117\uff36\133\uff36\134\uff36\135\uff36\144" +
    "\uff36\001\002\000\106\003\uff3a\005\uff3a\006\uff3a\007\uff3a" +
    "\011\uff3a\012\uff3a\013\uff3a\014\uff3a\027\uff3a\031\uff3a\033" +
    "\uff3a\041\uff3a\043\uff3a\044\uff3a\045\uff3a\055\uff3a\056\uff3a" +
    "\060\uff3a\063\uff3a\064\uff3a\065\uff3a\070\uff3a\074\uff3a\075" +
    "\uff3a\076\uff3a\103\uff3a\104\uff3a\107\uff3a\115\uff3a\117\uff3a" +
    "\133\uff3a\134\uff3a\135\uff3a\144\uff3a\001\002\000\010\036" +
    "\ufec8\116\157\123\234\001\002\000\010\003\217\006\014" +
    "\134\024\001\002\000\106\003\uff3c\005\uff3c\006\uff3c\007" +
    "\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\027\uff3c\031\uff3c" +
    "\033\uff3c\041\uff3c\043\uff3c\044\uff3c\045\uff3c\055\uff3c\056" +
    "\uff3c\060\uff3c\063\uff3c\064\uff3c\065\uff3c\070\uff3c\074\uff3c" +
    "\075\uff3c\076\uff3c\103\uff3c\104\uff3c\107\uff3c\115\uff3c\117" +
    "\uff3c\133\uff3c\134\uff3c\135\uff3c\144\uff3c\001\002\000\014" +
    "\036\uff5f\116\uff5f\123\uff5f\141\uff5f\142\uff5f\001\002\000" +
    "\016\036\uff5c\072\224\116\uff5c\123\223\141\uff5c\142\uff5c" +
    "\001\002\000\022\006\uff0a\036\uffbe\072\uffbe\116\uffbe\123" +
    "\uffbe\135\030\141\uffbe\142\uffbe\001\002\000\016\036\uffc0" +
    "\072\uffc0\116\uffc0\123\uffc0\141\uffc0\142\uffc0\001\002\000" +
    "\006\041\232\045\230\001\002\000\004\006\014\001\002" +
    "\000\016\036\uff5c\072\224\116\uff5c\123\223\141\uff5c\142" +
    "\uff5c\001\002\000\016\036\uffbe\072\uffbe\116\uffbe\123\uffbe" +
    "\141\uffbe\142\uffbe\001\002\000\004\006\014\001\002\000" +
    "\114\004\060\005\051\006\014\007\101\010\072\011\044" +
    "\012\111\013\067\014\113\025\055\035\065\037\077\063" +
    "\121\070\071\074\112\075\100\076\040\077\104\102\054" +
    "\103\102\104\061\105\062\107\115\115\076\124\117\127" +
    "\066\130\042\131\123\132\045\133\110\134\106\135\116" +
    "\136\056\137\070\140\063\145\052\147\103\001\002\000" +
    "\014\036\uff60\116\uff60\123\uff60\141\uff60\142\uff60\001\002" +
    "\000\014\036\uff5b\116\uff5b\123\uff5b\141\uff5b\142\uff5b\001" +
    "\002\000\016\036\uffbf\072\uffbf\116\uffbf\123\uffbf\141\uffbf" +
    "\142\uffbf\001\002\000\124\003\ufedf\005\ufedf\006\ufedf\007" +
    "\ufedf\011\ufedf\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016\ufedf" +
    "\020\ufedf\027\ufedf\031\ufedf\033\ufedf\040\ufedf\041\ufedf\043" +
    "\ufedf\044\ufedf\045\ufedf\047\ufedf\055\ufedf\056\ufedf\060\ufedf" +
    "\063\ufedf\064\ufedf\065\ufedf\070\ufedf\071\ufedf\074\ufedf\075" +
    "\ufedf\076\ufedf\103\ufedf\104\ufedf\107\ufedf\115\ufedf\116\ufedf" +
    "\117\ufedf\133\ufedf\134\ufedf\135\ufedf\144\ufedf\001\002\000" +
    "\106\003\uff24\005\uff24\006\uff24\007\uff24\011\uff24\012\uff24" +
    "\013\uff24\014\uff24\027\uff24\031\uff24\033\uff24\041\uff24\043" +
    "\uff24\044\uff24\045\uff24\055\uff24\056\uff24\060\uff24\063\uff24" +
    "\064\uff24\065\uff24\070\uff24\074\uff24\075\uff24\076\uff24\103" +
    "\uff24\104\uff24\107\uff24\115\uff24\117\uff24\133\uff24\134\uff24" +
    "\135\uff24\144\uff24\001\002\000\124\003\ufee0\005\ufee0\006" +
    "\ufee0\007\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015\ufee0" +
    "\016\ufee0\020\ufee0\027\ufee0\031\ufee0\033\ufee0\040\ufee0\041" +
    "\ufee0\043\ufee0\044\ufee0\045\ufee0\047\ufee0\055\ufee0\056\ufee0" +
    "\060\ufee0\063\ufee0\064\ufee0\065\ufee0\070\ufee0\071\ufee0\074" +
    "\ufee0\075\ufee0\076\ufee0\103\ufee0\104\ufee0\107\ufee0\115\ufee0" +
    "\116\ufee0\117\ufee0\133\ufee0\134\ufee0\135\ufee0\144\ufee0\001" +
    "\002\000\014\036\uff61\116\uff61\123\uff61\141\uff61\142\uff61" +
    "\001\002\000\120\004\060\005\051\006\014\007\101\010" +
    "\072\011\044\012\111\013\067\014\113\025\055\035\065" +
    "\037\077\063\121\064\166\065\204\070\071\074\112\075" +
    "\100\076\040\077\104\102\054\103\102\104\061\105\062" +
    "\107\115\115\076\124\117\127\066\130\042\131\123\132" +
    "\045\133\110\134\106\135\116\136\056\137\070\140\063" +
    "\145\052\147\103\001\002\000\004\036\236\001\002\000" +
    "\070\003\202\005\051\006\014\007\101\011\044\012\111" +
    "\013\067\014\113\027\175\031\173\033\171\063\121\064" +
    "\166\065\204\070\176\074\112\075\100\076\040\103\102" +
    "\104\061\107\115\115\076\117\205\133\110\134\106\135" +
    "\116\144\163\001\002\000\074\003\202\005\051\006\014" +
    "\007\101\011\044\012\111\013\067\014\113\027\175\031" +
    "\173\033\171\041\232\045\230\063\121\064\166\065\204" +
    "\070\176\074\112\075\100\076\040\103\102\104\061\107" +
    "\115\115\076\117\205\133\110\134\106\135\116\144\163" +
    "\001\002\000\106\003\uff25\005\uff25\006\uff25\007\uff25\011" +
    "\uff25\012\uff25\013\uff25\014\uff25\027\uff25\031\uff25\033\uff25" +
    "\041\uff25\043\uff25\044\uff25\045\uff25\055\uff25\056\uff25\060" +
    "\uff25\063\uff25\064\uff25\065\uff25\070\uff25\074\uff25\075\uff25" +
    "\076\uff25\103\uff25\104\uff25\107\uff25\115\uff25\117\uff25\133" +
    "\uff25\134\uff25\135\uff25\144\uff25\001\002\000\106\003\uff32" +
    "\005\uff32\006\uff32\007\uff32\011\uff32\012\uff32\013\uff32\014" +
    "\uff32\027\uff32\031\uff32\033\uff32\041\uff32\043\uff32\044\uff32" +
    "\045\uff32\055\uff32\056\uff32\060\uff32\063\uff32\064\uff32\065" +
    "\uff32\070\uff32\074\uff32\075\uff32\076\uff32\103\uff32\104\uff32" +
    "\107\uff32\115\uff32\117\uff32\133\uff32\134\uff32\135\uff32\144" +
    "\uff32\001\002\000\014\036\uff5e\116\uff5e\123\uff5e\141\uff5e" +
    "\142\uff5e\001\002\000\006\006\014\134\024\001\002\000" +
    "\014\036\uff5d\116\uff5d\123\uff5d\141\uff5d\142\uff5d\001\002" +
    "\000\006\036\ufec8\116\157\001\002\000\006\041\250\060" +
    "\247\001\002\000\106\003\ufed1\005\ufed1\006\ufed1\007\ufed1" +
    "\011\ufed1\012\ufed1\013\ufed1\014\ufed1\027\ufed1\031\ufed1\033" +
    "\ufed1\041\ufed1\043\ufed1\044\ufed1\045\ufed1\055\ufed1\056\ufed1" +
    "\060\ufed1\063\ufed1\064\ufed1\065\ufed1\070\ufed1\074\ufed1\075" +
    "\ufed1\076\ufed1\103\ufed1\104\ufed1\107\ufed1\115\ufed1\117\ufed1" +
    "\133\ufed1\134\ufed1\135\ufed1\144\ufed1\001\002\000\106\003" +
    "\ufed2\005\ufed2\006\ufed2\007\ufed2\011\ufed2\012\ufed2\013\ufed2" +
    "\014\ufed2\027\ufed2\031\ufed2\033\ufed2\041\ufed2\043\ufed2\044" +
    "\ufed2\045\ufed2\055\ufed2\056\ufed2\060\ufed2\063\ufed2\064\ufed2" +
    "\065\ufed2\070\ufed2\074\ufed2\075\ufed2\076\ufed2\103\ufed2\104" +
    "\ufed2\107\ufed2\115\ufed2\117\ufed2\133\ufed2\134\ufed2\135\ufed2" +
    "\144\ufed2\001\002\000\106\003\uff1b\005\uff1b\006\uff1b\007" +
    "\uff1b\011\uff1b\012\uff1b\013\uff1b\014\uff1b\027\uff1b\031\uff1b" +
    "\033\uff1b\041\uff1b\043\uff1b\044\uff1b\045\uff1b\055\uff1b\056" +
    "\uff1b\060\uff1b\063\uff1b\064\uff1b\065\uff1b\070\uff1b\074\uff1b" +
    "\075\uff1b\076\uff1b\103\uff1b\104\uff1b\107\uff1b\115\uff1b\117" +
    "\uff1b\133\uff1b\134\uff1b\135\uff1b\144\uff1b\001\002\000\004" +
    "\036\253\001\002\000\074\003\202\005\051\006\014\007" +
    "\101\011\044\012\111\013\067\014\113\027\175\031\173" +
    "\033\171\041\uff31\060\uff31\063\121\064\166\065\204\070" +
    "\176\074\112\075\100\076\040\103\102\104\061\107\115" +
    "\115\076\117\205\133\110\134\106\135\116\144\163\001" +
    "\002\000\074\003\202\005\051\006\014\007\101\011\044" +
    "\012\111\013\067\014\113\027\175\031\173\033\171\041" +
    "\uff30\060\uff30\063\121\064\166\065\204\070\176\074\112" +
    "\075\100\076\040\103\102\104\061\107\115\115\076\117" +
    "\205\133\110\134\106\135\116\144\163\001\002\000\006" +
    "\041\250\060\247\001\002\000\106\003\uff1c\005\uff1c\006" +
    "\uff1c\007\uff1c\011\uff1c\012\uff1c\013\uff1c\014\uff1c\027\uff1c" +
    "\031\uff1c\033\uff1c\041\uff1c\043\uff1c\044\uff1c\045\uff1c\055" +
    "\uff1c\056\uff1c\060\uff1c\063\uff1c\064\uff1c\065\uff1c\070\uff1c" +
    "\074\uff1c\075\uff1c\076\uff1c\103\uff1c\104\uff1c\107\uff1c\115" +
    "\uff1c\117\uff1c\133\uff1c\134\uff1c\135\uff1c\144\uff1c\001\002" +
    "\000\106\003\uff34\005\uff34\006\uff34\007\uff34\011\uff34\012" +
    "\uff34\013\uff34\014\uff34\027\uff34\031\uff34\033\uff34\041\uff34" +
    "\043\uff34\044\uff34\045\uff34\055\uff34\056\uff34\060\uff34\063" +
    "\uff34\064\uff34\065\uff34\070\uff34\074\uff34\075\uff34\076\uff34" +
    "\103\uff34\104\uff34\107\uff34\115\uff34\117\uff34\133\uff34\134" +
    "\uff34\135\uff34\144\uff34\001\002\000\116\004\060\005\051" +
    "\006\014\007\101\010\072\011\044\012\111\013\067\014" +
    "\113\025\055\035\065\037\077\063\121\070\071\074\112" +
    "\075\100\076\040\077\104\102\054\103\102\104\061\105" +
    "\062\107\115\115\076\124\117\127\066\130\042\131\123" +
    "\132\045\133\110\134\106\135\116\136\056\137\070\140" +
    "\063\143\uff8b\145\052\147\103\001\002\000\116\004\060" +
    "\005\051\006\014\007\101\010\072\011\044\012\111\013" +
    "\067\014\113\025\055\035\065\037\077\063\121\070\071" +
    "\074\112\075\100\076\040\077\104\102\054\103\102\104" +
    "\061\105\062\107\115\115\076\124\117\127\066\130\042" +
    "\131\123\132\045\133\110\134\106\135\116\136\056\137" +
    "\070\140\063\142\uff8b\145\052\147\103\001\002\000\004" +
    "\006\014\001\002\000\012\122\uff2c\126\uff74\134\uff74\135" +
    "\uff74\001\002\000\004\142\265\001\002\000\012\122\uff2d" +
    "\126\uff75\134\uff75\135\uff75\001\002\000\004\143\267\001" +
    "\002\000\012\126\uff76\134\uff76\135\uff76\144\270\001\002" +
    "\000\106\003\uff26\005\uff26\006\uff26\007\uff26\011\uff26\012" +
    "\uff26\013\uff26\014\uff26\027\uff26\031\uff26\033\uff26\041\uff26" +
    "\043\uff26\044\uff26\045\uff26\055\uff26\056\uff26\060\uff26\063" +
    "\uff26\064\uff26\065\uff26\070\uff26\074\uff26\075\uff26\076\uff26" +
    "\103\uff26\104\uff26\107\uff26\115\uff26\117\uff26\133\uff26\134" +
    "\uff26\135\uff26\144\uff26\001\002\000\004\113\276\001\002" +
    "\000\006\041\274\047\273\001\002\000\224\003\ufedb\004" +
    "\ufedb\005\ufedb\006\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb" +
    "\013\ufedb\014\ufedb\015\ufedb\016\ufedb\020\ufedb\025\ufedb\027" +
    "\ufedb\031\ufedb\033\ufedb\035\ufedb\036\ufedb\037\ufedb\040\ufedb" +
    "\041\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\052" +
    "\ufedb\053\ufedb\055\ufedb\056\ufedb\060\ufedb\063\ufedb\064\ufedb" +
    "\065\ufedb\070\ufedb\071\ufedb\074\ufedb\075\ufedb\076\ufedb\077" +
    "\ufedb\102\ufedb\103\ufedb\104\ufedb\105\ufedb\107\ufedb\113\ufedb" +
    "\114\ufedb\115\ufedb\116\ufedb\117\ufedb\120\ufedb\122\ufedb\123" +
    "\ufedb\124\ufedb\125\ufedb\126\ufedb\127\ufedb\130\ufedb\131\ufedb" +
    "\132\ufedb\133\ufedb\134\ufedb\135\ufedb\136\ufedb\137\ufedb\140" +
    "\ufedb\141\ufedb\142\ufedb\143\ufedb\144\ufedb\145\ufedb\147\ufedb" +
    "\001\002\000\224\003\ufedc\004\ufedc\005\ufedc\006\ufedc\007" +
    "\ufedc\010\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc" +
    "\016\ufedc\020\ufedc\025\ufedc\027\ufedc\031\ufedc\033\ufedc\035" +
    "\ufedc\036\ufedc\037\ufedc\040\ufedc\041\ufedc\043\ufedc\044\ufedc" +
    "\045\ufedc\046\ufedc\047\ufedc\052\ufedc\053\ufedc\055\ufedc\056" +
    "\ufedc\060\ufedc\063\ufedc\064\ufedc\065\ufedc\070\ufedc\071\ufedc" +
    "\074\ufedc\075\ufedc\076\ufedc\077\ufedc\102\ufedc\103\ufedc\104" +
    "\ufedc\105\ufedc\107\ufedc\113\ufedc\114\ufedc\115\ufedc\116\ufedc" +
    "\117\ufedc\120\ufedc\122\ufedc\123\ufedc\124\ufedc\125\ufedc\126" +
    "\ufedc\127\ufedc\130\ufedc\131\ufedc\132\ufedc\133\ufedc\134\ufedc" +
    "\135\ufedc\136\ufedc\137\ufedc\140\ufedc\141\ufedc\142\ufedc\143" +
    "\ufedc\144\ufedc\145\ufedc\147\ufedc\001\002\000\122\004\uff86" +
    "\010\uff86\025\uff86\031\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\046\uff86\047\uff86\052\uff86\053\uff86\077\uff86" +
    "\102\uff86\105\uff86\113\uff86\114\uff86\116\uff86\120\uff86\122" +
    "\uff86\123\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86" +
    "\131\uff86\132\uff86\134\uff86\135\uff86\136\uff86\137\uff86\140" +
    "\uff86\141\uff86\142\uff86\143\uff86\144\uff86\145\uff86\147\uff86" +
    "\001\002\000\114\004\060\005\051\006\014\007\101\010" +
    "\072\011\044\012\111\013\067\014\113\025\055\035\065" +
    "\037\077\063\121\070\071\074\112\075\100\076\040\077" +
    "\104\102\054\103\102\104\061\105\062\107\115\115\076" +
    "\124\117\127\066\130\042\131\123\132\045\133\110\134" +
    "\106\135\116\136\056\137\070\140\063\145\052\147\103" +
    "\001\002\000\010\040\304\041\274\047\273\001\002\000" +
    "\004\040\301\001\002\000\114\004\060\005\051\006\014" +
    "\007\101\010\072\011\044\012\111\013\067\014\113\025" +
    "\055\035\065\037\077\063\121\070\071\074\112\075\100" +
    "\076\040\077\104\102\054\103\102\104\061\105\062\107" +
    "\115\115\076\124\117\127\066\130\042\131\123\132\045" +
    "\133\110\134\106\135\116\136\056\137\070\140\063\145" +
    "\052\147\103\001\002\000\006\041\274\047\273\001\002" +
    "\000\122\004\uff87\010\uff87\025\uff87\031\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\046\uff87\047\uff87\052\uff87" +
    "\053\uff87\077\uff87\102\uff87\105\uff87\113\uff87\114\uff87\116" +
    "\uff87\120\uff87\122\uff87\123\uff87\124\uff87\125\uff87\126\uff87" +
    "\127\uff87\130\uff87\131\uff87\132\uff87\134\uff87\135\uff87\136" +
    "\uff87\137\uff87\140\uff87\141\uff87\142\uff87\143\uff87\144\uff87" +
    "\145\uff87\147\uff87\001\002\000\002\001\002\000\106\003" +
    "\uff1e\005\uff1e\006\uff1e\007\uff1e\011\uff1e\012\uff1e\013\uff1e" +
    "\014\uff1e\027\uff1e\031\uff1e\033\uff1e\041\uff1e\043\uff1e\044" +
    "\uff1e\045\uff1e\055\uff1e\056\uff1e\060\uff1e\063\uff1e\064\uff1e" +
    "\065\uff1e\070\uff1e\074\uff1e\075\uff1e\076\uff1e\103\uff1e\104" +
    "\uff1e\107\uff1e\115\uff1e\117\uff1e\133\uff1e\134\uff1e\135\uff1e" +
    "\144\uff1e\001\002\000\006\041\274\047\273\001\002\000" +
    "\106\003\uff1d\005\uff1d\006\uff1d\007\uff1d\011\uff1d\012\uff1d" +
    "\013\uff1d\014\uff1d\027\uff1d\031\uff1d\033\uff1d\041\uff1d\043" +
    "\uff1d\044\uff1d\045\uff1d\055\uff1d\056\uff1d\060\uff1d\063\uff1d" +
    "\064\uff1d\065\uff1d\070\uff1d\074\uff1d\075\uff1d\076\uff1d\103" +
    "\uff1d\104\uff1d\107\uff1d\115\uff1d\117\uff1d\133\uff1d\134\uff1d" +
    "\135\uff1d\144\uff1d\001\002\000\006\041\315\042\313\001" +
    "\002\000\006\114\312\123\137\001\002\000\006\041\uff21" +
    "\042\uff21\001\002\000\106\003\ufee5\005\ufee5\006\ufee5\007" +
    "\ufee5\011\ufee5\012\ufee5\013\ufee5\014\ufee5\027\ufee5\031\ufee5" +
    "\033\ufee5\041\ufee5\043\ufee5\044\ufee5\045\ufee5\055\ufee5\056" +
    "\ufee5\060\ufee5\063\ufee5\064\ufee5\065\ufee5\070\ufee5\074\ufee5" +
    "\075\ufee5\076\ufee5\103\ufee5\104\ufee5\107\ufee5\115\ufee5\117" +
    "\ufee5\133\ufee5\134\ufee5\135\ufee5\144\ufee5\001\002\000\106" +
    "\003\uff22\005\uff22\006\uff22\007\uff22\011\uff22\012\uff22\013" +
    "\uff22\014\uff22\027\uff22\031\uff22\033\uff22\041\uff22\043\uff22" +
    "\044\uff22\045\uff22\055\uff22\056\uff22\060\uff22\063\uff22\064" +
    "\uff22\065\uff22\070\uff22\074\uff22\075\uff22\076\uff22\103\uff22" +
    "\104\uff22\107\uff22\115\uff22\117\uff22\133\uff22\134\uff22\135" +
    "\uff22\144\uff22\001\002\000\106\003\ufee6\005\ufee6\006\ufee6" +
    "\007\ufee6\011\ufee6\012\ufee6\013\ufee6\014\ufee6\027\ufee6\031" +
    "\ufee6\033\ufee6\041\ufee6\043\ufee6\044\ufee6\045\ufee6\055\ufee6" +
    "\056\ufee6\060\ufee6\063\ufee6\064\ufee6\065\ufee6\070\ufee6\074" +
    "\ufee6\075\ufee6\076\ufee6\103\ufee6\104\ufee6\107\ufee6\115\ufee6" +
    "\117\ufee6\133\ufee6\134\ufee6\135\ufee6\144\ufee6\001\002\000" +
    "\074\003\202\005\051\006\014\007\101\011\044\012\111" +
    "\013\067\014\113\027\175\031\173\033\171\041\325\043" +
    "\323\063\121\064\166\065\204\070\176\074\112\075\100" +
    "\076\040\103\102\104\061\107\115\115\076\117\205\133" +
    "\110\134\106\135\116\144\163\001\002\000\010\041\325" +
    "\043\323\144\257\001\002\000\004\036\321\001\002\000" +
    "\070\003\202\005\051\006\014\007\101\011\044\012\111" +
    "\013\067\014\113\027\175\031\173\033\171\063\121\064" +
    "\166\065\204\070\176\074\112\075\100\076\040\103\102" +
    "\104\061\107\115\115\076\117\205\133\110\134\106\135" +
    "\116\144\163\001\002\000\074\003\202\005\051\006\014" +
    "\007\101\011\044\012\111\013\067\014\113\027\175\031" +
    "\173\033\171\041\325\043\323\063\121\064\166\065\204" +
    "\070\176\074\112\075\100\076\040\103\102\104\061\107" +
    "\115\115\076\117\205\133\110\134\106\135\116\144\163" +
    "\001\002\000\106\003\ufee3\005\ufee3\006\ufee3\007\ufee3\011" +
    "\ufee3\012\ufee3\013\ufee3\014\ufee3\027\ufee3\031\ufee3\033\ufee3" +
    "\041\ufee3\043\ufee3\044\ufee3\045\ufee3\055\ufee3\056\ufee3\060" +
    "\ufee3\063\ufee3\064\ufee3\065\ufee3\070\ufee3\074\ufee3\075\ufee3" +
    "\076\ufee3\103\ufee3\104\ufee3\107\ufee3\115\ufee3\117\ufee3\133" +
    "\ufee3\134\ufee3\135\ufee3\144\ufee3\001\002\000\106\003\uff29" +
    "\005\uff29\006\uff29\007\uff29\011\uff29\012\uff29\013\uff29\014" +
    "\uff29\027\uff29\031\uff29\033\uff29\041\uff29\043\uff29\044\uff29" +
    "\045\uff29\055\uff29\056\uff29\060\uff29\063\uff29\064\uff29\065" +
    "\uff29\070\uff29\074\uff29\075\uff29\076\uff29\103\uff29\104\uff29" +
    "\107\uff29\115\uff29\117\uff29\133\uff29\134\uff29\135\uff29\144" +
    "\uff29\001\002\000\106\003\ufee4\005\ufee4\006\ufee4\007\ufee4" +
    "\011\ufee4\012\ufee4\013\ufee4\014\ufee4\027\ufee4\031\ufee4\033" +
    "\ufee4\041\ufee4\043\ufee4\044\ufee4\045\ufee4\055\ufee4\056\ufee4" +
    "\060\ufee4\063\ufee4\064\ufee4\065\ufee4\070\ufee4\074\ufee4\075" +
    "\ufee4\076\ufee4\103\ufee4\104\ufee4\107\ufee4\115\ufee4\117\ufee4" +
    "\133\ufee4\134\ufee4\135\ufee4\144\ufee4\001\002\000\106\003" +
    "\uff27\005\uff27\006\uff27\007\uff27\011\uff27\012\uff27\013\uff27" +
    "\014\uff27\027\uff27\031\uff27\033\uff27\041\uff27\043\uff27\044" +
    "\uff27\045\uff27\055\uff27\056\uff27\060\uff27\063\uff27\064\uff27" +
    "\065\uff27\070\uff27\074\uff27\075\uff27\076\uff27\103\uff27\104" +
    "\uff27\107\uff27\115\uff27\117\uff27\133\uff27\134\uff27\135\uff27" +
    "\144\uff27\001\002\000\106\003\uff28\005\uff28\006\uff28\007" +
    "\uff28\011\uff28\012\uff28\013\uff28\014\uff28\027\uff28\031\uff28" +
    "\033\uff28\041\uff28\043\uff28\044\uff28\045\uff28\055\uff28\056" +
    "\uff28\060\uff28\063\uff28\064\uff28\065\uff28\070\uff28\074\uff28" +
    "\075\uff28\076\uff28\103\uff28\104\uff28\107\uff28\115\uff28\117" +
    "\uff28\133\uff28\134\uff28\135\uff28\144\uff28\001\002\000\006" +
    "\041\337\044\335\001\002\000\010\036\ufec8\116\157\123" +
    "\234\001\002\000\004\036\333\001\002\000\070\003\202" +
    "\005\051\006\014\007\101\011\044\012\111\013\067\014" +
    "\113\027\175\031\173\033\171\063\121\064\166\065\204" +
    "\070\176\074\112\075\100\076\040\103\102\104\061\107" +
    "\115\115\076\117\205\133\110\134\106\135\116\144\163" +
    "\001\002\000\074\003\202\005\051\006\014\007\101\011" +
    "\044\012\111\013\067\014\113\027\175\031\173\033\171" +
    "\041\337\044\335\063\121\064\166\065\204\070\176\074" +
    "\112\075\100\076\040\103\102\104\061\107\115\115\076" +
    "\117\205\133\110\134\106\135\116\144\163\001\002\000" +
    "\106\003\ufee1\005\ufee1\006\ufee1\007\ufee1\011\ufee1\012\ufee1" +
    "\013\ufee1\014\ufee1\027\ufee1\031\ufee1\033\ufee1\041\ufee1\043" +
    "\ufee1\044\ufee1\045\ufee1\055\ufee1\056\ufee1\060\ufee1\063\ufee1" +
    "\064\ufee1\065\ufee1\070\ufee1\074\ufee1\075\ufee1\076\ufee1\103" +
    "\ufee1\104\ufee1\107\ufee1\115\ufee1\117\ufee1\133\ufee1\134\ufee1" +
    "\135\ufee1\144\ufee1\001\002\000\106\003\uff2b\005\uff2b\006" +
    "\uff2b\007\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\027\uff2b" +
    "\031\uff2b\033\uff2b\041\uff2b\043\uff2b\044\uff2b\045\uff2b\055" +
    "\uff2b\056\uff2b\060\uff2b\063\uff2b\064\uff2b\065\uff2b\070\uff2b" +
    "\074\uff2b\075\uff2b\076\uff2b\103\uff2b\104\uff2b\107\uff2b\115" +
    "\uff2b\117\uff2b\133\uff2b\134\uff2b\135\uff2b\144\uff2b\001\002" +
    "\000\106\003\ufee2\005\ufee2\006\ufee2\007\ufee2\011\ufee2\012" +
    "\ufee2\013\ufee2\014\ufee2\027\ufee2\031\ufee2\033\ufee2\041\ufee2" +
    "\043\ufee2\044\ufee2\045\ufee2\055\ufee2\056\ufee2\060\ufee2\063" +
    "\ufee2\064\ufee2\065\ufee2\070\ufee2\074\ufee2\075\ufee2\076\ufee2" +
    "\103\ufee2\104\ufee2\107\ufee2\115\ufee2\117\ufee2\133\ufee2\134" +
    "\ufee2\135\ufee2\144\ufee2\001\002\000\106\003\uff2a\005\uff2a" +
    "\006\uff2a\007\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a\027" +
    "\uff2a\031\uff2a\033\uff2a\041\uff2a\043\uff2a\044\uff2a\045\uff2a" +
    "\055\uff2a\056\uff2a\060\uff2a\063\uff2a\064\uff2a\065\uff2a\070" +
    "\uff2a\074\uff2a\075\uff2a\076\uff2a\103\uff2a\104\uff2a\107\uff2a" +
    "\115\uff2a\117\uff2a\133\uff2a\134\uff2a\135\uff2a\144\uff2a\001" +
    "\002\000\106\003\uff23\005\uff23\006\uff23\007\uff23\011\uff23" +
    "\012\uff23\013\uff23\014\uff23\027\uff23\031\uff23\033\uff23\041" +
    "\uff23\043\uff23\044\uff23\045\uff23\055\uff23\056\uff23\060\uff23" +
    "\063\uff23\064\uff23\065\uff23\070\uff23\074\uff23\075\uff23\076" +
    "\uff23\103\uff23\104\uff23\107\uff23\115\uff23\117\uff23\133\uff23" +
    "\134\uff23\135\uff23\144\uff23\001\002\000\006\041\uff20\042" +
    "\uff20\001\002\000\006\041\uff1f\042\uff1f\001\002\000\114" +
    "\004\060\005\051\006\014\007\101\010\072\011\044\012" +
    "\111\013\067\014\113\025\055\035\065\037\077\063\121" +
    "\070\071\074\112\075\100\076\040\077\104\102\054\103" +
    "\102\104\061\105\062\107\115\115\076\124\117\127\066" +
    "\130\042\131\123\132\045\133\110\134\106\135\116\136" +
    "\056\137\070\140\063\145\052\147\103\001\002\000\004" +
    "\144\346\001\002\000\106\003\uff2f\005\uff2f\006\uff2f\007" +
    "\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f\027\uff2f\031\uff2f" +
    "\033\uff2f\041\uff2f\043\uff2f\044\uff2f\045\uff2f\055\uff2f\056" +
    "\uff2f\060\uff2f\063\uff2f\064\uff2f\065\uff2f\070\uff2f\074\uff2f" +
    "\075\uff2f\076\uff2f\103\uff2f\104\uff2f\107\uff2f\115\uff2f\117" +
    "\uff2f\133\uff2f\134\uff2f\135\uff2f\144\uff2f\001\002\000\122" +
    "\004\uff69\010\uff69\025\uff69\031\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\041\uff69\046\uff69\047\uff69\052\uff69\053\uff69" +
    "\077\uff69\102\uff69\105\uff69\113\uff69\114\uff69\116\uff69\120" +
    "\uff69\122\uff69\123\uff69\124\uff69\125\uff69\126\uff69\127\uff69" +
    "\130\uff69\131\uff69\132\uff69\134\uff69\135\uff69\136\uff69\137" +
    "\uff69\140\uff69\141\uff69\142\uff69\143\uff69\144\uff69\145\uff69" +
    "\147\uff69\001\002\000\122\004\ufed5\010\ufed5\025\ufed5\031" +
    "\ufed5\035\ufed5\036\ufed5\037\ufed5\040\ufed5\041\ufed5\046\ufed5" +
    "\047\ufed5\052\ufed5\053\ufed5\077\ufed5\102\ufed5\105\ufed5\113" +
    "\ufed5\114\ufed5\116\ufed5\120\ufed5\122\ufed5\123\ufed5\124\ufed5" +
    "\125\ufed5\126\ufed5\127\ufed5\130\ufed5\131\ufed5\132\ufed5\134" +
    "\ufed5\135\ufed5\136\ufed5\137\ufed5\140\ufed5\141\ufed5\142\ufed5" +
    "\143\ufed5\144\ufed5\145\ufed5\147\ufed5\001\002\000\122\004" +
    "\ufed6\010\ufed6\025\ufed6\031\ufed6\035\ufed6\036\ufed6\037\ufed6" +
    "\040\ufed6\041\ufed6\046\ufed6\047\ufed6\052\ufed6\053\ufed6\077" +
    "\ufed6\102\ufed6\105\ufed6\113\ufed6\114\ufed6\116\ufed6\120\ufed6" +
    "\122\ufed6\123\ufed6\124\ufed6\125\ufed6\126\ufed6\127\ufed6\130" +
    "\ufed6\131\ufed6\132\ufed6\134\ufed6\135\ufed6\136\ufed6\137\ufed6" +
    "\140\ufed6\141\ufed6\142\ufed6\143\ufed6\144\ufed6\145\ufed6\147" +
    "\ufed6\001\002\000\024\006\uff0a\031\uffa2\036\uffa2\120\uffa2" +
    "\122\uffa2\123\uffa2\130\uffa2\135\030\144\uffa2\001\002\000" +
    "\012\031\ufec7\036\ufec7\120\ufec7\123\u0118\001\002\000\006" +
    "\006\014\134\024\001\002\000\012\031\uffb1\036\uffb1\120" +
    "\uffb1\123\uffb1\001\002\000\006\003\u0109\006\014\001\002" +
    "\000\012\031\uffb0\036\uffb0\120\uffb0\123\uffb0\001\002\000" +
    "\020\031\uffa6\036\uffa6\120\uffa6\122\u0106\123\uffa6\130\u0105" +
    "\144\uffa6\001\002\000\012\031\uffae\036\uffae\120\uffae\123" +
    "\uffae\001\002\000\012\031\uffaf\036\uffaf\120\uffaf\123\uffaf" +
    "\001\002\000\004\006\014\001\002\000\006\003\365\006" +
    "\014\001\002\000\006\041\u0102\046\u0100\001\002\000\004" +
    "\135\367\001\002\000\010\006\014\134\024\143\uffb7\001" +
    "\002\000\004\143\371\001\002\000\010\116\uffaa\120\uffaa" +
    "\124\373\001\002\000\006\116\157\120\ufec8\001\002\000" +
    "\006\006\014\134\024\001\002\000\006\116\uffa9\120\uffa9" +
    "\001\002\000\004\120\376\001\002\000\114\004\060\005" +
    "\051\006\014\007\101\010\072\011\044\012\111\013\067" +
    "\014\113\025\055\035\065\037\077\063\121\070\071\074" +
    "\112\075\100\076\040\077\104\102\054\103\102\104\061" +
    "\105\062\107\115\115\076\124\117\127\066\130\042\131" +
    "\123\132\045\133\110\134\106\135\116\136\056\137\070" +
    "\140\063\145\052\147\103\001\002\000\006\041\u0102\046" +
    "\u0100\001\002\000\036\006\ufedd\015\ufedd\016\ufedd\020\ufedd" +
    "\031\ufedd\036\ufedd\041\ufedd\066\ufedd\071\ufedd\101\ufedd\116" +
    "\ufedd\120\ufedd\123\ufedd\134\ufedd\001\002\000\036\006\uffac" +
    "\015\uffac\016\uffac\020\uffac\031\uffac\036\uffac\041\uffac\066" +
    "\uffac\071\uffac\101\uffac\116\uffac\120\uffac\123\uffac\134\uffac" +
    "\001\002\000\036\006\ufede\015\ufede\016\ufede\020\ufede\031" +
    "\ufede\036\ufede\041\ufede\066\ufede\071\ufede\101\ufede\116\ufede" +
    "\120\ufede\123\ufede\134\ufede\001\002\000\036\006\uffab\015" +
    "\uffab\016\uffab\020\uffab\031\uffab\036\uffab\041\uffab\066\uffab" +
    "\071\uffab\101\uffab\116\uffab\120\uffab\123\uffab\134\uffab\001" +
    "\002\000\020\031\uffa1\036\uffa1\120\uffa1\122\uffa1\123\uffa1" +
    "\130\uffa1\144\uffa1\001\002\000\114\004\060\005\051\006" +
    "\014\007\101\010\072\011\044\012\111\013\067\014\113" +
    "\025\055\035\065\037\077\063\121\070\071\074\112\075" +
    "\100\076\040\077\104\102\054\103\102\104\061\105\062" +
    "\107\115\115\076\124\117\127\066\130\042\131\123\132" +
    "\045\133\110\134\106\135\116\136\056\137\070\140\063" +
    "\145\052\147\103\001\002\000\114\004\060\005\051\006" +
    "\014\007\101\010\072\011\044\012\111\013\067\014\113" +
    "\025\055\035\065\037\077\063\121\070\071\074\112\075" +
    "\100\076\040\077\104\102\054\103\102\104\061\105\062" +
    "\107\115\115\076\124\117\127\066\130\042\131\123\132" +
    "\045\133\110\134\106\135\116\136\056\137\070\140\063" +
    "\145\052\147\103\001\002\000\014\031\uffa5\036\uffa5\120" +
    "\uffa5\123\uffa5\144\uffa5\001\002\000\014\031\uffa4\036\uffa4" +
    "\120\uffa4\123\uffa4\144\uffa4\001\002\000\006\041\u0113\056" +
    "\u0112\001\002\000\004\135\u010b\001\002\000\010\006\014" +
    "\134\024\143\uffb7\001\002\000\004\143\u010d\001\002\000" +
    "\006\031\ufec8\116\157\001\002\000\004\031\u010f\001\002" +
    "\000\070\003\202\005\051\006\014\007\101\011\044\012" +
    "\111\013\067\014\113\027\175\031\173\033\171\063\121" +
    "\064\166\065\204\070\176\074\112\075\100\076\040\103" +
    "\102\104\061\107\115\115\076\117\205\133\110\134\106" +
    "\135\116\144\163\001\002\000\074\003\202\005\051\006" +
    "\014\007\101\011\044\012\111\013\067\014\113\027\175" +
    "\031\173\033\171\041\u0113\056\u0112\063\121\064\166\065" +
    "\204\070\176\074\112\075\100\076\040\103\102\104\061" +
    "\107\115\115\076\117\205\133\110\134\106\135\116\144" +
    "\163\001\002\000\012\031\uffa8\036\uffa8\120\uffa8\123\uffa8" +
    "\001\002\000\122\004\ufed3\010\ufed3\025\ufed3\031\ufed3\035" +
    "\ufed3\036\ufed3\037\ufed3\040\ufed3\041\ufed3\046\ufed3\047\ufed3" +
    "\052\ufed3\053\ufed3\077\ufed3\102\ufed3\105\ufed3\113\ufed3\114" +
    "\ufed3\116\ufed3\120\ufed3\122\ufed3\123\ufed3\124\ufed3\125\ufed3" +
    "\126\ufed3\127\ufed3\130\ufed3\131\ufed3\132\ufed3\134\ufed3\135" +
    "\ufed3\136\ufed3\137\ufed3\140\ufed3\141\ufed3\142\ufed3\143\ufed3" +
    "\144\ufed3\145\ufed3\147\ufed3\001\002\000\122\004\ufed4\010" +
    "\ufed4\025\ufed4\031\ufed4\035\ufed4\036\ufed4\037\ufed4\040\ufed4" +
    "\041\ufed4\046\ufed4\047\ufed4\052\ufed4\053\ufed4\077\ufed4\102" +
    "\ufed4\105\ufed4\113\ufed4\114\ufed4\116\ufed4\120\ufed4\122\ufed4" +
    "\123\ufed4\124\ufed4\125\ufed4\126\ufed4\127\ufed4\130\ufed4\131" +
    "\ufed4\132\ufed4\134\ufed4\135\ufed4\136\ufed4\137\ufed4\140\ufed4" +
    "\141\ufed4\142\ufed4\143\ufed4\144\ufed4\145\ufed4\147\ufed4\001" +
    "\002\000\012\031\uffa7\036\uffa7\120\uffa7\123\uffa7\001\002" +
    "\000\004\130\u0116\001\002\000\114\004\060\005\051\006" +
    "\014\007\101\010\072\011\044\012\111\013\067\014\113" +
    "\025\055\035\065\037\077\063\121\070\071\074\112\075" +
    "\100\076\040\077\104\102\054\103\102\104\061\105\062" +
    "\107\115\115\076\124\117\127\066\130\042\131\123\132" +
    "\045\133\110\134\106\135\116\136\056\137\070\140\063" +
    "\145\052\147\103\001\002\000\014\031\uffa3\036\uffa3\120" +
    "\uffa3\123\uffa3\144\uffa3\001\002\000\014\006\014\066\364" +
    "\101\354\110\356\134\024\001\002\000\012\031\uffad\036" +
    "\uffad\120\uffad\123\uffad\001\002\000\010\123\uffb2\130\uffb2" +
    "\143\uffb2\001\002\000\114\004\060\005\051\006\014\007" +
    "\101\010\072\011\044\012\111\013\067\014\113\025\055" +
    "\035\065\037\077\063\121\070\071\074\112\075\100\076" +
    "\040\077\104\102\054\103\102\104\061\105\062\107\115" +
    "\115\076\124\117\127\066\130\042\131\123\132\045\133" +
    "\110\134\106\135\116\136\056\137\070\140\063\145\052" +
    "\147\103\001\002\000\006\123\uffb4\143\uffb4\001\002\000" +
    "\006\006\014\134\024\001\002\000\006\123\uffb8\143\uffb8" +
    "\001\002\000\122\004\uff68\010\uff68\025\uff68\031\uff68\035" +
    "\uff68\036\uff68\037\uff68\040\uff68\041\uff68\046\uff68\047\uff68" +
    "\052\uff68\053\uff68\077\uff68\102\uff68\105\uff68\113\uff68\114" +
    "\uff68\116\uff68\120\uff68\122\uff68\123\uff68\124\uff68\125\uff68" +
    "\126\uff68\127\uff68\130\uff68\131\uff68\132\uff68\134\uff68\135" +
    "\uff68\136\uff68\137\uff68\140\uff68\141\uff68\142\uff68\143\uff68" +
    "\144\uff68\145\uff68\147\uff68\001\002\000\006\120\u0125\123" +
    "\u0118\001\002\000\006\041\u0124\053\u0122\001\002\000\122" +
    "\004\ufed7\010\ufed7\025\ufed7\031\ufed7\035\ufed7\036\ufed7\037" +
    "\ufed7\040\ufed7\041\ufed7\046\ufed7\047\ufed7\052\ufed7\053\ufed7" +
    "\077\ufed7\102\ufed7\105\ufed7\113\ufed7\114\ufed7\116\ufed7\120" +
    "\ufed7\122\ufed7\123\ufed7\124\ufed7\125\ufed7\126\ufed7\127\ufed7" +
    "\130\ufed7\131\ufed7\132\ufed7\134\ufed7\135\ufed7\136\ufed7\137" +
    "\ufed7\140\ufed7\141\ufed7\142\ufed7\143\ufed7\144\ufed7\145\ufed7" +
    "\147\ufed7\001\002\000\122\004\uff83\010\uff83\025\uff83\031" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\046\uff83" +
    "\047\uff83\052\uff83\053\uff83\077\uff83\102\uff83\105\uff83\113" +
    "\uff83\114\uff83\116\uff83\120\uff83\122\uff83\123\uff83\124\uff83" +
    "\125\uff83\126\uff83\127\uff83\130\uff83\131\uff83\132\uff83\134" +
    "\uff83\135\uff83\136\uff83\137\uff83\140\uff83\141\uff83\142\uff83" +
    "\143\uff83\144\uff83\145\uff83\147\uff83\001\002\000\122\004" +
    "\ufed8\010\ufed8\025\ufed8\031\ufed8\035\ufed8\036\ufed8\037\ufed8" +
    "\040\ufed8\041\ufed8\046\ufed8\047\ufed8\052\ufed8\053\ufed8\077" +
    "\ufed8\102\ufed8\105\ufed8\113\ufed8\114\ufed8\116\ufed8\120\ufed8" +
    "\122\ufed8\123\ufed8\124\ufed8\125\ufed8\126\ufed8\127\ufed8\130" +
    "\ufed8\131\ufed8\132\ufed8\134\ufed8\135\ufed8\136\ufed8\137\ufed8" +
    "\140\ufed8\141\ufed8\142\ufed8\143\ufed8\144\ufed8\145\ufed8\147" +
    "\ufed8\001\002\000\114\004\060\005\051\006\014\007\101" +
    "\010\072\011\044\012\111\013\067\014\113\025\055\035" +
    "\065\037\077\063\121\070\071\074\112\075\100\076\040" +
    "\077\104\102\054\103\102\104\061\105\062\107\115\115" +
    "\076\124\117\127\066\130\042\131\123\132\045\133\110" +
    "\134\106\135\116\136\056\137\070\140\063\145\052\147" +
    "\103\001\002\000\006\041\u0124\053\u0122\001\002\000\122" +
    "\004\uff84\010\uff84\025\uff84\031\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\046\uff84\047\uff84\052\uff84\053\uff84" +
    "\077\uff84\102\uff84\105\uff84\113\uff84\114\uff84\116\uff84\120" +
    "\uff84\122\uff84\123\uff84\124\uff84\125\uff84\126\uff84\127\uff84" +
    "\130\uff84\131\uff84\132\uff84\134\uff84\135\uff84\136\uff84\137" +
    "\uff84\140\uff84\141\uff84\142\uff84\143\uff84\144\uff84\145\uff84" +
    "\147\uff84\001\002\000\122\004\uff67\010\uff67\025\uff67\031" +
    "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\046\uff67" +
    "\047\uff67\052\uff67\053\uff67\077\uff67\102\uff67\105\uff67\113" +
    "\uff67\114\uff67\116\uff67\120\uff67\122\uff67\123\uff67\124\uff67" +
    "\125\uff67\126\uff67\127\uff67\130\uff67\131\uff67\132\uff67\134" +
    "\uff67\135\uff67\136\uff67\137\uff67\140\uff67\141\uff67\142\uff67" +
    "\143\uff67\144\uff67\145\uff67\147\uff67\001\002\000\010\120" +
    "\u012b\123\137\141\ufeed\001\002\000\004\141\u012d\001\002" +
    "\000\006\064\166\065\204\001\002\000\010\123\234\141" +
    "\ufeec\142\ufeec\001\002\000\122\004\uff66\010\uff66\025\uff66" +
    "\031\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\046" +
    "\uff66\047\uff66\052\uff66\053\uff66\077\uff66\102\uff66\105\uff66" +
    "\113\uff66\114\uff66\116\uff66\120\uff66\122\uff66\123\uff66\124" +
    "\uff66\125\uff66\126\uff66\127\uff66\130\uff66\131\uff66\132\uff66" +
    "\134\uff66\135\uff66\136\uff66\137\uff66\140\uff66\141\uff66\142" +
    "\uff66\143\uff66\144\uff66\145\uff66\147\uff66\001\002\000\122" +
    "\004\uff82\010\uff82\025\uff82\031\uff82\035\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\046\uff82\047\uff82\052\uff82\053\uff82" +
    "\077\uff82\102\uff82\105\uff82\113\uff82\114\uff82\116\uff82\120" +
    "\uff82\122\uff82\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82" +
    "\130\uff82\131\uff82\132\uff82\134\uff82\135\uff82\136\uff82\137" +
    "\uff82\140\uff82\141\uff82\142\uff82\143\uff82\144\uff82\145\uff82" +
    "\147\uff82\001\002\000\010\120\u012b\123\137\142\ufeed\001" +
    "\002\000\004\142\u0131\001\002\000\122\004\uff81\010\uff81" +
    "\025\uff81\031\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\046\uff81\047\uff81\052\uff81\053\uff81\077\uff81\102\uff81" +
    "\105\uff81\113\uff81\114\uff81\116\uff81\120\uff81\122\uff81\123" +
    "\uff81\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131\uff81" +
    "\132\uff81\134\uff81\135\uff81\136\uff81\137\uff81\140\uff81\141" +
    "\uff81\142\uff81\143\uff81\144\uff81\145\uff81\147\uff81\001\002" +
    "\000\114\004\060\005\051\006\014\007\101\010\072\011" +
    "\044\012\111\013\067\014\113\025\055\035\065\037\077" +
    "\063\121\070\071\074\112\075\100\076\040\077\104\102" +
    "\054\103\102\104\061\105\062\107\115\115\076\124\117" +
    "\127\066\130\042\131\123\132\045\133\110\134\106\135" +
    "\116\136\056\137\070\140\063\145\052\147\103\001\002" +
    "\000\114\004\uff09\005\uff09\006\uff09\007\uff09\010\uff09\011" +
    "\uff09\012\uff09\013\uff09\014\uff09\025\uff09\035\uff09\037\uff09" +
    "\063\uff09\070\uff09\074\uff09\075\uff09\076\uff09\077\uff09\102" +
    "\uff09\103\uff09\104\uff09\105\uff09\107\uff09\115\uff09\124\uff09" +
    "\127\uff09\130\uff09\131\uff09\132\uff09\133\uff09\134\uff09\135" +
    "\uff09\136\uff09\137\uff09\140\uff09\145\uff09\147\uff09\001\002" +
    "\000\112\004\uff89\010\uff89\025\uff89\031\uff89\035\uff89\036" +
    "\uff89\037\uff89\040\uff89\041\uff89\046\uff89\047\uff89\052\uff89" +
    "\053\uff89\077\uff89\102\uff89\105\uff89\113\uff89\114\uff89\116" +
    "\uff89\120\uff89\123\uff89\124\uff89\125\uff89\127\uff89\130\uff89" +
    "\131\uff89\132\uff89\136\uff89\137\uff89\140\uff89\141\uff89\142" +
    "\uff89\143\uff89\144\uff89\145\uff89\147\uff89\001\002\000\010" +
    "\006\014\134\024\143\uffb7\001\002\000\004\143\u0137\001" +
    "\002\000\010\116\uffaa\120\uffaa\124\373\001\002\000\006" +
    "\116\157\120\ufec8\001\002\000\004\120\u013a\001\002\000" +
    "\114\004\060\005\051\006\014\007\101\010\072\011\044" +
    "\012\111\013\067\014\113\025\055\035\065\037\077\063" +
    "\121\070\071\074\112\075\100\076\040\077\104\102\054" +
    "\103\102\104\061\105\062\107\115\115\076\124\117\127" +
    "\066\130\042\131\123\132\045\133\110\134\106\135\116" +
    "\136\056\137\070\140\063\145\052\147\103\001\002\000" +
    "\006\041\u013d\052\u013c\001\002\000\122\004\ufed9\010\ufed9" +
    "\025\ufed9\031\ufed9\035\ufed9\036\ufed9\037\ufed9\040\ufed9\041" +
    "\ufed9\046\ufed9\047\ufed9\052\ufed9\053\ufed9\077\ufed9\102\ufed9" +
    "\105\ufed9\113\ufed9\114\ufed9\116\ufed9\120\ufed9\122\ufed9\123" +
    "\ufed9\124\ufed9\125\ufed9\126\ufed9\127\ufed9\130\ufed9\131\ufed9" +
    "\132\ufed9\134\ufed9\135\ufed9\136\ufed9\137\ufed9\140\ufed9\141" +
    "\ufed9\142\ufed9\143\ufed9\144\ufed9\145\ufed9\147\ufed9\001\002" +
    "\000\122\004\ufeda\010\ufeda\025\ufeda\031\ufeda\035\ufeda\036" +
    "\ufeda\037\ufeda\040\ufeda\041\ufeda\046\ufeda\047\ufeda\052\ufeda" +
    "\053\ufeda\077\ufeda\102\ufeda\105\ufeda\113\ufeda\114\ufeda\116" +
    "\ufeda\120\ufeda\122\ufeda\123\ufeda\124\ufeda\125\ufeda\126\ufeda" +
    "\127\ufeda\130\ufeda\131\ufeda\132\ufeda\134\ufeda\135\ufeda\136" +
    "\ufeda\137\ufeda\140\ufeda\141\ufeda\142\ufeda\143\ufeda\144\ufeda" +
    "\145\ufeda\147\ufeda\001\002\000\122\004\uff85\010\uff85\025" +
    "\uff85\031\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\046\uff85\047\uff85\052\uff85\053\uff85\077\uff85\102\uff85\105" +
    "\uff85\113\uff85\114\uff85\116\uff85\120\uff85\122\uff85\123\uff85" +
    "\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131\uff85\132" +
    "\uff85\134\uff85\135\uff85\136\uff85\137\uff85\140\uff85\141\uff85" +
    "\142\uff85\143\uff85\144\uff85\145\uff85\147\uff85\001\002\000" +
    "\004\113\u0140\001\002\000\114\004\060\005\051\006\014" +
    "\007\101\010\072\011\044\012\111\013\067\014\113\025" +
    "\055\035\065\037\077\063\121\070\071\074\112\075\100" +
    "\076\040\077\104\102\054\103\102\104\061\105\062\107" +
    "\115\115\076\124\117\127\066\130\042\131\123\132\045" +
    "\133\110\134\106\135\116\136\056\137\070\140\063\145" +
    "\052\147\103\001\002\000\122\004\uff62\010\uff62\025\uff62" +
    "\031\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62\046" +
    "\uff62\047\uff62\052\uff62\053\uff62\077\uff62\102\uff62\105\uff62" +
    "\113\uff62\114\uff62\116\uff62\120\uff62\122\uff62\123\uff62\124" +
    "\uff62\125\uff62\126\uff62\127\uff62\130\uff62\131\uff62\132\uff62" +
    "\134\uff62\135\uff62\136\uff62\137\uff62\140\uff62\141\uff62\142" +
    "\uff62\143\uff62\144\uff62\145\uff62\147\uff62\001\002\000\114" +
    "\004\060\005\051\006\014\007\101\010\072\011\044\012" +
    "\111\013\067\014\113\025\055\035\065\037\077\063\121" +
    "\070\071\074\112\075\100\076\040\077\104\102\054\103" +
    "\102\104\061\105\062\107\115\115\076\124\117\127\066" +
    "\130\042\131\123\132\045\133\110\134\106\135\116\136" +
    "\056\137\070\140\063\145\052\147\103\001\002\000\112" +
    "\004\uff88\010\uff88\025\uff88\031\uff88\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\046\uff88\047\uff88\052\uff88\053\uff88" +
    "\077\uff88\102\uff88\105\uff88\113\uff88\114\uff88\116\uff88\120" +
    "\uff88\123\uff88\124\uff88\125\uff88\127\uff88\130\uff88\131\uff88" +
    "\132\uff88\136\uff88\137\uff88\140\uff88\141\uff88\142\uff88\143" +
    "\uff88\144\uff88\145\uff88\147\uff88\001\002\000\116\004\060" +
    "\005\051\006\014\007\101\010\072\011\044\012\111\013" +
    "\067\014\113\025\055\035\065\037\077\063\121\070\071" +
    "\074\112\075\100\076\040\077\104\102\054\103\102\104" +
    "\061\105\062\107\115\115\076\124\117\127\066\130\042" +
    "\131\123\132\045\133\110\134\106\135\116\136\056\137" +
    "\070\140\063\141\u0148\145\052\147\103\001\002\000\004" +
    "\125\u014d\001\002\000\010\120\u012b\123\u014a\141\ufeed\001" +
    "\002\000\010\120\uff4b\123\uff4b\141\uff4b\001\002\000\122" +
    "\004\uff79\010\uff79\025\uff79\031\uff79\035\uff79\036\uff79\037" +
    "\uff79\040\uff79\041\uff79\046\uff79\047\uff79\052\uff79\053\uff79" +
    "\077\uff79\102\uff79\105\uff79\113\uff79\114\uff79\116\uff79\120" +
    "\uff79\122\uff79\123\uff79\124\uff79\125\uff79\126\uff79\127\uff79" +
    "\130\uff79\131\uff79\132\uff79\134\uff79\135\uff79\136\uff79\137" +
    "\uff79\140\uff79\141\uff79\142\uff79\143\uff79\144\uff79\145\uff79" +
    "\147\uff79\001\002\000\004\141\u014c\001\002\000\114\004" +
    "\060\005\051\006\014\007\101\010\072\011\044\012\111" +
    "\013\067\014\113\025\055\035\065\037\077\063\121\070" +
    "\071\074\112\075\100\076\040\077\104\102\054\103\102" +
    "\104\061\105\062\107\115\115\076\124\117\127\066\130" +
    "\042\131\123\132\045\133\110\134\106\135\116\136\056" +
    "\137\070\140\063\145\052\147\103\001\002\000\010\120" +
    "\uff4a\123\uff4a\141\uff4a\001\002\000\122\004\uff78\010\uff78" +
    "\025\uff78\031\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\046\uff78\047\uff78\052\uff78\053\uff78\077\uff78\102\uff78" +
    "\105\uff78\113\uff78\114\uff78\116\uff78\120\uff78\122\uff78\123" +
    "\uff78\124\uff78\125\uff78\126\uff78\127\uff78\130\uff78\131\uff78" +
    "\132\uff78\134\uff78\135\uff78\136\uff78\137\uff78\140\uff78\141" +
    "\uff78\142\uff78\143\uff78\144\uff78\145\uff78\147\uff78\001\002" +
    "\000\114\004\060\005\051\006\014\007\101\010\072\011" +
    "\044\012\111\013\067\014\113\025\055\035\065\037\077" +
    "\063\121\070\071\074\112\075\100\076\040\077\104\102" +
    "\054\103\102\104\061\105\062\107\115\115\076\124\117" +
    "\127\066\130\042\131\123\132\045\133\110\134\106\135" +
    "\116\136\056\137\070\140\063\145\052\147\103\001\002" +
    "\000\010\120\uff4c\123\uff4c\141\uff4c\001\002\000\004\006" +
    "\014\001\002\000\006\123\uff9d\143\uff9d\001\002\000\022" +
    "\006\uff14\116\uff14\120\uff14\123\uff14\124\uff14\142\uff14\143" +
    "\uff14\144\uff14\001\002\000\006\124\u0159\142\u0158\001\002" +
    "\000\010\123\uff93\124\uff93\142\uff93\001\002\000\010\123" +
    "\u0156\124\uff90\142\uff90\001\002\000\010\123\uff94\124\uff94" +
    "\142\uff94\001\002\000\006\006\014\134\024\001\002\000" +
    "\010\123\uff92\124\uff92\142\uff92\001\002\000\022\006\uff17" +
    "\116\uff17\120\uff17\123\uff17\124\uff17\142\uff17\143\uff17\144" +
    "\uff17\001\002\000\010\006\014\134\024\142\u015b\001\002" +
    "\000\004\142\u015c\001\002\000\022\006\uff16\116\uff16\120" +
    "\uff16\123\uff16\124\uff16\142\uff16\143\uff16\144\uff16\001\002" +
    "\000\022\006\uff15\116\uff15\120\uff15\123\uff15\124\uff15\142" +
    "\uff15\143\uff15\144\uff15\001\002\000\004\006\014\001\002" +
    "\000\004\135\uff0f\001\002\000\006\123\uff12\142\uff12\001" +
    "\002\000\010\006\014\134\024\143\uffb7\001\002\000\004" +
    "\143\u0162\001\002\000\012\006\ufecc\062\uff45\100\u0167\134" +
    "\ufecc\001\002\000\006\062\uff47\123\uff47\001\002\000\006" +
    "\006\014\134\024\001\002\000\004\062\u016a\001\002\000" +
    "\006\062\uff44\123\u0168\001\002\000\006\006\ufecb\134\ufecb" +
    "\001\002\000\010\006\ufecc\100\u0167\134\ufecc\001\002\000" +
    "\006\062\uff46\123\uff46\001\002\000\012\006\ufecc\100\u0167" +
    "\120\uff3f\134\ufecc\001\002\000\004\120\u0174\001\002\000" +
    "\006\006\014\134\024\001\002\000\006\120\uff3e\123\u016f" +
    "\001\002\000\006\120\uff41\123\uff41\001\002\000\010\006" +
    "\ufecc\100\u0167\134\ufecc\001\002\000\006\120\uff40\123\uff40" +
    "\001\002\000\004\006\014\001\002\000\012\006\uff0a\120" +
    "\uff43\123\uff43\135\030\001\002\000\006\120\uff42\123\uff42" +
    "\001\002\000\020\015\uffc9\016\uffc9\020\uffc9\041\uffc9\071" +
    "\uffc9\116\uffc9\133\u0175\001\002\000\004\006\014\001\002" +
    "\000\016\015\u0181\016\u017c\020\u017e\041\uffff\071\u0182\116" +
    "\u017b\001\002\000\016\015\ufff7\016\ufff7\020\ufff7\041\ufff7" +
    "\071\ufff7\116\ufff7\001\002\000\016\015\ufff8\016\ufff8\020" +
    "\ufff8\041\ufff8\071\ufff8\116\ufff8\001\002\000\016\015\ufffd" +
    "\016\ufffd\020\ufffd\041\ufffd\071\ufffd\116\ufffd\001\002\000" +
    "\016\015\u0181\016\u017c\020\u017e\041\ufffe\071\u0182\116\u017b" +
    "\001\002\000\012\006\014\066\364\101\354\134\024\001" +
    "\002\000\026\006\014\015\uffd9\016\uffd9\020\uffd9\041\uffd9" +
    "\064\166\065\204\070\u01d5\071\uffd9\116\uffd9\001\002\000" +
    "\016\015\ufff9\016\ufff9\020\ufff9\041\ufff9\071\ufff9\116\ufff9" +
    "\001\002\000\022\006\014\015\uffef\016\uffef\020\uffef\041" +
    "\uffef\071\uffef\116\uffef\134\024\001\002\000\016\015\ufffa" +
    "\016\ufffa\020\ufffa\041\ufffa\071\ufffa\116\ufffa\001\002\000" +
    "\016\015\ufffb\016\ufffb\020\ufffb\041\ufffb\071\ufffb\116\ufffb" +
    "\001\002\000\004\006\007\001\002\000\016\003\u0187\006" +
    "\uff50\017\u018a\021\u0189\024\uff50\116\u0186\001\002\000\004" +
    "\041\u0184\001\002\000\020\002\ufee7\015\ufee7\016\ufee7\020" +
    "\ufee7\041\ufee7\071\ufee7\116\ufee7\001\002\000\004\002\001" +
    "\001\002\000\006\006\uff4f\024\uff4f\001\002\000\004\144" +
    "\u0193\001\002\000\006\006\007\024\u018b\001\002\000\006" +
    "\006\uff4e\024\uff4e\001\002\000\006\006\uff4d\024\uff4d\001" +
    "\002\000\004\006\007\001\002\000\006\130\u018d\144\u018e" +
    "\001\002\000\004\006\014\001\002\000\016\015\uff53\016" +
    "\uff53\020\uff53\041\uff53\071\uff53\116\uff53\001\002\000\004" +
    "\144\u0190\001\002\000\016\015\uff52\016\uff52\020\uff52\041" +
    "\uff52\071\uff52\116\uff52\001\002\000\004\144\u0192\001\002" +
    "\000\016\015\uff54\016\uff54\020\uff54\041\uff54\071\uff54\116" +
    "\uff54\001\002\000\016\015\uff51\016\uff51\020\uff51\041\uff51" +
    "\071\uff51\116\uff51\001\002\000\006\134\012\135\uff11\001" +
    "\002\000\004\135\u0196\001\002\000\010\006\014\134\024" +
    "\143\uffb7\001\002\000\004\143\u0198\001\002\000\012\006" +
    "\ufecc\062\uff45\100\u0167\134\ufecc\001\002\000\004\062\u019a" +
    "\001\002\000\012\006\ufecc\100\u0167\120\uff3f\134\ufecc\001" +
    "\002\000\004\120\u019c\001\002\000\016\015\u0181\016\u017c" +
    "\020\u017e\041\uffff\071\u0182\116\u017b\001\002\000\004\041" +
    "\u0184\001\002\000\016\015\ufff1\016\ufff1\020\ufff1\041\ufff1" +
    "\071\ufff1\116\ufff1\001\002\000\012\006\uff0a\130\uffe9\134" +
    "\u01a6\135\030\001\002\000\022\006\014\015\uffee\016\uffee" +
    "\020\uffee\041\uffee\071\uffee\116\uffee\134\024\001\002\000" +
    "\022\006\uffed\015\uffed\016\uffed\020\uffed\041\uffed\071\uffed" +
    "\116\uffed\134\uffed\001\002\000\016\015\ufff0\016\ufff0\020" +
    "\ufff0\041\ufff0\071\ufff0\116\ufff0\001\002\000\004\006\014" +
    "\001\002\000\006\130\uffe9\134\u01a6\001\002\000\004\130" +
    "\u01ad\001\002\000\116\004\060\005\051\006\014\007\101" +
    "\010\072\011\044\012\111\013\067\014\113\025\055\035" +
    "\065\037\077\063\121\070\071\074\112\075\100\076\040" +
    "\077\104\102\054\103\102\104\061\105\062\107\115\115" +
    "\076\124\117\127\066\130\042\131\123\132\045\133\110" +
    "\134\106\135\116\136\056\137\070\140\063\142\u01ab\145" +
    "\052\147\103\001\002\000\006\130\uffe8\134\u01a6\001\002" +
    "\000\006\130\uffe7\134\uffe7\001\002\000\006\130\uffe6\134" +
    "\uffe6\001\002\000\004\142\u01ac\001\002\000\006\130\uffe5" +
    "\134\uffe5\001\002\000\006\130\uffe4\134\uffe4\001\002\000" +
    "\010\006\014\070\u01b0\134\u01af\001\002\000\004\144\u01ca" +
    "\001\002\000\010\006\014\070\u01b0\134\u01af\001\002\000" +
    "\114\004\060\005\051\006\014\007\101\010\072\011\044" +
    "\012\111\013\067\014\113\025\055\035\065\037\077\063" +
    "\121\070\071\074\112\075\100\076\040\077\104\102\054" +
    "\103\102\104\061\105\062\107\115\115\076\124\117\127" +
    "\066\130\042\131\123\132\045\133\110\134\106\135\116" +
    "\136\056\137\070\140\063\145\052\147\103\001\002\000" +
    "\004\135\u01b2\001\002\000\006\006\014\143\uffde\001\002" +
    "\000\004\143\u01bc\001\002\000\006\123\u01b8\143\uffdd\001" +
    "\002\000\004\130\u01b6\001\002\000\114\004\060\005\051" +
    "\006\014\007\101\010\072\011\044\012\111\013\067\014" +
    "\113\025\055\035\065\037\077\063\121\070\071\074\112" +
    "\075\100\076\040\077\104\102\054\103\102\104\061\105" +
    "\062\107\115\115\076\124\117\127\066\130\042\131\123" +
    "\132\045\133\110\134\106\135\116\136\056\137\070\140" +
    "\063\145\052\147\103\001\002\000\006\123\uffdc\143\uffdc" +
    "\001\002\000\004\006\014\001\002\000\004\130\u01ba\001" +
    "\002\000\114\004\060\005\051\006\014\007\101\010\072" +
    "\011\044\012\111\013\067\014\113\025\055\035\065\037" +
    "\077\063\121\070\071\074\112\075\100\076\040\077\104" +
    "\102\054\103\102\104\061\105\062\107\115\115\076\124" +
    "\117\127\066\130\042\131\123\132\045\133\110\134\106" +
    "\135\116\136\056\137\070\140\063\145\052\147\103\001" +
    "\002\000\006\123\uffdb\143\uffdb\001\002\000\022\040\uffc9" +
    "\041\uffc9\047\uffc9\120\uffc9\123\uffc9\133\u0175\142\uffc9\144" +
    "\uffc9\001\002\000\020\040\uffe3\041\uffe3\047\uffe3\120\uffe3" +
    "\123\uffe3\142\uffe3\144\uffe3\001\002\000\004\113\u01bf\001" +
    "\002\000\010\006\014\070\u01b0\134\u01af\001\002\000\004" +
    "\040\u01c1\001\002\000\010\006\014\070\u01b0\134\u01af\001" +
    "\002\000\006\041\274\047\273\001\002\000\020\040\uffe2" +
    "\041\uffe2\047\uffe2\120\uffe2\123\uffe2\142\uffe2\144\uffe2\001" +
    "\002\000\010\120\uffe0\123\uffe0\142\uffe0\001\002\000\010" +
    "\120\u012b\123\u01c6\142\ufeed\001\002\000\010\006\014\070" +
    "\u01b0\134\u01af\001\002\000\004\142\u01c8\001\002\000\020" +
    "\040\uffe1\041\uffe1\047\uffe1\120\uffe1\123\uffe1\142\uffe1\144" +
    "\uffe1\001\002\000\010\120\uffdf\123\uffdf\142\uffdf\001\002" +
    "\000\022\006\uffeb\015\uffeb\016\uffeb\020\uffeb\041\uffeb\071" +
    "\uffeb\116\uffeb\134\uffeb\001\002\000\022\006\uffec\015\uffec" +
    "\016\uffec\020\uffec\041\uffec\071\uffec\116\uffec\134\uffec\001" +
    "\002\000\004\130\u01cd\001\002\000\010\006\014\070\u01b0" +
    "\134\u01af\001\002\000\004\144\u01cf\001\002\000\022\006" +
    "\uffea\015\uffea\016\uffea\020\uffea\041\uffea\071\uffea\116\uffea" +
    "\134\uffea\001\002\000\016\015\uffda\016\uffda\020\uffda\041" +
    "\uffda\071\uffda\116\uffda\001\002\000\014\124\uffcd\126\uffcd" +
    "\133\uffcd\134\u01e3\144\uffcd\001\002\000\034\006\uffd7\015" +
    "\uffd7\016\uffd7\020\uffd7\040\uffd7\041\uffd7\045\uffd7\047\uffd7" +
    "\064\uffd7\065\uffd7\070\uffd7\071\uffd7\116\uffd7\001\002\000" +
    "\004\124\u01f2\001\002\000\010\124\uffd1\133\uffd1\144\uffd1" +
    "\001\002\000\114\004\060\005\051\006\014\007\101\010" +
    "\072\011\044\012\111\013\067\014\113\025\055\035\065" +
    "\037\077\063\121\070\071\074\112\075\100\076\040\077" +
    "\104\102\054\103\102\104\061\105\062\107\115\115\076" +
    "\124\117\127\066\130\042\131\123\132\045\133\110\134" +
    "\106\135\116\136\056\137\070\140\063\145\052\147\103" +
    "\001\002\000\034\006\uffd3\015\uffd3\016\uffd3\020\uffd3\040" +
    "\uffd3\041\uffd3\045\uffd3\047\uffd3\064\uffd3\065\uffd3\070\uffd3" +
    "\071\uffd3\116\uffd3\001\002\000\034\006\uffd4\015\uffd4\016" +
    "\uffd4\020\uffd4\040\uffd4\041\uffd4\045\uffd4\047\uffd4\064\uffd4" +
    "\065\uffd4\070\uffd4\071\uffd4\116\uffd4\001\002\000\032\006" +
    "\014\015\uffd8\016\uffd8\020\uffd8\040\uffd8\041\uffd8\047\uffd8" +
    "\064\166\065\204\070\u01d5\071\uffd8\116\uffd8\001\002\000" +
    "\004\126\u01e0\001\002\000\034\006\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\040\uffd5\041\uffd5\045\uffd5\047\uffd5\064\uffd5\065" +
    "\uffd5\070\uffd5\071\uffd5\116\uffd5\001\002\000\006\036\u01dc" +
    "\123\234\001\002\000\012\006\014\064\166\065\204\070" +
    "\u01d5\001\002\000\016\006\014\041\232\045\230\064\166" +
    "\065\204\070\u01d5\001\002\000\034\006\uffc1\015\uffc1\016" +
    "\uffc1\020\uffc1\040\uffc1\041\uffc1\045\uffc1\047\uffc1\064\uffc1" +
    "\065\uffc1\070\uffc1\071\uffc1\116\uffc1\001\002\000\034\006" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\040\uffd6\041\uffd6\045\uffd6" +
    "\047\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\116\uffd6\001" +
    "\002\000\004\006\014\001\002\000\010\124\uffd0\133\uffd0" +
    "\144\uffd0\001\002\000\012\124\uffcd\133\uffcd\134\u01e3\144" +
    "\uffcd\001\002\000\114\004\060\005\051\006\014\007\101" +
    "\010\072\011\044\012\111\013\067\014\113\025\055\035" +
    "\065\037\077\063\121\070\071\074\112\075\100\076\040" +
    "\077\104\102\054\103\102\104\061\105\062\107\115\115" +
    "\076\124\117\127\066\130\042\131\123\132\045\133\110" +
    "\134\106\135\116\136\056\137\070\140\063\145\052\147" +
    "\103\001\002\000\010\124\uffcf\133\uffcf\144\uffcf\001\002" +
    "\000\014\124\uffcc\126\uffcc\133\uffcc\134\u01e6\144\uffcc\001" +
    "\002\000\114\004\060\005\051\006\014\007\101\010\072" +
    "\011\044\012\111\013\067\014\113\025\055\035\065\037" +
    "\077\063\121\070\071\074\112\075\100\076\040\077\104" +
    "\102\054\103\102\104\061\105\062\107\115\115\076\124" +
    "\117\127\066\130\042\131\123\132\045\133\110\134\106" +
    "\135\116\136\056\137\070\140\063\145\052\147\103\001" +
    "\002\000\004\142\u01e8\001\002\000\014\124\uffca\126\uffca" +
    "\133\uffca\134\uffca\144\uffca\001\002\000\004\142\u01ea\001" +
    "\002\000\014\124\uffcb\126\uffcb\133\uffcb\134\uffcb\144\uffcb" +
    "\001\002\000\004\113\u01ec\001\002\000\020\006\014\040" +
    "\uffd9\041\uffd9\047\uffd9\064\166\065\204\070\u01d5\001\002" +
    "\000\010\040\u01ee\041\274\047\273\001\002\000\016\006" +
    "\014\041\uffd9\047\uffd9\064\166\065\204\070\u01d5\001\002" +
    "\000\034\006\uffc3\015\uffc3\016\uffc3\020\uffc3\040\uffc3\041" +
    "\uffc3\045\uffc3\047\uffc3\064\uffc3\065\uffc3\070\uffc3\071\uffc3" +
    "\116\uffc3\001\002\000\006\041\274\047\273\001\002\000" +
    "\034\006\uffc2\015\uffc2\016\uffc2\020\uffc2\040\uffc2\041\uffc2" +
    "\045\uffc2\047\uffc2\064\uffc2\065\uffc2\070\uffc2\071\uffc2\116" +
    "\uffc2\001\002\000\004\006\014\001\002\000\006\133\u0175" +
    "\144\uffc9\001\002\000\004\144\u01f5\001\002\000\034\006" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\040\uffd2\041\uffd2\045\uffd2" +
    "\047\uffd2\064\uffd2\065\uffd2\070\uffd2\071\uffd2\116\uffd2\001" +
    "\002\000\012\124\uffcf\126\uffce\133\uffcf\144\uffcf\001\002" +
    "\000\004\144\u01fc\001\002\000\026\006\014\015\ufff6\016" +
    "\ufff6\020\ufff6\041\ufff6\066\364\071\ufff6\101\354\116\ufff6" +
    "\134\024\001\002\000\026\006\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\041\ufff2\066\ufff2\071\ufff2\101\ufff2\116\ufff2\134\ufff2" +
    "\001\002\000\026\006\ufff5\015\ufff5\016\ufff5\020\ufff5\041" +
    "\ufff5\066\ufff5\071\ufff5\101\ufff5\116\ufff5\134\ufff5\001\002" +
    "\000\026\006\ufff4\015\ufff4\016\ufff4\020\ufff4\041\ufff4\066" +
    "\ufff4\071\ufff4\101\ufff4\116\ufff4\134\ufff4\001\002\000\026" +
    "\006\ufff3\015\ufff3\016\ufff3\020\ufff3\041\ufff3\066\ufff3\071" +
    "\ufff3\101\ufff3\116\ufff3\134\ufff3\001\002\000\016\015\ufffc" +
    "\016\ufffc\020\ufffc\041\ufffc\071\ufffc\116\ufffc\001\002\000" +
    "\006\006\014\141\u0208\001\002\000\006\006\uffc7\141\uffc7" +
    "\001\002\000\006\120\u0202\130\u0201\001\002\000\114\004" +
    "\060\005\051\006\014\007\101\010\072\011\044\012\111" +
    "\013\067\014\113\025\055\035\065\037\077\063\121\070" +
    "\071\074\112\075\100\076\040\077\104\102\054\103\102" +
    "\104\061\105\062\107\115\115\076\124\117\127\066\130" +
    "\042\131\123\132\045\133\110\134\106\135\116\136\056" +
    "\137\070\140\063\145\052\147\103\001\002\000\006\006" +
    "\014\134\024\001\002\000\004\144\u0204\001\002\000\006" +
    "\006\uffc4\141\uffc4\001\002\000\004\144\u0206\001\002\000" +
    "\006\006\uffc5\141\uffc5\001\002\000\006\006\uffc6\141\uffc6" +
    "\001\002\000\032\015\uffc8\016\uffc8\020\uffc8\040\uffc8\041" +
    "\uffc8\047\uffc8\071\uffc8\116\uffc8\120\uffc8\123\uffc8\142\uffc8" +
    "\144\uffc8\001\002\000\004\006\014\001\002\000\012\006" +
    "\uff0a\062\uff49\123\uff49\135\030\001\002\000\006\062\uff48" +
    "\123\uff48\001\002\000\012\130\ufef2\134\ufef2\135\ufef2\144" +
    "\ufef2\001\002\000\004\006\014\001\002\000\014\126\u020d" +
    "\130\ufef1\134\ufef1\135\ufef1\144\ufef1\001\002\000\012\130" +
    "\ufef0\134\ufef0\135\ufef0\144\ufef0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u020d\000\004\003\004\001\001\000\004\154\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\155\u020b" +
    "\001\001\000\004\200\010\001\001\000\002\001\001\000" +
    "\012\177\014\201\015\202\016\233\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\173\022" +
    "\174\024\176\021\204\025\233\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\101\u0152\102\u0153\103\u0151" +
    "\173\u0154\174\024\176\021\204\025\233\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\072\030\073\032\074\031\233\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\073\130\121\131\125\232\117\233\106\234" +
    "\046\001\001\000\014\173\036\174\024\176\021\204\025" +
    "\233\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\127\u0141\131\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\233\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\104" +
    "\045\105\124\106\113\107\042\110\123\112\047\113\063" +
    "\114\072\115\074\116\040\117\056\122\104\123\052\124" +
    "\u013e\130\121\131\125\232\117\233\106\234\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\127\u0131\131\u0132\001\001" +
    "\000\052\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\134\125\u012e\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\052\104\045" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\072\115\074\116\040\117\056\122\104\123\052\124\134" +
    "\125\u0128\130\121\131\125\232\117\233\106\234\046\001" +
    "\001\000\002\001\001\000\030\063\u011f\064\360\065\356" +
    "\067\361\070\354\071\357\173\362\174\024\176\021\204" +
    "\025\233\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\104\045\105\124\106\113\107" +
    "\042\110\123\112\047\113\063\114\072\115\074\116\040" +
    "\117\056\122\104\123\052\124\143\130\121\131\125\232" +
    "\117\233\106\234\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\105\124\106\113\107" +
    "\042\110\123\112\047\113\063\114\126\115\074\116\040" +
    "\117\056\123\052\232\117\233\106\234\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\104\045\105\124\106" +
    "\113\107\042\110\123\112\047\113\063\114\072\115\074" +
    "\116\040\117\056\122\104\123\052\124\134\125\135\126" +
    "\141\130\121\131\125\232\117\233\106\234\046\001\001" +
    "\000\054\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\134\125\135\126\133\130\121\131\125\232" +
    "\117\233\106\234\046\001\001\000\004\233\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\137\130\121\131\125\232\117" +
    "\233\106\234\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\225\u011e\001\001\000\024\057" +
    "\147\060\154\061\152\062\151\173\153\174\024\176\021" +
    "\204\025\233\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\233\u0119" +
    "\001\001\000\002\001\001\000\004\206\157\001\001\000" +
    "\030\063\352\064\360\065\356\067\361\070\354\071\357" +
    "\173\362\174\024\176\021\204\025\233\351\001\001\000" +
    "\002\001\001\000\074\105\124\106\113\107\042\110\123" +
    "\112\047\113\063\114\176\115\200\116\040\117\056\123" +
    "\052\132\207\133\212\156\177\157\161\161\211\162\164" +
    "\163\171\164\163\165\206\166\167\167\173\170\166\171" +
    "\202\172\205\230\210\232\117\233\106\234\046\001\001" +
    "\000\074\105\124\106\113\107\042\110\123\112\047\113" +
    "\063\114\176\115\200\116\040\117\056\123\052\132\207" +
    "\133\212\156\240\161\211\162\164\163\171\164\163\165" +
    "\206\166\167\167\173\170\166\171\202\172\205\224\346" +
    "\230\210\232\117\233\106\234\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\051\342\052\341\211\340\001\001\000\002\001" +
    "\001\000\010\132\330\133\212\230\242\001\001\000\002" +
    "\001\001\000\076\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\176\115\200\116\040\117\056\123\052" +
    "\132\207\133\212\156\177\157\315\161\211\162\164\163" +
    "\171\164\163\165\206\166\167\167\173\170\166\171\202" +
    "\172\205\206\317\230\210\232\117\233\106\234\046\001" +
    "\001\000\002\001\001\000\052\104\045\105\124\106\113" +
    "\107\042\110\123\112\047\113\063\114\072\115\074\116" +
    "\040\117\056\122\104\123\052\124\134\125\310\130\121" +
    "\131\125\232\117\233\106\234\046\001\001\000\050\104" +
    "\045\105\124\106\113\107\042\110\123\112\047\113\063" +
    "\114\072\115\074\116\040\117\056\122\104\123\052\124" +
    "\270\130\121\131\125\232\117\233\106\234\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\104\045\105\124\106\113\107\042\110\123\112\047\113" +
    "\063\114\072\115\074\116\040\117\056\122\104\123\052" +
    "\124\244\130\121\131\125\232\117\233\106\234\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\206\234" +
    "\001\001\000\020\053\213\054\215\173\217\174\024\176" +
    "\021\204\025\233\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\134\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\214\230\001\001\000\010\053\220" +
    "\054\215\233\221\001\001\000\004\134\224\001\001\000" +
    "\002\001\001\000\006\054\226\233\221\001\001\000\050" +
    "\104\045\105\124\106\113\107\042\110\123\112\047\113" +
    "\063\114\072\115\074\116\040\117\056\122\104\123\052" +
    "\124\225\130\121\131\125\232\117\233\106\234\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\241\130\121\131\125\133\243" +
    "\230\242\232\117\233\106\234\046\001\001\000\002\001" +
    "\001\000\074\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\176\115\200\116\040\117\056\123\052\132" +
    "\207\133\212\156\177\157\236\161\211\162\164\163\171" +
    "\164\163\165\206\166\167\167\173\170\166\171\202\172" +
    "\205\230\210\232\117\233\106\234\046\001\001\000\074" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\176\115\200\116\040\117\056\123\052\132\207\133\212" +
    "\156\240\161\211\162\164\163\171\164\163\165\206\166" +
    "\167\167\173\170\166\171\202\172\205\214\237\230\210" +
    "\232\117\233\106\234\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\053\213\054\215" +
    "\173\217\174\024\176\021\204\025\233\214\001\001\000" +
    "\002\001\001\000\004\206\251\001\001\000\004\227\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\176\115\200\116\040\117" +
    "\056\123\052\132\207\133\212\156\177\157\253\160\254" +
    "\161\211\162\164\163\171\164\163\165\206\166\167\167" +
    "\173\170\166\171\202\172\205\230\210\232\117\233\106" +
    "\234\046\001\001\000\072\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\176\115\200\116\040\117\056" +
    "\123\052\132\207\133\212\156\240\161\211\162\164\163" +
    "\171\164\163\165\206\166\167\167\173\170\166\171\202" +
    "\172\205\230\210\232\117\233\106\234\046\001\001\000" +
    "\004\227\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\134\125\135\126\265\130\121\131\125\232" +
    "\117\233\106\234\046\001\001\000\054\104\045\105\124" +
    "\106\113\107\042\110\123\112\047\113\063\114\072\115" +
    "\074\116\040\117\056\122\104\123\052\124\134\125\135" +
    "\126\263\130\121\131\125\232\117\233\106\234\046\001" +
    "\001\000\004\233\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\216\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\047\276\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\277\130\121\131\125\232\117" +
    "\233\106\234\046\001\001\000\004\216\304\001\001\000" +
    "\002\001\001\000\050\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\301\130\121\131\125\232\117" +
    "\233\106\234\046\001\001\000\004\216\302\001\001\000" +
    "\002\001\001\000\004\047\305\001\001\000\002\001\001" +
    "\000\004\216\306\001\001\000\002\001\001\000\004\211" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\105" +
    "\124\106\113\107\042\110\123\112\047\113\063\114\176" +
    "\115\200\116\040\117\056\123\052\132\207\133\212\156" +
    "\240\161\211\162\164\163\171\164\163\165\206\166\167" +
    "\167\173\170\166\171\202\172\205\212\326\230\210\232" +
    "\117\233\106\234\046\001\001\000\004\212\325\001\001" +
    "\000\002\001\001\000\074\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\176\115\200\116\040\117\056" +
    "\123\052\132\207\133\212\156\177\157\321\161\211\162" +
    "\164\163\171\164\163\165\206\166\167\167\173\170\166" +
    "\171\202\172\205\230\210\232\117\233\106\234\046\001" +
    "\001\000\074\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\176\115\200\116\040\117\056\123\052\132" +
    "\207\133\212\156\240\161\211\162\164\163\171\164\163" +
    "\165\206\166\167\167\173\170\166\171\202\172\205\212" +
    "\323\230\210\232\117\233\106\234\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\213\337\001\001\000\004" +
    "\206\331\001\001\000\002\001\001\000\074\105\124\106" +
    "\113\107\042\110\123\112\047\113\063\114\176\115\200" +
    "\116\040\117\056\123\052\132\207\133\212\156\177\157" +
    "\333\161\211\162\164\163\171\164\163\165\206\166\167" +
    "\167\173\170\166\171\202\172\205\230\210\232\117\233" +
    "\106\234\046\001\001\000\074\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\176\115\200\116\040\117" +
    "\056\123\052\132\207\133\212\156\240\161\211\162\164" +
    "\163\171\164\163\165\206\166\167\167\173\170\166\171" +
    "\202\172\205\213\335\230\210\232\117\233\106\234\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\104\045\105\124\106\113\107" +
    "\042\110\123\112\047\113\063\114\072\115\074\116\040" +
    "\117\056\122\104\123\052\124\344\130\121\131\125\232" +
    "\117\233\106\234\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\071\u0114" +
    "\173\362\174\024\176\021\204\025\233\351\001\001\000" +
    "\002\001\001\000\004\233\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\233\u0103\001\001\000\004\233\365\001\001\000\004" +
    "\215\u0102\001\001\000\002\001\001\000\024\057\147\060" +
    "\367\061\152\062\151\173\153\174\024\176\021\204\025" +
    "\233\150\001\001\000\002\001\001\000\004\066\371\001" +
    "\001\000\004\206\374\001\001\000\014\173\373\174\024" +
    "\176\021\204\025\233\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\376\130\121\131\125\232\117" +
    "\233\106\234\046\001\001\000\004\215\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\104\045\105\124\106" +
    "\113\107\042\110\123\112\047\113\063\114\072\115\074" +
    "\116\040\117\056\122\104\123\052\124\u0107\130\121\131" +
    "\125\232\117\233\106\234\046\001\001\000\050\104\045" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\072\115\074\116\040\117\056\122\104\123\052\124\u0106" +
    "\130\121\131\125\232\117\233\106\234\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\225\u0113\001\001" +
    "\000\002\001\001\000\024\057\147\060\u010b\061\152\062" +
    "\151\173\153\174\024\176\021\204\025\233\150\001\001" +
    "\000\002\001\001\000\004\206\u010d\001\001\000\002\001" +
    "\001\000\074\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\176\115\200\116\040\117\056\123\052\132" +
    "\207\133\212\156\177\157\u010f\161\211\162\164\163\171" +
    "\164\163\165\206\166\167\167\173\170\166\171\202\172" +
    "\205\230\210\232\117\233\106\234\046\001\001\000\074" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\176\115\200\116\040\117\056\123\052\132\207\133\212" +
    "\156\240\161\211\162\164\163\171\164\163\165\206\166" +
    "\167\167\173\170\166\171\202\172\205\225\u0110\230\210" +
    "\232\117\233\106\234\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\104\045\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\072\115\074\116\040\117\056" +
    "\122\104\123\052\124\u0116\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\026\064\u0118" +
    "\065\356\067\361\070\354\071\357\173\362\174\024\176" +
    "\021\204\025\233\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\104\045\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\072\115\074\116\040\117\056" +
    "\122\104\123\052\124\u011b\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\020\061\u011d" +
    "\062\151\173\153\174\024\176\021\204\025\233\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\222\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\104\045\105\124\106\113" +
    "\107\042\110\123\112\047\113\063\114\072\115\074\116" +
    "\040\117\056\122\104\123\052\124\u0125\130\121\131\125" +
    "\232\117\233\106\234\046\001\001\000\004\222\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\205\u0129" +
    "\001\001\000\002\001\001\000\010\132\u012b\133\212\230" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\205\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\105\124\106\113\107\042\110\123" +
    "\112\047\113\063\114\072\115\074\116\040\117\056\122" +
    "\u0133\123\052\130\121\131\125\232\117\233\106\234\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\057" +
    "\147\060\u0135\061\152\062\151\173\153\174\024\176\021" +
    "\204\025\233\150\001\001\000\002\001\001\000\004\066" +
    "\u0137\001\001\000\004\206\u0138\001\001\000\002\001\001" +
    "\000\050\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\u013a\130\121\131\125\232\117\233\106\234" +
    "\046\001\001\000\004\221\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\104\045\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\072\115\074\116\040\117\056\122\104\123" +
    "\052\124\277\130\121\131\125\232\117\233\106\234\046" +
    "\001\001\000\002\001\001\000\044\105\124\106\113\107" +
    "\042\110\123\112\047\113\063\114\072\115\074\116\040" +
    "\117\056\122\u0142\123\052\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\054\104\045" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\072\115\074\116\040\117\056\122\104\123\052\124\u0144" +
    "\130\121\131\125\142\u0146\143\u0145\232\117\233\106\234" +
    "\046\001\001\000\002\001\001\000\004\205\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\104\045\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\072\115\074\116\040\117\056\122\104\123" +
    "\052\124\u0144\130\121\131\125\142\u014a\232\117\233\106" +
    "\234\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\104\045\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\072\115\074\116\040\117\056\122\104\123" +
    "\052\124\u014d\130\121\131\125\232\117\233\106\234\046" +
    "\001\001\000\002\001\001\000\006\072\u014f\233\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\101\u0156\173\u0154\174\024\176\021\204\025\233\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\173" +
    "\u0159\174\024\176\021\204\025\233\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\201" +
    "\u015e\202\016\233\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\057\147\060\u0160\061\152\062\151\173" +
    "\153\174\024\176\021\204\025\233\150\001\001\000\002" +
    "\001\001\000\012\146\u0162\147\u0165\150\u0164\236\u0163\001" +
    "\001\000\002\001\001\000\014\173\u0208\174\024\176\021" +
    "\204\025\233\u0209\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\146\u0168\236\u0163\001\001" +
    "\000\002\001\001\000\012\151\u016d\152\u016c\153\u016a\236" +
    "\u016b\001\001\000\002\001\001\000\014\173\u0170\174\024" +
    "\176\021\204\025\233\u0171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\151\u016f\236\u016b\001\001\000\002" +
    "\001\001\000\004\233\u0172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0175\001\001\000\010\044\u01fd" +
    "\045\u01fe\233\u01ff\001\001\000\022\004\u017c\005\u0182\006" +
    "\u0179\007\u0178\010\u017e\011\u0177\012\u0176\140\u017f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\u017c\007\u01fc\010\u017e\011\u0177\012\u0176\140\u017f" +
    "\001\001\000\026\013\u01f7\014\u01f9\065\u01f8\070\u01f6\071" +
    "\357\173\362\174\024\176\021\204\025\233\351\001\001" +
    "\000\034\020\u01cf\021\u01d7\022\u01d1\023\u01d9\024\u01d6\025" +
    "\u01d5\026\u01d2\027\u01d3\030\u01d8\132\u01da\133\212\230\242" +
    "\233\u01d0\001\001\000\002\001\001\000\022\015\u01a1\016" +
    "\u019f\017\u01a0\173\u01a2\174\024\176\021\204\025\233\u019e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\154" +
    "\u0193\001\001\000\004\141\u0187\001\001\000\004\046\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\154\u018b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\154\u0190\001\001\000" +
    "\002\001\001\000\004\233\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\200\u0194\001\001" +
    "\000\002\001\001\000\024\057\147\060\u0196\061\152\062" +
    "\151\173\153\174\024\176\021\204\025\233\150\001\001" +
    "\000\002\001\001\000\012\146\u0162\147\u0165\150\u0198\236" +
    "\u0163\001\001\000\002\001\001\000\012\151\u016d\152\u016c" +
    "\153\u019a\236\u016b\001\001\000\002\001\001\000\022\004" +
    "\u017c\005\u019c\006\u0179\007\u0178\010\u017e\011\u0177\012\u0176" +
    "\140\u017f\001\001\000\004\046\u019d\001\001\000\002\001" +
    "\001\000\010\033\u01cb\034\u01a6\035\u01a7\001\001\000\016" +
    "\017\u01ca\173\u01a2\174\024\176\021\204\025\233\u019e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\233\u01a3" +
    "\001\001\000\010\033\u01a4\034\u01a6\035\u01a7\001\001\000" +
    "\002\001\001\000\050\104\045\105\124\106\113\107\042" +
    "\110\123\112\047\113\063\114\072\115\074\116\040\117" +
    "\056\122\104\123\052\124\u01a9\130\121\131\125\232\117" +
    "\233\106\234\046\001\001\000\004\035\u01a8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\u01ad\233\u01b0\001" +
    "\001\000\002\001\001\000\010\036\u01c3\037\u01c4\233\u01b0" +
    "\001\001\000\050\104\045\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\072\115\074\116\040\117\056" +
    "\122\104\123\052\124\u01bd\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\010\040\u01b2" +
    "\042\u01b3\233\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\104\045\105\124\106\113" +
    "\107\042\110\123\112\047\113\063\114\072\115\074\116" +
    "\040\117\056\122\104\123\052\124\u01b6\130\121\131\125" +
    "\232\117\233\106\234\046\001\001\000\002\001\001\000" +
    "\004\233\u01b8\001\001\000\002\001\001\000\050\104\045" +
    "\105\124\106\113\107\042\110\123\112\047\113\063\114" +
    "\072\115\074\116\040\117\056\122\104\123\052\124\u01ba" +
    "\130\121\131\125\232\117\233\106\234\046\001\001\000" +
    "\002\001\001\000\004\043\u01bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\u01bf\233\u01b0\001\001\000" +
    "\002\001\001\000\006\036\u01c1\233\u01b0\001\001\000\004" +
    "\216\u01c2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\205\u01c6\001\001\000\006\036\u01c8\233\u01b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\u01cd\233\u01b0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\u01f5\032\u01e4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\104\045\105\124\106\113\107\042\110\123\112\047" +
    "\113\063\114\072\115\074\116\040\117\056\122\104\123" +
    "\052\124\u01ea\130\121\131\125\232\117\233\106\234\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\022" +
    "\u01de\023\u01d9\024\u01d6\025\u01d5\026\u01d2\027\u01d3\030\u01d8" +
    "\132\u01da\133\212\230\242\233\u01d0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\021\u01dc" +
    "\022\u01d1\023\u01d9\024\u01d6\025\u01d5\026\u01d2\027\u01d3\030" +
    "\u01d8\132\u01da\133\212\230\242\233\u01d0\001\001\000\032" +
    "\022\u01de\023\u01d9\024\u01d6\025\u01d5\026\u01d2\027\u01d3\030" +
    "\u01d8\132\u01da\133\212\214\u01dd\230\242\233\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u01e0\233" +
    "\u01e1\001\001\000\002\001\001\000\006\031\u01e3\032\u01e4" +
    "\001\001\000\050\104\045\105\124\106\113\107\042\110" +
    "\123\112\047\113\063\114\072\115\074\116\040\117\056" +
    "\122\104\123\052\124\u01e8\130\121\131\125\232\117\233" +
    "\106\234\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\u01e6\130\121\131\125\232\117\233\106\234" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\020" +
    "\u01ec\021\u01d7\022\u01d1\023\u01d9\024\u01d6\025\u01d5\026\u01d2" +
    "\027\u01d3\030\u01d8\132\u01da\133\212\230\242\233\u01d0\001" +
    "\001\000\004\216\u01ee\001\001\000\034\020\u01ef\021\u01d7" +
    "\022\u01d1\023\u01d9\024\u01d6\025\u01d5\026\u01d2\027\u01d3\030" +
    "\u01d8\132\u01da\133\212\230\242\233\u01d0\001\001\000\002" +
    "\001\001\000\004\216\u01f0\001\001\000\002\001\001\000" +
    "\012\026\u01f2\027\u01d3\030\u01d8\233\u01d0\001\001\000\004" +
    "\043\u01f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\u01fa\065\u01f8" +
    "\070\u01f6\071\357\173\362\174\024\176\021\204\025\233" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\u0206\233\u01ff\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\104\045\105\124\106\113\107\042\110\123\112" +
    "\047\113\063\114\072\115\074\116\040\117\056\122\104" +
    "\123\052\124\u0204\130\121\131\125\232\117\233\106\234" +
    "\046\001\001\000\014\173\u0202\174\024\176\021\204\025" +
    "\233\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\233\u020a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\233\u020d\001\001" +
    "\000\004\155\u020e\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ///////////////////////////////////////////////////////////////////////
    ////  Network
    ///////////////////////////////////////////////////////////////////////

    //
    //  Return a document containing the parsed lexer source, describing the source as 'fileName' in diagnostics.
    //
    public Document parseNetwork() throws ParserErrorException {
        return parseNetwork("<nofile>");
    }

    public Document parseNetwork(String filename) throws ParserErrorException {
        return parseNetwork(filename, false);
    }

    //
    //  Return a document containing the parsed lexer source, describing the source as 'fileName' in diagnostics.
    //
    public Document parseNetwork(String filename, boolean doDebug) throws ParserErrorException
    {
        DOMImplementation domImpl = net.sf.opendf.util.xml.Util.getDefaultImplementation().getDocumentBuilder().getDOMImplementation();
        document = domImpl.createDocument("", "Network", null);
        file = filename;
        debug = doDebug;
        //this.errors = 0;
        this.errorList = new ArrayList();
        document.insertBefore(document.createComment(" Generated by Caltrop Parser version 1.2 "), document.getDocumentElement());
        //Symbol returnSymbol = debug ? super.debug_parse() : super.parse();
        Symbol returnSymbol = null;
        try
        {
            returnSymbol = debug ? super.debug_parse() : super.parse();
        } catch (Exception e)
        {
            if (this.errorList.isEmpty())
                throw new NLParserException(e.getMessage());
            else 
                throw new ParserErrorException("Errors found in parsing NL source", this.errorList);
        }
        
        //if (this.errors > 0)
        if (!this.errorList.isEmpty())
        {
            throw new ParserErrorException("Errors found in parsing NL source", this.errorList);
        }
        return returnSymbol != null ? document : null;
    }


    //
    //  Override the error report to prepend the sourece and line context.
    //
    public void report_error(String message) {
        if (debug && (lookahead != null)) {
            for (int i = 0; i <= lookahead_pos; i++) {
                System.out.println("Lookahead " + lookahead[i] + ", left=" + lookahead[i].left
                                + ", right=" + lookahead[i].right
                                + ", parse_state=" + lookahead[i].parse_state
                                + ", value=" + (lookahead[i].value != null ? lookahead[i].value : "-nil-"));
             }
        }
        report_error(message, lookahead != null ? lookahead[0] : cur_token);
    }

    //
    //  Override the error report to prepend the source and line context.
    //
    public void report_error(String message, Object info)
    {
        int line = -1;
        int col = -1;
        if (info instanceof Symbol)
        {
            line = ((Symbol)info).left;
            col = ((Symbol)info).right;
        }
        errorList.add(new GenericError(message, file, line, col));
    }

    //
    //  Generate a syntax error report describing 'aSymbol' with 'aMessage' suffix.
    //
    public void report_error(String messagePrefix, Symbol aSymbol, String messageSuffix) {
//        System.out.println("Symbol " + aSymbol + ", left=" + aSymbol.left
//                        + ", right=" + aSymbol.right
//                        + ", parse_state=" + aSymbol.parse_state
//                        + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));
        Symbol theSymbol = aSymbol != null ? aSymbol : lookahead != null ? lookahead[0] : cur_token;
        String symValue = "<unknown>";
        if (theSymbol.value != null)
            symValue = theSymbol.value.toString();
        else if (theSymbol.sym == Terminal.EOF)
            symValue = "EOF";
        else
            symValue = "" + theSymbol.sym;
            
        report_error(messagePrefix + " \"" + symValue  +"\"" + messageSuffix, theSymbol);
    }

    //
    //  Override the symbol scan to report illegal characters and abort on error count exceeded..
    //
    public Symbol scan() throws ParserErrorException
    {
        while (true) {
            if (this.errorList.size() > max_errors)
            {
                throw new ParserErrorException("Too many errors.", this.errorList);
            }
            Symbol aSymbol = null;
            try
            {
              aSymbol = super.scan();
            } catch (Exception e)
            {
              throw new NLParserException(e.getMessage());
            }
            if (aSymbol == null)
                return null;
            if (debug)
                System.out.println("Scan symbol " + aSymbol + ", left=" + aSymbol.left
                            + ", right=" + aSymbol.right
                            + ", parse_state=" + aSymbol.parse_state
                            + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));
            if (aSymbol.sym == Terminal.IllegalCharacter)
                report_error("Illegal character \"" + aSymbol.value  +"\".", aSymbol);
            else
                return aSymbol;
        }
    }

    //
    //  Generate a syntax error report on the current token with 'aMessage' suffix.
    //
    public void syntax_error(String aMessage) {
        if (debug && (lookahead != null)) {
            for (int i = 0; i <= lookahead_pos; i++) {
                System.out.println("Lookahead " + lookahead[i] + ", left=" + lookahead[i].left
                                + ", right=" + lookahead[i].right
                                + ", parse_state=" + lookahead[i].parse_state
                                + ", value=" + (lookahead[i].value != null ? lookahead[i].value : "-nil-"));
             }
        }
        syntax_error(lookahead != null ? lookahead[0] : cur_token, aMessage);
    }

    //
    //  Override the syntax error report to redirect to the symbol+message implementation.
    //
    public void syntax_error(Symbol aSymbol) {
        syntax_error(aSymbol, ".");
    }

    //
    //  Generate a syntax error report describing 'aSymbol' with 'messageSuffix'.
    //
    public void syntax_error(Symbol aSymbol, String messageSuffix) {
//        System.out.println("Symbol " + aSymbol + ", left=" + aSymbol.left
//                        + ", right=" + aSymbol.right
//                        + ", parse_state=" + aSymbol.parse_state
//                        + ", value=" + (aSymbol.value != null ? aSymbol.value : "-nil-"));

        String symValue = "<unknown>";
        if (aSymbol.value != null)
          symValue = aSymbol.value.toString();
        else if (aSymbol.sym == Terminal.EOF)
          symValue = "EOF";
        
        report_error("Syntax error near \"" + aSymbol.value  +"\"" + messageSuffix, aSymbol);
    }

    public boolean getDebug() { return debug; }
    public Document getDocument() { return document; }

    private boolean debug = false;          // True for debug messages.
    private Document document = null;       // Current document while reading.
    private String file = null;             // Name of source file in diagnostics
    private List<GenericError> errorList = new ArrayList();
    public int max_errors = 20;             // Maximum errors before termination.
    /*--INSERT-PARSER-CODE--*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    private Element appendChild(Element element, Node child1) {
        if (child1 != null)
            element.appendChild(child1);
        return element;
    }
    private Element appendChild(Element element, Node child1, Node child2) {
        if (child1 != null)
            element.appendChild(child1);
        if (child2 != null)
            element.appendChild(child2);
        return element;
    }
    private Element appendChild(Element element, Node child1, Node child2, Node child3) {
        if (child1 != null)
            element.appendChild(child1);
        if (child2 != null)
            element.appendChild(child2);
        if (child3 != null)
            element.appendChild(child3);
        return element;
    }
    private Element appendChildren(Element element, List children) {
        if (children != null) {
            if (parser.getDebug())
                System.out.println("Append to node." + (element != null ? element.getNodeName() : "-nil-"));
            for (Iterator it = children.iterator(); it.hasNext(); ) {
                Node aNode = (Node)it.next();
                if (aNode != null) {
                    if (parser.getDebug())
                        System.out.println("   node." + aNode.getNodeName());
                    if (aNode instanceof Attr)
                        element.setAttributeNode((Attr)aNode);
                    else
                        element.appendChild(aNode);
                }
            }
        }
        return element;
    }
    private Attr createAttribute(String name) {
        return parser.getDocument().createAttribute(name);
    }
    private Element createElement(String name) {
        return parser.getDocument().createElement(name);
    }
    private Element createElement(String name, String kind) {
        Element element = parser.getDocument().createElement(name);
        element.setAttribute("kind", kind);
        return element;
    }
    private void addTextRange(Element e, int s1left, int s1right, int s2left, int s2right) {
    	try {
			e.setAttribute("text-begin-line", Integer.toString(s1left));
			e.setAttribute("text-begin-col", Integer.toString(s1right));
			e.setAttribute("text-end-line", Integer.toString(s2left));
			e.setAttribute("text-end-col", Integer.toString(s2right));
		} catch (Exception exc) {
			exc.printStackTrace();
			throw new NLParserException(exc.getMessage());
		}
    }
    private void error(String message) {
        parser.report_error(message);
    }
    private void error(String aMessage, String constructName, int lineNumber, int colNumber) {
        parser.report_error(aMessage, null, " in \"" + constructName + "\" construct starting at line " + lineNumber + "." + colNumber + ".");
    }
//    private Document getDocument() {
//        return parser.getDocument();
//    }
    private Element getDocumentElement() {
        return parser.getDocument().getDocumentElement();
    }
    private Element setAttribute(Element element, String name, String value) {
        if ((name != null) && (value != null)) element.setAttribute(name, value);
        return element;
    }
    private Element setName(Element element, String value) {
        if (value != null) element.setAttribute("name", value);
        return element;
    }
    /*--INSERT-ACTION-CODE--*/

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // var_decl_variables_opt ::= VAR decl_variables 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(132/*var_decl_variables_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // var_decl_variables_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(132/*var_decl_variables_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // semi_opt ::= SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(157/*semi_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // semi_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(157/*semi_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // multi_opt ::= MULTI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(156/*multi_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // multi_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(156/*multi_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // label_opt ::= id COLON 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(155/*label_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // label_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(155/*label_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // for_each ::= FOREACH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(150/*for_each*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // for_each ::= FOR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(150/*for_each*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // end_while ::= END_WHILE 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(149/*end_while*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // end_while ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(149/*end_while*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // end_procedure ::= END_PROCEDURE 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(147/*end_procedure*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // end_procedure ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(147/*end_procedure*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // end_proc ::= END_PROC 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(146/*end_proc*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // end_proc ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(146/*end_proc*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // end_let ::= END_LET 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(144/*end_let*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // end_let ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(144/*end_let*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // end_lambda ::= END_LAMBDA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(143/*end_lambda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // end_lambda ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(143/*end_lambda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // end_if ::= END_IF 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(140/*end_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // end_if ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(140/*end_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // end_function ::= END_FUNCTION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(139/*end_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // end_function ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(139/*end_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // end_foreach ::= END_FOREACH 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(138/*end_foreach*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // end_foreach ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(138/*end_foreach*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // end_choose ::= END_CHOOSE 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(137/*end_choose*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // end_choose ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(137/*end_choose*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // end_begin ::= END_BEGIN 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(136/*end_begin*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // end_begin ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(136/*end_begin*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // end_assign ::= END_ASSIGN 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(135/*end_assign*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // end_assign ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(135/*end_assign*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // end_network ::= END 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(36/*end_network*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // do_statements_opt ::= DO statements 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(134/*do_statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // do_statements_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(134/*do_statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // do_opt ::= DO 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(133/*do_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // do_opt ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(133/*do_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // colon_generators_opt ::= COLON generators 
            {
              Vector RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = g; 
              CUP$Parser$result = new java_cup.runtime.Symbol(131/*colon_generators_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // colon_generators_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(131/*colon_generators_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // string ::= UnterminatedString 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 error("Unterminated string \"" + c + " .","",cleft,cright); RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(154/*string*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // string ::= String 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(154/*string*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // qid_tail ::= DOT id qid_tail 
            {
              Vector RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
                t.add(0, i);
                RESULT = t;
            
              CUP$Parser$result = new java_cup.runtime.Symbol(107/*qid_tail*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // qid_tail ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(107/*qid_tail*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // qid ::= Id qid_tail 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        Element qid = createElement("QID");
        Element e = createElement("ID");
        setName(e, id);
        appendChild(qid, e);
        String qs = id;
        for (int i = 0; i < t.size(); i++) {
            e = createElement("ID");
            String s = (String)t.get(i);
            setName(e, s);
            qs += "." + s;
            appendChild(qid, e);
        }
        setName(qid, qs);
        RESULT = qid;
     
              CUP$Parser$result = new java_cup.runtime.Symbol(106/*qid*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // id ::= Id 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(153/*id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // character ::= UnterminatedCharacter 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 error("Unterminated character \'" + c + " .","",cleft,cright); RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(152/*character*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // character ::= Character 
            {
              String RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(152/*character*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expression_op_name ::= IllegalCharacter 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; /* Never happens, but loses a warning */
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expression_op_name ::= VBAR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expression_op_name ::= STAR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expression_op_name ::= QMARK 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expression_op_name ::= PLUS 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expression_op_name ::= GT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expression_op_name ::= LT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expression_op_name ::= HASH 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expression_op_name ::= EQUALS 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expression_op_name ::= DASH_DASH_GT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expression_op_name ::= OR 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expression_op_name ::= NOT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expression_op_name ::= MOD 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expression_op_name ::= DOTDOT 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expression_op_name ::= DOM 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expression_op_name ::= DIV 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expression_op_name ::= AND 
            {
              String RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = k; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expression_op_name ::= PartialOp 
            {
              String RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = o; 
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*expression_op_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // unary_expression_op ::= expression_op_name 
            {
              Element RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Op"), op); 
              CUP$Parser$result = new java_cup.runtime.Symbol(86/*unary_expression_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // binary_expression_op ::= expression_op_name 
            {
              Element RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Op"), op); 
              CUP$Parser$result = new java_cup.runtime.Symbol(85/*binary_expression_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // type_unary ::= id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Type" /*, "Unary" */), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(130/*type_unary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // type_tuple ::= LPAR entry_tagged_types_opt RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element type = createElement("Type" /*, "Tuple" */);
                appendChildren(type, e);
                RESULT = type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(129/*type_tuple*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // type_parameter_id ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("TypeParameter"), i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(128/*type_parameter_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // type_parameter ::= type_parameter_id LT type_expr 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(i, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(127/*type_parameter*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // type_parameter ::= type_parameter_id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(127/*type_parameter*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // type_parameters_opt ::= LBRACK type_parameters RBRACK 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(126/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // type_parameters_opt ::= LBRACK RBRACK 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(126/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // type_parameters_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(126/*type_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // type_parameters ::= type_parameters COMMA type_parameter 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(125/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // type_parameters ::= type_parameter 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(125/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // type_map ::= id LPAR entry_taggeds_opt RPAR 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int endSymbolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int endSymbolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String endSymbol = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element type = createElement("Type" /*, "Map" */);
                setName(type, id);
                addTextRange(type, idleft, idright, endSymbolleft, endSymbolright);
                RESULT = appendChildren(type, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(124/*type_map*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // type_function ::= LBRACK entry_types_opt DASH_DASH_GT type_expr RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChild(appendChildren(createElement("Type", "Function"), e), t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(122/*type_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // type_function ::= LBRACK entry_types_opt DASH_DASH_GT RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = appendChildren(createElement("Type", "Procedure"), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(122/*type_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // type_function ::= LBRACK entry_types_opt RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChildren(createElement("Type", "Procedure" ), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(122/*type_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // type_expr ::= type_unary 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(121/*type_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // type_expr ::= type_map 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(121/*type_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // type_expr ::= type_function 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(121/*type_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmt_while ::= WHILE error end_while 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal while statement.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(120/*stmt_while*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmt_while ::= WHILE expression var_decl_variables_opt DO statements_opt end_while 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element body = createElement("Stmt", "Block");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(createElement("Stmt", "While"), i, body); 
              CUP$Parser$result = new java_cup.runtime.Symbol(120/*stmt_while*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmt_if ::= IF expression THEN body ELSE body end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChild(createElement("Stmt", "If"), i, t, f); 
              CUP$Parser$result = new java_cup.runtime.Symbol(119/*stmt_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmt_if ::= IF expression THEN body end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChild(createElement("Stmt", "If"), i, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(119/*stmt_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmt_guarded_head ::= stmt_guarded_head clause_default 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element clause = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = appendChild(statement, clause); 
              CUP$Parser$result = new java_cup.runtime.Symbol(118/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmt_guarded_head ::= stmt_guarded_head clause_guard 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element clause = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = appendChild(statement, clause); 
              CUP$Parser$result = new java_cup.runtime.Symbol(118/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmt_guarded_head ::= ASSIGN expressions TO 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChildren(createElement("Stmt", "Guarded"), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(118/*stmt_guarded_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmt_guarded ::= ASSIGN error end_assign 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal guarded assignment statement.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(117/*stmt_guarded*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmt_guarded ::= stmt_guarded_head end_assign 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = statement; 
              CUP$Parser$result = new java_cup.runtime.Symbol(117/*stmt_guarded*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmt_foreach ::= for_each error end_foreach 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal foreach statement.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(116/*stmt_foreach*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmt_foreach ::= generators var_decl_variables_opt DO statements end_foreach 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element statement = createElement("Stmt", "Foreach");
                appendChildren(statement, g);
                Element body = createElement("Body");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(statement, body); 
              CUP$Parser$result = new java_cup.runtime.Symbol(116/*stmt_foreach*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmt_call ::= expr_postfix LPAR expressions_opt RPAR SEMI 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  Element e = createElement("Stmt", "Call");
                Attr a = c.getAttributeNode("kind");
                if ((a != null) && a.getValue().equals("Tuple") && (c.getChildNodes().getLength() == 1))
                    appendChild(e, c.getFirstChild());            // Lose syntactical parentheses
                else
                    appendChild(e, c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(114/*stmt_call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmt_block ::= BEGIN error end_begin 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal block.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(113/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmt_block ::= BEGIN statements end_begin 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element statement = createElement("Stmt", "Block");
                appendChildren(statement, s);
                RESULT = statement; 
              CUP$Parser$result = new java_cup.runtime.Symbol(113/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmt_block ::= BEGIN var_decl_variables_opt DO statements end_begin 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element statement = createElement("Stmt", "Block");
                appendChildren(statement, v);
                appendChildren(statement, s);
                RESULT = statement; 
              CUP$Parser$result = new java_cup.runtime.Symbol(113/*stmt_block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmt_choose ::= CHOOSE error end_choose 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal foreach statement.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(115/*stmt_choose*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmt_choose ::= CHOOSE generators var_decl_variables_opt DO statements end_choose 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element statement = createElement("Stmt", "Choose");
                appendChildren(statement, g);
                Element body = createElement("Body");
                appendChildren(body, v);
                appendChildren(body, s);
                RESULT = appendChild(statement, body); 
              CUP$Parser$result = new java_cup.runtime.Symbol(115/*stmt_choose*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmt_assign_head ::= expr_postfix DOT id 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = setName(createElement("Expr", "Entry"), id);
                RESULT = appendChild(createElement("Stmt", "Assign"), c, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(112/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmt_assign_head ::= expr_postfix LBRACK expressions_opt RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element s = createElement("Stmt", "Assign");
                Element args = appendChildren(createElement("Args"), i);
                Attr name = e.getAttributeNode("name");
                if (name == null) {
                    error("Left-hand side of assignment must be name or indexed name.","",eleft,eright);
                    RESULT = appendChild(s, e);
                }
                else                               // Preserved functionality
                    RESULT = appendChild(setName(s, name.getValue()), args); 
              CUP$Parser$result = new java_cup.runtime.Symbol(112/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmt_assign_head ::= expr_primary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element s = createElement("Stmt", "Assign");
                Attr name = e.getAttributeNode("name");
                if (name == null) {
                    error("Left-hand side of assignment must be name or indexed name.","",eleft,eright);
                    RESULT = appendChild(s, e);
                }
                else                                        // Preserved functionality
                    RESULT = setName(s, name.getValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(112/*stmt_assign_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmt_assign ::= stmt_assign_head COLON_EQUALS expression SEMI 
            {
              Element RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element statement = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = appendChild(statement, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(111/*stmt_assign*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // statements_opt ::= statements 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(110/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // statements_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(110/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // statements ::= statements statement 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(109/*statements*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statements ::= statement 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(109/*statements*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // statement ::= error SEMI 
            {
              Element RESULT = null;
		 error("Illegal statement."); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement ::= stmt_foreach 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= stmt_while 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= stmt_if 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= stmt_block 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statement ::= stmt_guarded 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statement ::= stmt_choose 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // statement ::= stmt_call 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statement ::= stmt_assign 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // statement ::= SEMI 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(108/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // port_outputs_opt ::= port_outputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(105/*port_outputs_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // port_outputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(105/*port_outputs_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // port_outputs ::= port_outputs COMMA port_output 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(port); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(104/*port_outputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // port_outputs ::= port_output 
            {
              Vector RESULT = null;
		int portleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(port); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(104/*port_outputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // port_output ::= multi_opt type_expr id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element port = createElement("Port", "Output");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                appendChild(port, t);
                RESULT = port; 
              CUP$Parser$result = new java_cup.runtime.Symbol(103/*port_output*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // port_output ::= multi_opt id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element port = createElement("Port", "Output");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                RESULT = port; 
              CUP$Parser$result = new java_cup.runtime.Symbol(103/*port_output*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // port_inputs_opt ::= port_inputs 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(102/*port_inputs_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // port_inputs_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(102/*port_inputs_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // port_inputs ::= port_inputs COMMA port_input 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int portleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(port); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(101/*port_inputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // port_inputs ::= port_input 
            {
              Vector RESULT = null;
		int portleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int portright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element port = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(port); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(101/*port_inputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // port_input ::= multi_opt type_expr id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element port = createElement("Port", "Input");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                appendChild(port, t);
                RESULT = port; 
              CUP$Parser$result = new java_cup.runtime.Symbol(100/*port_input*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // port_input ::= multi_opt id 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element port = createElement("Port", "Input");
                setName(port, i);
                if (m != null) setAttribute(port, "multi", "Yes");
                RESULT = port; 
              CUP$Parser$result = new java_cup.runtime.Symbol(100/*port_input*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // mappings ::= mappings COMMA mapping 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(97/*mappings*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // mappings ::= mapping 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(97/*mappings*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // mapping ::= expression DASH_GT expression 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(createElement("Mapping"), e1, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(96/*mapping*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // import_kind ::= ENTITY 
            {
              String RESULT = null;
		 RESULT = "Entity"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(95/*import_kind*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // import_kind ::= TYPE 
            {
              String RESULT = null;
		 RESULT = "Type"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(95/*import_kind*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // import_kind ::= VAR 
            {
              String RESULT = null;
		 RESULT = "Variable"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(95/*import_kind*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // import_kind ::= 
            {
              String RESULT = null;
		 RESULT = "Variable"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(95/*import_kind*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // import_ ::= IMPORT error SEMI 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal import declaration.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(94/*import_*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // import_ ::= IMPORT import_kind qid EQUALS id SEMI 
            {
              Element RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String kind = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "single");
                setAttribute(element, "alias", name);
                setAttribute(element, "namespace", kind);
                RESULT = appendChild(element, i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(94/*import_*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // import_ ::= IMPORT import_kind qid SEMI 
            {
              Element RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String kind = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "single");
                setAttribute(element, "namespace", kind);
                RESULT = appendChild(element, i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(94/*import_*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // import_ ::= IMPORT import_kind ALL qid SEMI 
            {
              Element RESULT = null;
		int kindleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String kind = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element element = createElement("Import");
                setAttribute(element, "kind", "package");
                setAttribute(element, "namespace", kind);
                RESULT = appendChild(element, i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(94/*import_*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // imports_opt ::= imports 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(93/*imports_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // imports_opt ::= 
            {
              Vector RESULT = null;
		  RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(93/*imports_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // imports ::= imports import_ 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(92/*imports*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // imports ::= import_ 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(92/*imports*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // guards_opt ::= GUARD expressions 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector e = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChildren(createElement("Guards"), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(91/*guards_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // guards_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(91/*guards_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // generator_in_opt ::= IN expression 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*generator_in_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // generator_in_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*generator_in_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // generators ::= generators COMMA generator 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(88/*generators*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // generators ::= generators COMMA expression 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element generator = (Element)list.get(list.size()-1);
                NodeList filtList = generator.getElementsByTagName("Filters");
                if ((filtList == null) || (filtList.getLength() <= 0))
                    appendChild(generator, appendChild(createElement("Filters"), e));
                else
                    appendChild((Element)filtList.item(filtList.getLength()-1), e);
                RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(88/*generators*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // generators ::= generator 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(88/*generators*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // generator ::= for_each type_expr decl_generators generator_in_opt 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element element = createElement("Generator");
                appendChild(element, type);
                appendChildren(element, g);
                RESULT = appendChild(element, i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(89/*generator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // generator ::= for_each decl_generators generator_in_opt 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element element = createElement("Generator");
                appendChildren(element, g);
                RESULT = appendChild(element, i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(89/*generator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr_var ::= OLD id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = createElement("Expr", "Var");
                setName(e, id);
                RESULT = setAttribute(e, "old", "Yes"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(81/*expr_var*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr_var ::= id 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Expr", "Var"), id); 
              CUP$Parser$result = new java_cup.runtime.Symbol(81/*expr_var*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_unary ::= unary_expression_op expr_postfix 
            {
              Element RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(createElement("Expr", "UnaryOp"), o, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(80/*expr_unary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr_unary ::= expr_postfix 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(80/*expr_unary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_set ::= LBRACE expressions colon_generators_opt RBRACE 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector m = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = createElement("Expr", "Set");
                appendChildren(e, m);
                appendChildren(e, g);
                RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(77/*expr_set*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_set ::= LBRACE RBRACE 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "Set"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(77/*expr_set*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_proc ::= PROC error end_procedure 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal proc expression.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(76/*expr_proc*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_proc ::= PROC LPAR decl_parameters_opt RPAR var_decl_variables_opt BEGIN statements end_proc 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = createElement("Expr", "Proc");
                appendChildren(e, d);
                appendChildren(e, v);
                appendChildren(e, s);
                RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(76/*expr_proc*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_primary ::= LPAR expression RPAR 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_primary ::= expr_map 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_primary ::= expr_set 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_primary ::= expr_list 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_primary ::= expr_let 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_primary ::= expr_proc 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_primary ::= expr_lambda 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_primary ::= expr_if 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_primary ::= expr_literal 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_primary ::= expr_var 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*expr_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr_postfix ::= expr_postfix DOT id 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(setName(createElement("Expr", "Entry"), id), c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr_postfix ::= expr_postfix LBRACK expressions_opt RBRACK 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = appendChild(createElement("Expr", "Indexer"), c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr_postfix ::= expr_postfix LPAR expressions_opt RPAR 
            {
              Element RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector i = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = appendChild(createElement("Expr", "Application"), c);
                RESULT = appendChild(e, appendChildren(createElement("Args"), i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr_postfix ::= expr_primary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*expr_postfix*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr_map ::= MAP LBRACE mappings colon_generators_opt RBRACE 
            {
              Element RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector m = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = appendChildren(appendChildren(createElement("Expr", "Map"), m), g); 
              CUP$Parser$result = new java_cup.runtime.Symbol(73/*expr_map*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr_map ::= MAP LBRACE RBRACE 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "Map"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(73/*expr_map*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr_literal ::= TRUE 
            {
              Element RESULT = null;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Boolean");
                RESULT = setAttribute(e, "value", "1"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr_literal ::= string 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "String");
                RESULT = setAttribute(e, "value", v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr_literal ::= Real 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Real");
                RESULT = setAttribute(e, "value", v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr_literal ::= NULL 
            {
              Element RESULT = null;
		  RESULT = setAttribute(createElement("Expr", "Literal"), "literal-kind", "Null"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr_literal ::= Integer 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Integer");
                RESULT = setAttribute(e, "value", v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_literal ::= FALSE 
            {
              Element RESULT = null;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Boolean");
                RESULT = setAttribute(e, "value", "0"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_literal ::= character 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element e = createElement("Expr", "Literal");
                setAttribute(e, "literal-kind", "Character");
                RESULT = setAttribute(e, "value", v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*expr_literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_list ::= LBRACK expressions colon_generators_opt RBRACK 
            {
              Element RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = createElement("Expr", "List");
                appendChildren(e, l);
                RESULT = appendChildren(e, g);
             
              CUP$Parser$result = new java_cup.runtime.Symbol(70/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_list ::= LBRACK RBRACK 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "List"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(70/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr_let ::= LET error end_let 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal let expression.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(69/*expr_let*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr_let ::= LET decl_variables COLON expression end_let 
            {
              Element RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = createElement("Expr", "Let");
                appendChildren(e, v);
                RESULT = appendChild(e, b); 
              CUP$Parser$result = new java_cup.runtime.Symbol(69/*expr_let*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_lambda ::= LAMBDA LPAR decl_parameters_opt RPAR function_ret_type_opt var_decl_variables_opt COLON expression end_lambda 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Vector d = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element e = createElement("Expr", "Lambda");
                appendChildren(e, d);
                appendChild(e, t);
                appendChildren(e, v);
                RESULT = appendChild(e, b); 
              CUP$Parser$result = new java_cup.runtime.Symbol(68/*expr_lambda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_if ::= IF error end_if 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal if expression.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*expr_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_if ::= IF expression THEN expression ELSE expression end_if 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = appendChild(createElement("Expr", "If"), i, t, f); 
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*expr_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_binary ::= expr_binary binary_expression_op expr_unary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(e, o, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*expr_binary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_binary ::= expr_unary binary_expression_op expr_unary 
            {
              Element RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element o = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(createElement("Expr", "BinOpSeq"), e1, o, e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*expr_binary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expressions_opt ::= expressions 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(84/*expressions_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expressions_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(84/*expressions_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expressions ::= expressions COMMA expression 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(83/*expressions*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expressions ::= expression 
            {
              Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(83/*expressions*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expr_binary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(82/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expr_unary 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(82/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // entry_types_opt ::= entry_types 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*entry_types_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // entry_types_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*entry_types_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // entry_types ::= entry_types COMMA entry_type 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*entry_types*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // entry_types ::= entry_type 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*entry_types*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // entry_type ::= type_expr 
            {
              Element RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(createElement("Entry", "Type"), type); 
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*entry_type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // entry_tagged_types_opt ::= entry_tagged_types 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*entry_tagged_types_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // entry_tagged_types_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*entry_tagged_types_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // entry_tagged_types ::= entry_tagged_types COMMA entry_tagged_type 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*entry_tagged_types*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // entry_tagged_types ::= entry_tagged_type 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*entry_tagged_types*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // entry_tagged_type ::= id COLON type_expr 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element element = createElement("Entry", "Type");
                setName(element, id);
                RESULT = appendChild(element, type); 
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*entry_tagged_type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // entry_tagged_expr ::= id EQUALS expression 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element option = createElement("Entry", "Expr");
                setName(option, id);
                RESULT = appendChild(option, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*entry_tagged_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // entry_taggeds_opt ::= entry_taggeds 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*entry_taggeds_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // entry_taggeds_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*entry_taggeds_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // entry_taggeds ::= entry_taggeds COMMA entry_tagged 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*entry_taggeds*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // entry_taggeds ::= entry_tagged 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*entry_taggeds*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // entry_tagged ::= id EQUALS expression 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element option = createElement("Entry", "Expr");
                setName(option, id);
                RESULT = appendChild(option, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*entry_tagged*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // entry_tagged ::= id COLON type_expr 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element type = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element option = createElement("Entry", "Type");
                setName(option, id);
                RESULT = appendChild(option, type); 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*entry_tagged*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // decl_variable_state_head ::= type_expr id 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element decl = createElement("Decl" , "Variable");
                setName(decl, i);
                RESULT = appendChild(decl, t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*decl_variable_state_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // decl_variable_state_head ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element decl = createElement("Decl" , "Variable");
                setName(decl, i);
                RESULT = decl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*decl_variable_state_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // decl_variable_state ::= MUTABLE decl_variable_state_head EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 setAttribute(d, "mutable", "Yes"); RESULT = appendChild(d, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // decl_variable_state ::= decl_variable_state_head EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(d, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // decl_variable_state ::= decl_variable_state_head COLON_EQUALS expression 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 setAttribute(d, "assignable", "Yes"); RESULT = appendChild(d, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // decl_variable_state ::= decl_variable_state_head 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 setAttribute(d, "assignable", "Yes"); RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*decl_variable_state*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // decl_variable_procedure ::= PROCEDURE error end_procedure 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal procedure declaration.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*decl_variable_procedure*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // decl_variable_procedure ::= PROCEDURE id LPAR decl_parameters_opt RPAR var_decl_variables_opt BEGIN statements end_procedure 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element decl = createElement("Decl" , "Variable");
                Element type = createElement("Type", "Procedure" );
                Element proc = createElement("Expr", "Proc");
                appendChild(decl, type, proc);
                setName(decl, id);
                if (p != null) {
                    appendChildren(proc, p);
             /*       for (Iterator pi = p.iterator(); pi.hasNext(); ) {
                        Element aParameter = (Element)pi.next();
                        NodeList type_list = aParameter.getElementsByTagName("Type");
                        int typeCount = type_list.getLength();
                        for (int i = 0; i < typeCount; i++) {
                            Element typeNode = (Element)type_list.item(i);
                            Element entry = createElement("Entry", "Type");
                            appendChild(entry, typeNode.cloneNode(true));
                            appendChild(type, entry);
                        }
                    } */
                }
                setAttribute(type, "infer", "true");
                appendChildren(proc, v);
                appendChildren(proc, s);
                RESULT = decl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*decl_variable_procedure*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_ret_type_opt ::= DASH_DASH_GT type_expr 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = t; 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*function_ret_type_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_ret_type_opt ::= 
            {
              Element RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*function_ret_type_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decl_variable_function ::= FUNCTION error end_function 
            {
              Element RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 error("Illegal function declaration.", k, kleft, kright); RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*decl_variable_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decl_variable_function ::= FUNCTION id LPAR decl_parameters_opt RPAR function_ret_type_opt var_decl_variables_opt COLON expression end_function 
            {
              Element RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Element decl = createElement("Decl" , "Variable");
                Element type = createElement("Type", "Function");
                Element lambda = createElement("Expr", "Lambda");
                appendChild(decl, type, lambda);
                setName(decl, id);
                if (p != null) {
                    appendChildren(lambda, p);
          /*          for (Iterator pi = p.iterator(); pi.hasNext(); ) {
                        Element aParameter = (Element)pi.next();
                        NodeList type_list = aParameter.getElementsByTagName("Type");
                        int typeCount = type_list.getLength();
                        for (int i = 0; i < typeCount; i++) {
                            Element typeNode = (Element)type_list.item(i);
                            Element entry = createElement("Entry", "Type");
                            appendChild(entry, typeNode.cloneNode(true));
                            appendChild(type, entry);
                        }
                    }   */
                }
                appendChild(lambda, t);  // may be null, then nothing happens.
           //     appendChild(type, (t == null) ? null : t.cloneNode(true));
                setAttribute(type, "infer", "true");
                appendChildren(lambda, v);
                appendChild(lambda, e);
                RESULT = decl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*decl_variable_function*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decl_variables ::= decl_variables COMMA decl_variable 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*decl_variables*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decl_variables ::= decl_variable 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*decl_variables*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // decl_variable ::= decl_variable_procedure 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // decl_variable ::= decl_variable_function 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decl_variable ::= decl_variable_state 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*decl_variable*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decl_parameter_head ::= type_expr id 
            {
              Element RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element p = createElement("Decl", "Parameter");
                setName(p, i);
                appendChild(p, t);
                RESULT = p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*decl_parameter_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decl_parameter_head ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Element p = createElement("Decl", "Parameter");
                setName(p, i);
                RESULT = p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*decl_parameter_head*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // decl_parameter ::= decl_parameter_head EQUALS expression 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = appendChild(p, e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*decl_parameter*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // decl_parameter ::= decl_parameter_head 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*decl_parameter*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // decl_parameters_opt ::= decl_parameters 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*decl_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // decl_parameters_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*decl_parameters_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // decl_parameters ::= decl_parameters COMMA decl_parameter 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*decl_parameters*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // decl_parameters ::= decl_parameter 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*decl_parameters*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decl_inputs ::= decl_inputs COMMA decl_input 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*decl_inputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decl_inputs ::= decl_input 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*decl_inputs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decl_input ::= UNDER_SCORE 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Input"), i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*decl_input*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decl_input ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Input"), i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*decl_input*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decl_generator ::= id 
            {
              Element RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = setName(createElement("Decl", "Generator"), i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*decl_generator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decl_generators ::= decl_generators COMMA decl_generator 
            {
              Vector RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*decl_generators*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decl_generators ::= decl_generator 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		  Vector list = new Vector(); list.add(p); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*decl_generators*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // structure_foreach ::= generators DO structure_stmts end_foreach 
            {
              Element RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ss = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
            Element s = createElement("StructureStmt", "Foreach");
            appendChildren(s, g);
            appendChildren(s, ss);
            RESULT = s; 
        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*structure_foreach*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // structure_cond ::= IF expression THEN structure_stmts_opt ELSE structure_stmts_opt end_if 
            {
              Element RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element cond = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtsThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int stmtsThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List stmtsThen = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtsElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List stmtsElse = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
            Element s = createElement("StructureStmt", "If");
            appendChild(s, cond);
            Element s1 = createElement("StructureBlock", "Then");
            appendChildren(s1, stmtsThen);
            appendChild(s, s1);
            Element s2 = createElement("StructureBlock", "Else");
            appendChildren(s2, stmtsElse);
            appendChild(s, s2);
            RESULT = s;
         
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*structure_cond*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // structure_cond ::= IF expression THEN structure_stmts_opt end_if 
            {
              Element RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element cond = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtsThenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsThenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List stmtsThen = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
            Element s = createElement("StructureStmt", "If");
            appendChild(s, cond);
            Element s1 = createElement("StructureBlock", "Then");
            appendChildren(s1, stmtsThen);
            appendChild(s, s1);
            RESULT = s;
         
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*structure_cond*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // attribute ::= id COLON type_expr SEMI 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          Element attr = createElement("Attribute", "Type");
          setName(attr, nm);
          appendChild(attr, t);
          RESULT = attr;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*attribute*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // attribute ::= id EQUALS expression SEMI 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          Element attr = createElement("Attribute", "Value");
          setName(attr, nm);
          appendChild(attr, val);
          RESULT = attr;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*attribute*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // attributes ::= attributes attribute 
            {
              List RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 as.add(a); RESULT = as; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*attributes*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // attributes ::= attribute 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List as = new ArrayList(); as.add(a); RESULT = as; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*attributes*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // attributes_opt ::= LBRACE attributes RBRACE 
            {
              List RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*attributes_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // attributes_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*attributes_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // indices ::= indices LBRACK expression RBRACK 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 list.add(e); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // indices ::= LBRACK expression RBRACK 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 List idcs = new ArrayList(); idcs.add(e); RESULT = idcs; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // indices_opt ::= indices 
            {
              List RESULT = null;
		int idcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List idcs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = idcs; 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*indices_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // indices_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*indices_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // entity_ref ::= id indices_opt 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List idcs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
        Element e = createElement("EntityRef");
        setName(e, nm);
        appendChildren(e, idcs);
      	RESULT = e;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*entity_ref*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // port_ref ::= id indices_opt 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List idcs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
        Element e = createElement("PortRef");
        setName(e, nm);
        appendChildren(e, idcs);
      	RESULT = e;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*port_ref*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // connector ::= entity_ref DOT port_ref 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
         Element c = createElement("PortSpec", "Entity");
         appendChild(c, e, p);
         RESULT = c;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*connector*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // connector ::= port_ref 
            {
              Element RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
         Element c = createElement("PortSpec", "Local");
         appendChild(c, p);
         RESULT = c;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*connector*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // structure_basic ::= connector DASH_DASH_GT connector attributes_opt SEMI 
            {
              Element RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element src = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element dst = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List attrs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Element e = createElement("StructureStmt", "Connection");
        appendChild(e, src, dst);
        appendChildren(e, attrs);
        RESULT = e;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*structure_basic*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // structure_stmt ::= structure_foreach 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*structure_stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // structure_stmt ::= structure_cond 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*structure_stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // structure_stmt ::= structure_basic 
            {
              Element RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*structure_stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structure_stmts ::= structure_stmts structure_stmt 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add(s); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*structure_stmts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structure_stmts ::= structure_stmt 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List list = new ArrayList(); list.add(s); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*structure_stmts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structure_stmts_opt ::= structure_stmts 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*structure_stmts_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structure_stmts_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*structure_stmts_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // section_structure ::= STRUCTURE structure_stmts_opt 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*section_structure*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instantiation_args_named ::= instantiation_args_named COMMA id EQUALS expression 
            {
              List RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
	      Element a = createElement("Arg");
	      setName(a, nm);
	      appendChild(a, e);
	      as.add(a); 
	      RESULT = as; 
	  
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*instantiation_args_named*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instantiation_args_named ::= id EQUALS expression 
            {
              List RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
	      List as = new ArrayList(); 
	      Element a = createElement("Arg");
	      setName(a, nm);
	      appendChild(a, e);
	      as.add(a); RESULT = as; 
	  
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*instantiation_args_named*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instantiation_args_opt ::= instantiation_args_named 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = args; 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*instantiation_args_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instantiation_args_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*instantiation_args_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // entity_exprs ::= entity_exprs COMMA entity_expr 
            {
              List RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*entity_exprs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // entity_exprs ::= entity_expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List es = new ArrayList(); es.add(e); RESULT = es; 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*entity_exprs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // entity_expr ::= LBRACK entity_exprs colon_generators_opt RBRACK 
            {
              Element RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector g = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
          Element e = createElement("EntityExpr", "List");
          appendChildren(e, l);
          appendChildren(e, g);
          RESULT = e; 
      
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*entity_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // entity_expr ::= IF expression THEN entity_expr ELSE entity_expr end_if 
            {
              Element RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element cond = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          Element e = createElement("EntityExpr", "If");
          appendChild(e, cond, e1, e2);
          RESULT = e;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*entity_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // entity_expr ::= id LPAR instantiation_args_opt RPAR attributes_opt 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List attrs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
          Element e = createElement("EntityExpr", "Instantiation");
          setName(e, nm);
          appendChildren(e, args);
          appendChildren(e, attrs);
          RESULT = e;
      
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*entity_expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dimension ::= LBRACK expression RBRACK 
            {
              Element RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*dimension*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dimension ::= LBRACK RBRACK 
            {
              Element RESULT = null;
		 RESULT = createElement("Expr", "Undefined"); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*dimension*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dimensions ::= dimensions dimension 
            {
              List RESULT = null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List dims = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 dims.add(d); RESULT = dims; 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*dimensions*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dimensions ::= dimension 
            {
              List RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
	  	  List dims = new ArrayList();
	  	  dims.add(d);
	  	  RESULT = dims;
	  
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*dimensions*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dimensions_opt ::= dimensions 
            {
              List RESULT = null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List dims = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = dims; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*dimensions_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dimensions_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*dimensions_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // entity_decl ::= id dimensions_opt EQUALS entity_expr SEMI 
            {
              Element RESULT = null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List dims = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element ee = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
        Element e = createElement("EntityDecl"); 
        setName(e, nm);
    	if (dims != null) {
    		Element d = createElement("Dimensions");
    		appendChildren(d, dims);
    		appendChild(e, d);
    	}
        appendChild(e, ee);
        RESULT = e;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*entity_decl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // entity_decl ::= type_expr id dimensions_opt EQUALS entity_expr SEMI 
            {
              Element RESULT = null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element et = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List dims = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element ee = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
        Element e = createElement("EntityDecl"); 
        setName(e, nm);
    	if (dims != null) {
    		Element d = createElement("Dimensions");
    		appendChildren(d, dims);
    		appendChild(e, d);
    	}
        appendChild(e, et, ee);
        RESULT = e;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*entity_decl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // entity_decls ::= entity_decls entity_decl 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 list.add(d); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*entity_decls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // entity_decls ::= entity_decl 
            {
              List RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List list = new ArrayList(); list.add(d); RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*entity_decls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // entity_decls_opt ::= entity_decls 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*entity_decls_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // entity_decls_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*entity_decls_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // section_entities ::= ENTITIES entity_decls_opt 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*section_entities*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // subnetwork ::= NETWORK qid type_parameters_opt LPAR decl_parameters_opt RPAR port_inputs_opt EQUALS_EQUALS_GT port_outputs_opt COLON network_body_things_opt end_network 
            {
              Element RESULT = null;
		int aaaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aaaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String aaa = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Element name = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int typeParsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int typeParsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Vector typePars = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Vector pars = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int iportsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iportsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector iports = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oportsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int oportsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector oports = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int thingsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int thingsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List things = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int zzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object zzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		Element n = createElement("Network");
		appendChild(n, name);
		appendChildren(n, iports);
		appendChildren(n, oports);
		appendChildren(n, typePars);
		appendChildren(n, pars);

		appendChildren(n, things);

        addTextRange(n, aaaleft, aaaright, zzzleft, zzzright);
        RESULT = n;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*subnetwork*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_decl ::= decl_variable_function 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*var_decl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_decl ::= decl_variable_state SEMI 
            {
              Element RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*var_decl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decls ::= var_decls var_decl 
            {
              List RESULT = null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 ds.add(d); RESULT = ds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*var_decls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decls ::= var_decl 
            {
              List RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List ds = new ArrayList(); ds.add(d); RESULT= ds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*var_decls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // section_vars ::= VAR var_decls 
            {
              List RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List vars = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = vars; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*section_vars*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // network_body_thing ::= section_structure 
            {
              List RESULT = null;
		int structureSectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int structureSectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List structureSection = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = structureSection; 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*network_body_thing*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // network_body_thing ::= section_entities 
            {
              List RESULT = null;
		int entitySectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int entitySectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List entitySection = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = entitySection; 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*network_body_thing*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // network_body_thing ::= subnetwork 
            {
              List RESULT = null;
		int networkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int networkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element network = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = java.util.Collections.singletonList(network); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*network_body_thing*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // network_body_thing ::= section_vars 
            {
              List RESULT = null;
		int varSectionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int varSectionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List varSection = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = varSection; 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*network_body_thing*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // network_body_thing ::= import_ 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = java.util.Collections.singletonList(i); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*network_body_thing*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // network_body_things ::= network_body_things network_body_thing 
            {
              List RESULT = null;
		int thingsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int thingsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List things = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int moreThingsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int moreThingsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List moreThings = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 things.addAll(moreThings); RESULT = things; 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*network_body_things*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // network_body_things ::= network_body_thing 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List things = new ArrayList(); things.addAll(list); RESULT = things; 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*network_body_things*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // network_body_things_opt ::= network_body_things 
            {
              List RESULT = null;
		int thingsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int thingsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List things = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = things; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*network_body_things_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // network_body_things_opt ::= 
            {
              List RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*network_body_things_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= network EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // network ::= NETWORK qid type_parameters_opt LPAR decl_parameters_opt RPAR port_inputs_opt EQUALS_EQUALS_GT port_outputs_opt COLON attributes_opt network_body_things_opt end_network 
            {
              Element RESULT = null;
		int aaaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aaaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String aaa = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Element name = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeParsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeParsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Vector typePars = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Vector pars = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int iportsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iportsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Vector iports = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oportsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oportsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Vector oports = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List attrs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int thingsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int thingsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List things = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zzzleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int zzzright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object zzz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		Element n = getDocumentElement();
		appendChild(n, name);
		appendChildren(n, attrs);
		appendChildren(n, iports);
		appendChildren(n, oports);
		appendChildren(n, typePars);
		appendChildren(n, pars);

		appendChildren(n, things);

        addTextRange(n, aaaleft, aaaright, zzzleft, zzzright);
        RESULT = n;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*network*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

