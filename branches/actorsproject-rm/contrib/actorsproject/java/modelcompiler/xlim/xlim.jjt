/* -*-Java-*- */

options {
    MULTI                       = true;
    VISITOR                     = true;
    NODE_DEFAULT_VOID           = true;
    NODE_SCOPE_HOOK             = false;
    NODE_PREFIX                 = "";
    JAVA_UNICODE_ESCAPE         = true;
    STATIC                      = false;
} 

PARSER_BEGIN(XmlParser)
    package xlimAST;
    public class XmlParser {
}
PARSER_END(XmlParser)

//----------------------------------------------//
//                LEXICAL TOKENS                //
//----------------------------------------------//
<DEFAULT,BOUNDS> SPECIAL_TOKEN : /* WHITE SPACE */
{
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
    |
    "\f"
}// WHITE SPACE

<DEFAULT,BOUNDS> SPECIAL_TOKEN : /* COMMENTS */ 
{
    < "<!--" ( ~["-"] | ( "-" ~["-"] ) )* "-->">
}// COMMENTS

<DEFAULT> TOKEN : /* Reserved Words */
{
   <XML		: "xml">
 | <DOCTYPE : "DOCTYPE">
 | <PUBLIC : "PUBLIC">
 | <encoding		: "encoding">
 | <version		: "version">
 | <XsiNoNamespaceSchemaLocation		: "xsi:noNamespaceSchemaLocation">
 | <XmlnsXsi		: "xmlns:xsi">
 | <portName		: "portName" >
 | <module		: "module" >
 | <note		: "note" >
 | <sourceName		: "sourceName" >
 | <PHI		: "PHI" >
 | <kind		: "kind" >
 | <initValue		: "initValue" >
 | <typeName		: "typeName" >
 | <port		: "port" >
 | <decision		: "decision" >
 | <operation		: "operation" >
 | <design		: "design" >
 | <stateVar		: "stateVar" >
 | <size		: "size" >
 | <dir		: "dir" >
 | <source		: "source" >
 | <value		: "value" >
 | <actor_port		: "actor-port" >
 | <qualifier		: "qualifier" >
 | <style		: "style" >
 | <removable		: "removable" >
 | <autostart		: "autostart" >
 | <target		: "target" >
 | <name		: "name" >
}// Reserved Words

<DEFAULT, BOUNDS> TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
        |
        <HEX_LITERAL> (["l","L"])?
        |
        <OCTAL_LITERAL> (["l","L"])?
    >
    |
    < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
    |
    < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
    |
    < #OCTAL_LITERAL: "0" (["0"-"7"])* >
    |
    < FLOAT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
        |
        "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
        |
        (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
        |
        (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
    >
    |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
    < CHARACTER_LITERAL:
        "'"
        (   (~["'","\\","\n","\r"])
            |
            ("\\"
                (   ["n","t","b","r","f","\\","'","\""]
                    |
                    ["0"-"7"] ( ["0"-"7"] )?
                    |
                    ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
            )
        )
        "'"
    >
    |
    < STRING_LITERAL:
        ("\""
        (   (~["\"","\n","\r"])
        )*
        "\"")
       | ("\'"
        (   (~["\'","\n","\r"])
        )*
        "\'")
    >
}// LITERALS
<DEFAULT, BOUNDS> TOKEN : /* IDENTIFIERS */
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
    |
    < #LETTER:
        [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
        ]
    >
    |
    < #DIGIT:
        [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
        ]
    >
}// IDENTIFIERS
<DEFAULT,BOUNDS> TOKEN : /* SEPARATORS */
{
     < LBRACE               : "{"    >
    | < RBRACE               : "}"    >
    | < LBRACKET             : "["    >
    | < RBRACKET             : "]"    >
    | < SEMICOLON            : ";"    >
    | < LTSLASH              : "</"    > : DEFAULT
    | < LTBANG               : "<!"    > : DEFAULT
    | < LT                   : "<"    > : DEFAULT
    | < LTQ                  : "<?"    > : DEFAULT
    | < GT                   : ">"    > : BOUNDS
    | < QGT                  : "?>"    > : BOUNDS
}// SEPARATORS
<DEFAULT,BOUNDS> TOKEN : /* OPERATORS */
{
      < ASSIGN               : "="    >
}// OPERATORS
Start Start() #Start : {}
{
  Specification()
  { return jjtThis; }
}

void Specification() #Specification : {}
{
  XmlHeader()
  ( [DocType()] ) #Opt(true)
  ElementList()
}

void DocType() #DocType : {String s;}
{
  <LTBANG>
  {
		s = new String();
		if (getToken(1).kind != GT ) {
		   s += getData();
        } 
  }       
     {jjtThis.setSTRING(s);}
}

JAVACODE
String getData() {
	StringBuffer s = new StringBuffer();
//     jjtThis.someData = true;
    while ((getToken(1)).kind != LT && (getToken(1)).kind != LTSLASH) {
		Token t = getNextToken();
		if (t.specialToken != null) {
			Token tmp_t = t.specialToken;
			while (tmp_t.specialToken != null) {
				tmp_t = tmp_t.specialToken;
			}
			while (tmp_t != null) {
				s.append(tmp_t.image);
				tmp_t = tmp_t.next;
			}
		}
		s.append(t.image);
       s.append(" ");
	}
	return s.toString();
}

void XmlHeader() #XmlHeader : {}
{
  <LTQ> <XML> AttributeList() <QGT>
}

void ElementList() #List : {}
{
  (Element())*
}

void AttributeList() #List : {}
{
  (LOOKAHEAD(2) Attribute())*
}

void AttrValue() #AttrValue : { Token t; }
{
    t = <STRING_LITERAL>
        {jjtThis.setLITERAL(t.image);}
}

void Encoding() #Encoding : {}
{
  <encoding> "=" AttrValue()
}

void Version() #Version : {}
{
  <version> "=" AttrValue()
}

void XsiNoNamespaceSchemaLocation() #XsiNoNamespaceSchemaLocation : {}
{
  <XsiNoNamespaceSchemaLocation> "=" AttrValue()
}

void XmlnsXsi() #XmlnsXsi : {}
{
  <XmlnsXsi> "=" AttrValue()
}

void Element()  : {}
{
 ( <LT> (
  design()
  | module()
  | PHI()
  | port()
  | operation()
  | actor_port()
  | stateVar()
  | note()
  | initValue()
  | __DefaultElement__() 
 )) 
 | SimpleElement()
}

void SimpleElement() : {}
{
    IntElement()
	| FloatElement()
  	| StringElement()
}

void IntElement() #IntElement : { Token t; }
{
    t = <INTEGER_LITERAL>
	{jjtThis.setLITERAL(t.image);}
}

void FloatElement() #FloatElement : { Token t; }
{
    t = <FLOAT_LITERAL>
	{jjtThis.setLITERAL(t.image);}
}

void StringElement() #StringElement : { Token t;String s; }
{
	t = <IDENTIFIER>
	{
		s = t.image;
		if (getToken(1).kind != GT ) {
		s += getData();
	}
	}
        {jjtThis.setLITERAL(s);}
}
void __DefaultElement__() #__DefaultElement__ : { Token t;String s; }
{
	t = <IDENTIFIER> AttributeList()
 	(">" ElementList() "</" <IDENTIFIER> ">" | ElementList() "/>")
	{
		s = t.image;
		if (getToken(1).kind != GT ) {
		s += getData();
	}
	}
        {jjtThis.setTAG(s);}
}
void Attribute()  : {}
{
  Encoding()
 | Version()
 | XsiNoNamespaceSchemaLocation()
 | XmlnsXsi()
  | source()
  | style()
  | name()
  | removable()
  | sourceName()
  | dir()
  | kind()
  | portName()
  | decision()
  | target()
  | qualifier()
  | typeName()
  | value()
  | autostart()
  | size()
  | __DefaultAttribute__() 
  
}

void __DefaultAttribute__() # __DefaultAttribute__ : {Token t;}
{
  t=<IDENTIFIER> "=" AttrValue()
        {jjtThis.setNAME(t.image);}
}
void portName() #portName : {}
{
  <portName> "=" AttrValue()
}
void module() #module : {}
{
   <module> AttributeList()
  ( <GT> ElementList()  "</" <module>  ">" | ElementList() "/>" )
}
void note() #note : {}
{
   <note> AttributeList()
  ( <GT> ElementList()  "</" <note>  ">" | ElementList() "/>" )
}
void sourceName() #sourceName : {}
{
  <sourceName> "=" AttrValue()
}
void PHI() #PHI : {}
{
   <PHI> AttributeList()
  ( <GT> ElementList()  "</" <PHI>  ">" | ElementList() "/>" )
}
void kind() #kind : {}
{
  <kind> "=" AttrValue()
}
void initValue() #initValue : {}
{
   <initValue> AttributeList()
  ( <GT> ElementList()  "</" <initValue>  ">" | ElementList() "/>" )
}
void typeName() #typeName : {}
{
  <typeName> "=" AttrValue()
}
void port() #port : {}
{
   <port> AttributeList()
  ( <GT> ElementList()  "</" <port>  ">" | ElementList() "/>" )
}
void decision() #decision : {}
{
  <decision> "=" AttrValue()
}
void operation() #operation : {}
{
   <operation> AttributeList()
  ( <GT> ElementList()  "</" <operation>  ">" | ElementList() "/>" )
}
void design() #design : {}
{
   <design> AttributeList()
  ( <GT> ElementList()  "</" <design>  ">" | ElementList() "/>" )
}
void stateVar() #stateVar : {}
{
   <stateVar> AttributeList()
  ( <GT> ElementList()  "</" <stateVar>  ">" | ElementList() "/>" )
}
void size() #size : {}
{
  <size> "=" AttrValue()
}
void dir() #dir : {}
{
  <dir> "=" AttrValue()
}
void source() #source : {}
{
  <source> "=" AttrValue()
}
void value() #value : {}
{
  <value> "=" AttrValue()
}
void actor_port() #actor_port : {}
{
   <actor_port> AttributeList()
  ( <GT> ElementList()  "</" <actor_port>  ">" | ElementList() "/>" )
}
void qualifier() #qualifier : {}
{
  <qualifier> "=" AttrValue()
}
void style() #style : {}
{
  <style> "=" AttrValue()
}
void removable() #removable : {}
{
  <removable> "=" AttrValue()
}
void autostart() #autostart : {}
{
  <autostart> "=" AttrValue()
}
void target() #target : {}
{
  <target> "=" AttrValue()
}
void name() #name : {}
{
  <name> "=" AttrValue()
}
