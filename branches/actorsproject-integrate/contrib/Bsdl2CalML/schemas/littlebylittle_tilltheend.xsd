<?xml version="1.0" encoding="UTF-8"?>

<!--*
  * Copyright(c)2008, Samuel Keller, Christophe Lucarz, Joseph Thomas-Kerr 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *     * Redistributions of source code must retain the above copyright
  *       notice, this list of conditions and the following disclaimer.
  *     * Redistributions in binary form must reproduce the above copyright
  *       notice, this list of conditions and the following disclaimer in the
  *       documentation and/or other materials provided with the distribution.
  *     * Neither the name of the EPFL, University of Wollongong nor the
  *       names of its contributors may be used to endorse or promote products
  *       derived from this software without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY  Samuel Keller, Christophe Lucarz, 
  * Joseph Thomas-Kerr ``AS IS'' AND ANY 
  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL  Samuel Keller, Christophe Lucarz, 
  * Joseph Thomas-Kerr BE LIABLE FOR ANY
  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *-->
  
<!DOCTYPE bsschema SYSTEM "entities.dtd">

<xsd:schema xmlns:rvc="urn:mpeg:2006:01-RVC-NS"
    targetNamespace="urn:mpeg:mpeg21:2006:01-DIA-BSDL-TESTSUITE-NS"
    xmlns="urn:mpeg:mpeg21:2006:01-DIA-BSDL-TESTSUITE-NS"
    xmlns:test="urn:mpeg:mpeg21:2006:01-DIA-BSDL-TESTSUITE-NS"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:bs0="urn:mpeg:mpeg21:2003:01-DIA-BSDL0-NS"
    xmlns:bs1="urn:mpeg:mpeg21:2003:01-DIA-BSDL1-NS" xmlns:bs2="urn:mpeg:mpeg21:2003:01-DIA-BSDL2-NS"
    xmlns:bs2x="urn:mpeg:mpeg21:2003:01-DIA-BSDL2x-NS"
    elementFormDefault="qualified" attributeFormDefault="unqualified" bs2:rootElement="test:bitstream">
    
    <xsd:include schemaLocation="UnsignedIntegers.xsd"/>
    
    <xsd:annotation><xsd:appinfo>
        <rvc:output name="coeff" type="bool"/>
        <rvc:output name="coeff_inter" type="bool"/>
        <rvc:output name="size_L" type="bool"/>
        <rvc:output name="size_C" type="bool"/>
        <rvc:output name="diff" type="bool"/>
        <rvc:output name="mcbpc" type="bool"/>
        <rvc:output name="mcbpc_inter" type="bool"/>
        <rvc:output name="cbpy" type="bool"/>
        <rvc:output name="mv" type="bool"/>
        <rvc:output name="B" type="int"/>
        
        <rvc:input name="size_L_f"/>
        <rvc:input name="size_L_data"/>
        <rvc:input name="size_C_f"/>
        <rvc:input name="size_C_data"/>
        <rvc:input name="coeff_f"/>
        <rvc:input name="coeff_inter_f"/>
        <rvc:input name="diff_f"/>
        <rvc:input name="mv_f"/>
        <rvc:input name="mv_data"/>
        <rvc:input name="mcbpc_f"/>
        <rvc:input name="mcbpc_data"/>
        <rvc:input name="mcbpc_inter_f"/>
        <rvc:input name="mcbpc_inter_data"/>        
        <rvc:input name="cbpy_f"/>
        <rvc:input name="cbpy_data"/>
        
    </xsd:appinfo></xsd:annotation>
    
    <!-- ***************************************** -->
    <!-- bitstream declaration                     -->
    <!-- ***************************************** -->
    <xsd:element name="bitstream">
        <xsd:complexType>
            <xsd:sequence>
                
                <xsd:element name="start_code" type="test:b32" bs0:variable="true"/>
                
                <xsd:choice>
                    <!--<xsd:group ref="visual_object_sequence" bs2:if="$test:start_code=&visObjSeqSC;"/>-->
                    <xsd:group ref="VideoObjectLayer" bs2:if="$test:start_code &gt;= &voSC1; and $test:start_code &lt;= &voSC2;"/>
                    <xsd:element name="visual_object_sequence_end_code" type="test:b32" bs2:if="$test:start_code=&visObjSeqEC;"/>
                    <!--<xsd:group ref="GroupOfVideoObjectPlane" bs2:if="$test:start_code=&goVopSC;"/>-->
                </xsd:choice>
                
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>    
    
    
    <!-- ***************************************************** -->
    <!--  6.2.3  (a)	Video Object Layer                      	            -->
    <!-- ***************************************************** -->
  <xsd:group name="VideoObjectLayer">
        <xsd:sequence>
            <xsd:element name="video_object_start_code" type="test:b32" />
            
            <xsd:element name="video_object_layer_start_code" type="test:b32" bs2:ifNext="&volSC;" >
                <xsd:annotation> <xsd:appinfo>
                    <bs2x:variable name="shortVideoHeader" value="0" />
                    <bs2x:variable name="volVersion" value="if ($test:visual_object_verid) then $test:visual_object_verid else 1 end "/>
                </xsd:appinfo>  </xsd:annotation>
            </xsd:element>
                       
            <xsd:element name="random_accessible_vol" type="test:b1" />
            <xsd:element name="video_object_type_indication" type="test:b8" />
            
            <xsd:element name="is_object_layer_identifier" type="test:b1" bs0:variable="true" />
            
            <xsd:sequence bs2:if="$test:is_object_layer_identifier = 1">
                <xsd:element name="video_object_layer_verid" type="test:b4" >
                    <xsd:annotation> <xsd:appinfo>
                        <bs2x:variable name="volVersion" value="./text()"/>
                    </xsd:appinfo> </xsd:annotation>
                </xsd:element>
                <xsd:element name="video_object_layer_priority" type="test:b3" />
            </xsd:sequence>
            
            <xsd:element name="aspect_ratio_info" type="test:b4" bs0:variable="true" />
            <xsd:element name="par_width" type="test:b8" bs2:if="$test:aspect_ratio_info = &extendedPAR;" />
            <xsd:element name="par_height" type="test:b8" bs2:if="$test:aspect_ratio_info = &extendedPAR;" />
            <xsd:element name="vol_control_parameters" type="test:b1" bs0:variable="true" />       
            
            
            <xsd:sequence bs2:if="$test:vol_control_parameters = 1">
                <xsd:element name="chroma_format" type="test:b2"/>
                <xsd:element name="low_delay" type="test:b1"/>
                <xsd:element name="vbv_parameters" type="test:b1" bs0:variable="true"/>
                <xsd:sequence bs2:if="$test:vbv_parameters = 1">
                    <xsd:element name="first_half_bit_rate" type="test:b15"/>
                    <xsd:element name="marker_bit00" type="test:b1" fixed="1"/>
                    <xsd:element name="latter_half_bit_rate" type="test:b15"/>
                    <xsd:element name="marker_bit01" type="test:b1" fixed="1"/>
                    <xsd:element name="first_half_vbv_buffer_size" type="test:b15"/>
                    <xsd:element name="marker_bit02" type="test:b1" fixed="1"/>
                    <xsd:element name="latter_half_vbv_buffer_size" type="test:b3"/>
                    <xsd:element name="first_half_vbv_occupancy" type="test:b11"/>
                    <xsd:element name="marker_bit03" type="test:b1" fixed="1"/>
                    <xsd:element name="latter_half_vbv_occupancy" type="test:b15"/>
                    <xsd:element name="marker_bit04" type="test:b1" fixed="1"/>
                </xsd:sequence>
                </xsd:sequence>
            
            
            <xsd:element name="video_object_layer_shape" type="test:b2" bs0:variable="true" />
            <xsd:element name="video_object_layer_shape_extension" type="test:b4" bs2:if="$test:video_object_layer_shape = &grayscale; and $volVersion != 1"  />
            <xsd:element name="marker_bit05" type="test:b1" />
            
            
            <xsd:element name="vop_time_increment_resolution" type="test:b16" >
                <xsd:annotation>          <xsd:appinfo>
                    <bs2x:variable name="vopTimeIncrementBits" value="numbits(./text())"/> 
                </xsd:appinfo>        </xsd:annotation>
            </xsd:element>
            
            <xsd:element name="marker_bit06" type="test:b1" fixed="1" />
            <xsd:element name="fixed_vop_rate" type="test:b1" bs0:variable="true" />
            <xsd:element name="fixed_vop_time_increment" type="VOPTimeIncrementType" bs2:if="$test:fixed_vop_rate = 1" />  
            
            <xsd:choice>
                <xsd:group ref="nonBinaryShapeData" bs2:if="$test:video_object_layer_shape != &binaryOnly;"/>
                <!--<xsd:group ref="BinaryShapeData" bs2:if="$test:video_object_layer_shape = &binaryOnly;" />-->
            </xsd:choice>
            
            <xsd:element name="next_start_code" type="bs1:align8" />
            
            <!--<xsd:group ref="user_data" bs2:if="&udtaSC;" />  NOT SUPPORTED YET
            <xsd:element name="unsupportedBitstream01" type="xsd:base64Binary" bs2:if="$test:sprite_enable = &static;"/>   
            -->
            
            <xsd:group ref="VideoObjectPlane" bs2:nOccurs="2"/> <!--  bs2:if="if (sprite_enable == “static” && !low_latency_sprite_enable)" TO BE CONTINUED -->
            
        </xsd:sequence>
    </xsd:group>  
    
    <xsd:group name="nonBinaryShapeData">
        <xsd:sequence>
            <xsd:sequence  bs2:if="$test:video_object_layer_shape = &rectangular;">
                <xsd:element name="marker_bit07" type="test:b1" fixed="1" />
                <xsd:element name="video_object_layer_width" type="test:b13" bs0:variable="true" />
                <xsd:element name="marker_bit08" type="test:b1" fixed="1" />
                <xsd:element name="video_object_layer_height" type="test:b13" bs0:variable="true" />
                <xsd:element name="marker_bit09" type="test:b1" fixed="1" >
<!--
                         <xsd:annotation>  <xsd:appinfo>
                        <bs2x:variable name="mbCount"  value="(($test:video_object_layer_width + 15) idiv 16) *  (($test:video_object_layer_height + 15) idiv 16)"/>
                        <bs2x:variable name="mbNumberLength" value="testx:numbits($mbCount)"/>
                        </xsd:appinfo> </xsd:annotation>
-->
                </xsd:element>
            </xsd:sequence>
            
            
            <xsd:element name="interlaced" type="test:b1" bs0:variable="true" />
            <xsd:element name="obmc_disable" type="test:b1" />
            <xsd:element name="sprite_enable" type="SpriteType" bs0:variable="true" />
            <!--<xsd:sequence   bs2:if="$test:sprite_enable = &static; or $test:sprite_enable = &GMC;"/>    NOT SUPPORTED -->           
            <xsd:element name="sadct_disable" bs2:if="$volVersion != 1 and $test:video_object_layer_shape != &rectangular;" type="test:b1" />
            <xsd:element name="not_8_bit" type="test:b1" bs0:variable="true" />
            <xsd:sequence bs2:if="$test:not_8_bit = 1">
                <xsd:element name="quant_precision" type="test:b4" bs0:variable="true" />
                <xsd:element name="bits_per_pixel" type="test:b4" />
            </xsd:sequence>
            <xsd:sequence   bs2:if="$test:video_object_layer_shape = &grayscale;">
                <xsd:element name="no_gray_quant_update" type="test:b1" />
                <xsd:element name="composition_method" type="test:b1" />
                <xsd:element name="linear_composition" type="test:b1" />
            </xsd:sequence>
            <xsd:element name="quant_type" type="test:b1" bs0:variable="true" />
            <xsd:sequence   bs2:if="$test:quant_type = 1">
                <xsd:element name="load_intra_quant_mat" type="test:b1" bs0:variable="true" />
                <!--<xsd:group ref="QuantisationMatrix" bs2:if="$test:load_intra_quant_mat = 1"/> NOT SUPPORTED -->
                <xsd:element name="load_nonintra_quant_mat" type="test:b1" bs0:variable="true" />
                <!-- <xsd:group ref="QuantisationMatrix" bs2:if="$test:load_nonintra_quant_mat = 1"/> NOT SUPPORTED -->
                <!--<xsd:sequence   bs2:if="$test:video_object_layer_shape = &grayscale;">
                    <xsd:element name="unsupportedBitstream03" type="xsd:base64Binary"/>  
                </xsd:sequence>-->
            </xsd:sequence>
            <xsd:element name="quarter_sample" type="test:b1" bs2:if="$volVersion != 1" />
            <xsd:element name="complexity_estimation_disable" type="test:b1" bs0:variable="true" />
            
            <!--
                <xsd:group ref="define_vop_complexity_estimation_header" bs2:if="$test:complexity_estimation_disable = 0">             
                    <xsd:annotation>                         <xsd:appinfo>
                            <bs2x:variable name="defineVopComplexityEstimationHeader"/>
                        </xsd:appinfo>                     </xsd:annotation>
                </xsd:group>-->
            <!--BAAHHHH, PAS DE VARIABLE SUR UN GROUP, A VOIR -->
            
            <xsd:element name="resync_marker_disable" type="test:b1" />
            <xsd:element name="data_partitioned" type="test:b1" bs0:variable="true" />
            <xsd:element name="reversible_vlc" type="test:b1" bs2:if="$test:data_partitioned = 1" />
            
            <xsd:sequence bs2:if="$volVersion != 1">
                <xsd:element name="newpred_enable" type="test:b1" bs0:variable="true" />
                <xsd:sequence  bs2:if="$test:newpred_enable = 1">
                    <xsd:element name="requested_upstream_message_type" type="test:b2" />
                    <xsd:element name="newpred_segment_type" type="test:b1" />
                </xsd:sequence>
                <xsd:element name="reduced_resolution_vop_enable" type="test:b1" bs0:variable="true" />
            </xsd:sequence>
            
            <xsd:element name="scalability" type="test:b1" bs0:variable="true" />
            
            <!--<xsd:sequence   bs2:if="$test:scalability = 1"> NOT SUPPORTED YET -->               
            
        </xsd:sequence>
    </xsd:group>
    
    <!-- ***************************************************** -->
    <!--  6.2.5	Video Object Plane                             -->
    <!-- ***************************************************** -->
    <xsd:group name="VideoObjectPlane">
        <xsd:sequence>
            <xsd:element name="vop_start_code" type="test:b32" />
            <xsd:element name="vop_coding_type" type="test:b2" bs0:variable="true" />
            <!--<xsd:element name="modulo_time_base1" type="test:b1" bs2:ifNext="80FF" /> PETIT PB AVEC IFNEXT-->
            <xsd:element name="modulo_time_base0" type="test:b1" />
            <xsd:element name="marker_bit12" type="test:b1" fixed="1" />
            <xsd:element name="vop_time_increment" type="VOPTimeIncrementType" />
            <xsd:element name="marker_bit13" type="test:b1" fixed="1" />
            <xsd:element name="vop_coded" type="test:b1" bs0:variable="true" />
            <xsd:choice>
                <xsd:element name="next_start_code" type="bs1:align8" bs2:if="$test:vop_coded = 0"/>
                <xsd:group ref="VOPData" bs2:if="$test:vop_coded != 0"/>
            </xsd:choice>
                       
            <xsd:sequence bs2:if="$test:vop_coded=1">
                <xsd:group ref="MotionShapeTexture"/>
                <!--<xsd:element name="VP" type="VPType"   maxOccurs="unbounded" bs2:if="$nextResyncMarker = 1">
                    <xsd:annotation><xsd:appinfo>
                    <bs0:readAhead bs2:unit="bit" bs0:offset="0" bs0:length="$resyncMarkerLength" 
                    name="nextResyncMarker" type="xsd:integer"/>
                    </xsd:appinfo></xsd:annotation>
                    </xsd:element>   -->     <!-- TODO: VP-based streams -->
            </xsd:sequence>
            
            <xsd:element name="next_start_code_bit" type="test:b1"/>
            <xsd:element name="next_start_code_others" type="bs1:align8"/>
        
        </xsd:sequence>
    </xsd:group>
    
    <xsd:group name="VOPData">
        <xsd:sequence>
            <!--            <xsd:sequence bs2:if="$test:newpred_enable = 1">    REGARDER DE PLUS PRES
                <xsd:element name="vop_id" type="VOPidType"/>
                <xsd:element name="vop_id_for_prediction_indication" type="test:b1" bs0:variable="true"/>
                <xsd:sequence bs2:if="$test:vop_id_for_prediction_indication = 1">
                <xsd:element name="vop_id_for_prediction" type="VOPidType"/>
                <xsd:element name="marker_bit14" type="test:b1"/>
                </xsd:sequence>
                </xsd:sequence>-->
            <xsd:element name="vop_rounding_type" type="test:b1" bs2:if="$test:video_object_layer_shape != &binaryOnly; and ($test:vop_coding_type = &pVOP; or ($test:vop_coding_type = &sVOP; and $test:sprite_enable = &GMC;))"/>
            <xsd:element name="vop_reduced_resolution" type="test:b1" bs2:if="$reduced_resolution_vop_enable = 1 and $test:video_object_layer_shape = &rectangular; and ($test:vop_coding_type = &pVOP; or $test:vop_coding_type = &iVOP;)"/>
            <!--<xsd:sequence bs2:if="$test:video_object_layer_shape != &rectangular;">
                ignoring non rectangular bitstreams for now
                </xsd:sequence>-->
            <xsd:choice>
                <xsd:group ref="NonBinaryVOPData" bs2:if="$test:video_object_layer_shape != &binaryOnly;"/>
                <!--<xsd:group ref="BinaryVOPData" bs2:if="$test:video_object_layer_shape = &binaryOnly;"/>--> <!-- ignoring binary shape bitstreams for now -->
            </xsd:choice>
            <!--<xsd:element name="next_start_code1" type="test:align8"/>--><!--Not needed now that this is only the header--> 
        </xsd:sequence>
    </xsd:group>
    
    <xsd:group name="NonBinaryVOPData">
        <xsd:sequence>
            <!--<xsd:sequence bs2:if="$test:complexity_estimation_disable = 0">
                <xsd:element name="read_vop_complexity_estimation_header" type="ReadVOPComplexityEstimationHeader"/>
                </xsd:sequence>-->
            <xsd:element name="intra_dc_vlc_thr" type="test:b3" bs0:variable="true" />
            <xsd:sequence bs2:if="$test:interlaced = 1">
                <xsd:element name="top_field_first" type="test:b1"/>
                <xsd:element name="alternate_vertical_scan_flag" type="test:b1"/>
            </xsd:sequence>
            <!--<xsd:sequence  bs2:if="$test:vop_coding_type = &sVOP; and ($test:sprite_enable = &static; or $test:sprite_enable = &GMC;)">
                ignoring sprite bitstreams for now 
                </xsd:sequence> -->
            
                <xsd:sequence bs2:if="$test:video_object_layer_shape != &binaryOnly;">
                    
                    <xsd:element name="vop_quant" type="VOPQuantType"  >
                           <xsd:annotation><xsd:appinfo>
                                <bs2x:variable name="resyncMarkerLength" value="17"/>
                            </xsd:appinfo></xsd:annotation>
                    </xsd:element>
            
            <!-- <xsd:sequence bs2:if="$test:video_object_layer_shape = &grayscale;">
                ignoring grayscale bitstreams for now
                </xsd:sequence> -->
            
                <xsd:element name="vop_fcode_forward" type="test:b3"  bs2:if="$test:vop_coding_type != &iVOP;" bs0:variable="true">
                    <xsd:annotation>  <xsd:appinfo>
                        <bs2x:variable name="resyncMarkerLength" value="./text() + 16"/>
                    </xsd:appinfo>  </xsd:annotation>
                </xsd:element>
                
                <xsd:element name="vop_fcode_backward" bs2:if="$test:vop_coding_type = &bVOP;" type="test:b3">
                        <xsd:annotation>  <xsd:appinfo>
                            <bs2x:variable name="resyncMarkerLength" value="max($resyncMarkerLength, 18)"/>
                        </xsd:appinfo>  </xsd:annotation>
                </xsd:element>
            
                <xsd:group ref="NonScalableVOPData" bs2:if="$test:scalability = 0" />
                 

                    
            </xsd:sequence>
        </xsd:sequence>
    </xsd:group>
    
    <xsd:group name="NonScalableVOPData">
        <xsd:sequence>
            <xsd:element name="vop_shape_coding_type" type="test:b1" bs2:if="$test:video_object_layer_shape != &rectangular; and $test:vop_coding_type != &iVOP;"  />
            <!-- ISO/IEC 14496-2 has VP & MotionShape texture in here, but I want to separate them from the VOP header. -->
        </xsd:sequence>
    </xsd:group>
    
    <!-- ***************************************************** -->
    <!--  6.2.5.3   (a)   Motion Shape Texture                                   -->
    <!-- ***************************************************** -->
    <xsd:group name="MotionShapeTexture">
        <xsd:choice>
            <!-- <xsd:element name="unsupportedBitstream07" type="xsd:base64Binary" bs2:if="$test:data_partitioned = 1"/>-->
            <xsd:group ref="CombinedMotionShapeTexture"/>
        </xsd:choice>
    </xsd:group>
    
    <!-- ***************************************************** -->
    <!--  6.2.5.3    (b)    Combined Motion Shape Texture               -->
    <!-- ***************************************************** -->
    <xsd:group name="CombinedMotionShapeTexture">
        <xsd:sequence>
            <xsd:group ref="MB" bs2:nOccurs="396">
                <!-- bs2:ifNext="000002 FFFFFF" bs2:if="$nextResyncMarker != 1" or validstuffingbits = 0 -->
                <!--        <xsd:annotation>
                    <xsd:appinfo>
                    <bs0:readAhead bs2:unit="bit" bs2x:offset="0" bs2x:length="$resyncMarkerLength" name="nextResyncMarker"
                    type="xsd:integer"/>
                    </xsd:appinfo>
                    </xsd:annotation>-->
            </xsd:group>
        </xsd:sequence>
    </xsd:group>
    
    <!-- ******************************************* --> 
    <!-- 6.2.6    MacroBlock                                      -->    
    <!-- ******************************************* -->    
    <xsd:group name="MB">
        <xsd:sequence>   
            
            <xsd:element name="not_coded" type="test:b1" bs2:if="$test:vop_coding_type = 1" /> <!-- P pictures -->
            
            <xsd:element name="mcbpc" type ="vlc" bs0:variable="true" bs2:if="$test:vop_coding_type=0" rvc:port="mcbpc"> 
                <xsd:annotation> <xsd:appinfo>
                    <bs2x:variable name = "cbpc" value = "bitand(rshift (./text(),4), 3)" />
                    <bs2x:variable name = "mb_type" value = "bitand(./text(),7)" />
                </xsd:appinfo></xsd:annotation>                
            </xsd:element>
            
            <xsd:element name="mcbpc_inter" type ="vlc" bs2:if="$test:vop_coding_type = 1" bs0:variable="true" rvc:port="mcbpc_inter">
                <xsd:annotation> <xsd:appinfo>
                    <bs2x:variable name = "cbpc" value = "bitand(rshift (./text(),4), 3)" />
                    <bs2x:variable name = "mb_type" value = "bitand(./text(),7)" />
                </xsd:appinfo></xsd:annotation>                
            </xsd:element>
            
            <xsd:element name="ac_pred_flag" type = "test:b1" bs2:if="$test:mb_type=3 or $test:mb_type=4"/> 
            
            <xsd:element name="cbpy" type = "vlc" bs0:variable="true" rvc:port="cbpy"/>
            
            <xsd:group ref="motion_vector" bs2:nOccurs="4" bs2:if="$test:mb_type=2"/>
            <xsd:group ref="motion_vector" bs2:if="$test:mb_type=0"/>
            
            <xsd:group ref="INTRA_blocks" bs2:if="$test:mb_type=3 or $test:mb_type=4"/>
            <xsd:group ref="INTER_blocks" bs2:if="$test:mb_type=2 or $test:mb_type=0"/>
            
        </xsd:sequence>
    </xsd:group>   
    
    
    <!-- ******************************************* --> 
    <!--   6.2.6.1 MB Binary Shape Coding            -->    
    <!-- ******************************************* -->
    
    <!-- NOT NECESSARY IN MPEG-4 SP  -->
    
    
    <!-- ******************************************* --> 
    <!-- 6.2.6.2 Motion vector                                   -->    
    <!-- ******************************************* -->    
    <xsd:group name="motion_vector">
        <xsd:sequence>
            <xsd:element name="horizontal_mv_data" type="vlc" bs0:variable="true" rvc:port="mv"/>        
            <!--<xsd:element name="horizontal_mv_residual" type="MVForwardResidualType" bs2:if="$test:vop_fcode_forward !=1 and $test:horizontal_mv_data !=0"/>  TO BE CONTINUED-->
            <xsd:element name="vertical_mv_data" type="vlc" bs0:variable="true" rvc:port="mv"/>
            <!--<xsd:element name="vertical_mv_residual" type="MVForwardResidualType" bs2:if="$test:vop_fcode_forward !=1 and $test:vertical_mv_data !=0"/> TO BE CONTINUED -->
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- ******************************************* --> 
    <!--   6.2.6.3 Interlaced Information                               -->    
    <!-- ******************************************* -->    
    
    <!-- NOT NECESSARY IN MPEG-4 SP  -->
    
    
    <!-- ******************************************* --> 
    <!--   6.2.7    Block                                                -->    
    <!-- ******************************************* -->    
    
    <!-- INTER BLOCKS declaration         -->
    <!-- ******************************************* -->
    
    
    <xsd:group name="INTER_blocks">
        <xsd:sequence>
            
            <!-- Y1 -->          
            <!--<xsd:element name="pafpafpaf" type="test:b15" rvc:port="pafpafpaf"/>-->            <!--TEST-->
            <xsd:element name="DCTCoefficient_L1_er" bs2:if="bitand($test:cbpy,8) = 0" type="vlc" rvc:port="coeff_inter"/>
            
            <!-- Y2 -->
            <xsd:element name="DCTCoefficient_L2_er" bs2:if="bitand($test:cbpy,4) = 0" type="vlc" rvc:port="coeff_inter"/>
            
            <!-- Y3 -->
            <xsd:element name="DCTCoefficient_L3_er" bs2:if="bitand($test:cbpy,2) = 0" type="vlc" rvc:port="coeff_inter"/>
            
            <!-- Y4 -->
            <xsd:element name="DCTCoefficient_L4_er" bs2:if="bitand($test:cbpy,1) = 0" type="vlc" rvc:port="coeff_inter"/>
            
            <!-- U1 -->
            <xsd:element name="DCTCoefficient_C1_er" bs2:if="$test:cbpc = 3 or $test:cbpc = 2" type="vlc" rvc:port="coeff_inter"/>
            
            <!-- V1-->
            <xsd:element name="DCTCoefficient_C2_er" bs2:if="$test:cbpc = 3 or $test:cbpc = 1" type="vlc" rvc:port="coeff_inter"/>
            
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- ******************************************* -->
    <!-- INTRA BLOCKS declaration         -->
    <!-- ******************************************* -->
    
    <xsd:group name="INTRA_blocks">
        <xsd:sequence>
            
            <!-- Y1 -->
            <xsd:group ref="Luma_Block" bs2:if="bitand($test:cbpy,8) = 8"/>
            <xsd:group ref="Not_Coded_Luma_Block" bs2:if="bitand($test:cbpy,8) = 0"/>
            
            <!-- Y2 -->
            <xsd:group ref="Luma_Block" bs2:if="bitand($test:cbpy,4) = 4"/>
            <xsd:group ref="Not_Coded_Luma_Block" bs2:if="bitand($test:cbpy,4) = 0"/>
            
            <!-- Y3 -->
            <xsd:group ref="Luma_Block" bs2:if="bitand($test:cbpy,2) = 2"/>
            <xsd:group ref="Not_Coded_Luma_Block" bs2:if="bitand($test:cbpy,2) = 0"/>
            
            <!-- Y4 -->
            <xsd:group ref="Luma_Block" bs2:if="bitand($test:cbpy,1) = 1"/>
            <xsd:group ref="Not_Coded_Luma_Block" bs2:if="bitand($test:cbpy,1) = 0"/>
            
            <!-- U1 -->
            <xsd:group ref="Chroma_Block" bs2:if="$test:cbpc = 3 or $test:cbpc = 2"/>
            <xsd:group ref="Not_Coded_Chroma_Block" bs2:if="$test:cbpc = 1 or $test:cbpc = 0" />
            
            <!-- V1-->
            <xsd:group ref="Chroma_Block" bs2:if="$test:cbpc = 3 or $test:cbpc = 1"/>
            <xsd:group ref="Not_Coded_Chroma_Block" bs2:if="$test:cbpc = 2 or $test:cbpc = 0" />  
            
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- Luma Block declaration                             -->    
    <!-- ******************************************* -->    
    <xsd:group name="Luma_Block">
        <xsd:sequence>
            <xsd:element name="dct_dc_size_L" type="vlc" bs0:variable="true" rvc:port="size_L" />
            <xsd:element name="dct_dc_differential_L" type="vlc"  bs2:if="$test:dct_dc_size_L != 0" rvc:port="diff" />
            <xsd:element name="marker_bit_lumablock" type="test:b1" bs2:if ="$test:dct_dc_size_L &gt; 8"/>
            <xsd:element name="DCTCoefficient_L" type="vlc" rvc:port="coeff"/>
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- Chroma Block declaration                         -->    
    <!-- ******************************************* -->    
    <xsd:group name="Chroma_Block">
        <xsd:sequence>
            <xsd:element name="dct_dc_size_C" type="vlc" bs0:variable="true" rvc:port="size_C" />
            <xsd:element name="dct_dc_differential_C" type="vlc"  bs2:if="$test:dct_dc_size_C != 0" rvc:port="diff" />
            <xsd:element name="marker_bit_chromablock" type="test:b1" bs2:if ="$test:dct_dc_size_C &gt; 8"/>
            <xsd:element name="DCTCoefficient_C" type="vlc" rvc:port="coeff"/>               
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- Not coded Chroma Block                           -->    
    <!-- ******************************************* -->    
    <xsd:group name="Not_Coded_Chroma_Block">
        <xsd:sequence>
            <xsd:element name="dct_dc_size_C_nc" type="vlc" bs0:variable="true" rvc:port="size_C" />
            <xsd:element name="dct_dc_differential_C_nc" type="vlc"  bs2:if="$test:dct_dc_size_C_nc != 0" rvc:port="diff" />
        </xsd:sequence>
    </xsd:group>
    
    
    <!-- Not coded Luma Block                               -->    
    <!-- ******************************************* -->    
    <xsd:group name="Not_Coded_Luma_Block">
        <xsd:sequence>
            <xsd:element name="dct_dc_size_L_nc" type="vlc" bs0:variable="true" rvc:port="size_L" />
            <xsd:element name="dct_dc_differential_L_nc" type="vlc"  bs2:if="$test:dct_dc_size_L_nc != 0" rvc:port="diff" />
        </xsd:sequence>
    </xsd:group>
    
    
    
    
    
    
    
    <!-- ******************************************* -->
    <!-- VOPTimeIncrementType                            -->
    <!-- ******************************************* -->
    <xsd:simpleType name="VOPTimeIncrementType">
        <xsd:restriction base="xsd:unsignedShort">
            <xsd:annotation><xsd:appinfo>
                <bs2:bitLength value="$vopTimeIncrementBits" />
            </xsd:appinfo></xsd:annotation>
        </xsd:restriction>
    </xsd:simpleType>
    
    <!-- ******************************************* -->
    <!-- VOPQuantType (6.2.5)                        -->
    <!-- ******************************************* -->
    <xsd:simpleType name="VOPQuantType">
        <xsd:restriction base="test:b9">
            <xsd:annotation><xsd:appinfo>
                <bs2:bitLength value="if $not_8_bit = 0 then 5 else $quant_precision end"/>
            </xsd:appinfo></xsd:annotation>
        </xsd:restriction>
    </xsd:simpleType>  
    
    
    <!-- ******************************************* -->
    <!-- SpriteType (6.2.5)                          -->
    <!-- ******************************************* -->
    <xsd:simpleType name="SpriteType">
        <xsd:union memberTypes="test:b1 test:b2">
            <xsd:annotation><xsd:appinfo>
                <bs2:ifUnion value="$volVersion = 1"/>
                <bs2:ifUnion value="true()"/>
            </xsd:appinfo></xsd:annotation>
        </xsd:union>
    </xsd:simpleType>
    
    
    
</xsd:schema>