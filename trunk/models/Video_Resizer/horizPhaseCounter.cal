/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/

// horizPhaseCounter.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

actor horizPhaseCounter (
  int COORDSZ,
  int PHASESZ,
  int EOL,
  int EOF )
  
      int(size=COORDSZ) PARAM ==> int(size=COORDSZ) TARGET,  int(size=PHASESZ) A :

  int(size=COORDSZ) height;  
  int(size=COORDSZ) outputWidth;
  int(size=PHASESZ) upsamplingFactor;
  int(size=COORDSZ) integralPhaseInit;
  int(size=PHASESZ) fractionalPhaseInit;
  int(size=PHASESZ) integralIncrement;
  int(size=PHASESZ) integralIncrementWrapped;
  int(size=PHASESZ) fractionalIncrement;
  int(size=PHASESZ) startingAddress;
 
  int(size=PHASESZ) fractionalIncrementWrapped;
  int(size=PHASESZ) wrappingPoint;

  inputWidth: action PARAM:[ p ] ==> TARGET:[ p ]
// do
 //  println("inputWidth");
   end
  
  // Height -  both input and output
  height: action PARAM:[ p ] ==> 
  do
    height := p;
    done_outer := false;
  end
  
  // Get the width of the final output image
  outputWidth: action PARAM:[ p ] ==>
  do
    outputWidth := p;
  end

  
  // Get the upsampling factor
  upsamplingFactor: action PARAM:[ p ] ==>
  do
    upsamplingFactor := p;
  end

  // Get the integral portion of the starting phase
  integralPhase: action PARAM:[ p ] ==>
  do
    integralPhaseInit := p;
  end
    
  // Get the fractional portion of the starting phase
  fractionalPhase: action PARAM:[ p ] ==>
  do
    fractionalPhaseInit := p;
  end
  
  // Get the integral portion of the phase counter increment
  integralIncrement: action PARAM:[ p ] ==>
  do
    integralIncrement := p;
    integralIncrementWrapped := p + 1;
  end
  
  // Get the fractional portion of the phase counter increment
  fractionalIncrement: action PARAM:[ p ] ==>
  do
    fractionalIncrement := p;
    fractionalIncrementWrapped := p - upsamplingFactor;
    wrappingPoint := upsamplingFactor - p;
  end
  
  startingAddress: action PARAM:[ p ] ==>
  do
    startingAddress := p;
  //  println("H sa is " + p );
  end

  bool done_inner;
  bool done_outer;
  
  int(size=COORDSZ) count;
  int(size=COORDSZ) integralPhase;
  int(size=PHASESZ) fractionalPhase;
   
   
  done_outerLoop: action ==> TARGET:[ EOF ], A:[ 0 ]
  guard done_outer
 // do
 // println("Done outer loop ");
  end
  
  next_outerLoop: action ==>
  do
    // println("Rows to go: " + height);
    done_outer      := height = 1;
    height          := height - 1;
    count           := outputWidth;
    done_inner      := false;
    integralPhase   := integralPhaseInit;
    fractionalPhase := fractionalPhaseInit;
  end
  
  done_innerLoop: action ==> TARGET:[ EOL ], A:[ 0 ]
  guard done_inner
  // do
  // println("Done inner");
  end
  
  next_innerLoop: action ==> TARGET:[ ip ], A:[ startingAddress + fp ]
  var
    int(size=COORDSZ) ip = integralPhase,
    int(size=PHASESZ) fp = fractionalPhase,
    bool rollOver = fractionalPhase >= wrappingPoint
  do
   // println("Inner target = " + ip);
    done_inner := count = 1;
    count      := count - 1;

//if height = 862 then
//  println( "X target " + ip );
//end

    fractionalPhase := fractionalPhase + if rollOver then fractionalIncrementWrapped else fractionalIncrement end;
    integralPhase   := integralPhase   + if rollOver then integralIncrementWrapped   else integralIncrement   end;
  end
  
  schedule fsm p0 :
  
    // Load the control parameters
    p0        ( inputWidth          ) --> p1;
    p1        ( height              ) --> p2;
    p2        ( outputWidth         ) --> p3;
    p3        ( upsamplingFactor    ) --> p4;
    p4        ( integralPhase       ) --> p5;
    p5        ( fractionalPhase     ) --> p6;
    p6        ( integralIncrement   ) --> p7;
    p7        ( fractionalIncrement ) --> p8;
    p8        ( startingAddress     ) --> outerLoop;
    
    // Run the phase counter
    outerLoop ( done_outerLoop      ) --> p0;
    outerLoop ( next_outerLoop      ) --> innerLoop;
    
    innerLoop ( done_innerLoop      ) --> outerLoop;
    innerLoop ( next_innerLoop      ) --> innerLoop;
  end
  
  priority
    done_outerLoop > next_outerLoop;
    done_innerLoop > next_innerLoop;
  end
  
end