/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/

// regosterControl.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

actor registerControl
  (
    int PIXSZ,
    int PHASESZ,
    int COORDSZ,
    int EOF,
    int EOL,
    int CMDSZ,
    int PRELOAD,
    int SHIFT
   )
      int(size=3*PIXSZ+1) IN, int(size=COORDSZ) TARGET, int(size=PHASESZ) AIN ==>
      int(size=3*PIXSZ) X, int(size=3*PIXSZ) OUT, int(size=CMDSZ) OCMD, int(size=PHASESZ) AOUT, bool USE, bool SOF : 

  int(size=COORDSZ) lastX;
  int(size=COORDSZ) inputX;
  int(size=COORDSZ) target;
  int(size=COORDSZ) next_target := 0;
  int(size=PHASESZ) addr := 0;
  int(size=PHASESZ) next_addr := 0;
  
  int(size=3*PIXSZ) sample := 0;
   
  bool filter;
  bool shift;
  bool read;
  bool preload;
  bool outside;
   
  // Pick off the start-of-frame bit
  int FRAME_BIT = 1 << ( 3*PIXSZ );
  function isFrameBit( p ) :
    ( p & FRAME_BIT ) != 0
  end

 // _CAL_traceOutput := true;
 
  // Start of frame setup
  sof: action IN:[ p ] ==> OUT:[ sample ], X:[ sample ], OCMD:[ PRELOAD ], AOUT:[ addr ], USE:[ false ], SOF:[ true ]
  guard isFrameBit( p )
//do
//println("SOF in registerControl");
  end
 
  ignore: action IN:[ p ] ==>
  end
  
  width: action TARGET:[ t ] ==>
  do
//println("width in registerControl");
    lastX := t;  // Note: horizPhaseCounter actually sends w-1
  end
  
  loop.done: action ==>
  guard next_target = EOF
  end

  loop.next: action TARGET:[ t ], AIN:[ a ] ==>
  do
    target := next_target;
    next_target := t;
    addr := next_addr;
    next_addr := a;
    
    // Force preload using nofilter.read
    filter := false;
    read := true;
    shift := false;
    inputX := 0;
    preload := true;
    outside := false;
// println("loop.next in registerControl - " + t );
  end
   
  eol: action ==>
  guard target = EOL
  end

  sof_read: action IN:[ p ] ==>
                          OUT:[ sample ], X:[ sample ], OCMD:[ PRELOAD ], AOUT:[ addr ], USE:[ false ], SOF:[ true ]
  guard isFrameBit( p ) and read
  end

  filter.noread: action  TARGET:[ t ], AIN:[ a ] ==>  
                OUT:[ sample ], X:[ sample ], OCMD:[ c ], AOUT:[ aout ], USE:[ true ], SOF:[ false ]
  guard
    filter and (not read)
  var
    int(size=PHASESZ) aout = addr,
    int(size=CMDSZ) c = if shift then SHIFT else 0 end
  do
    target := next_target;
    next_target := t;
    addr := next_addr;
    next_addr := a;
    
    inputX := inputX + if shift then 1 else 0 end;
    
    filter  := inputX = target;
    shift   := inputX != next_target;
    outside := outside or inputX = lastX;
    read    := shift and not outside;
  end

  filter.read: action IN:[ p ], TARGET:[ t ], AIN:[ a ] ==>  
                 OUT:[ x0 ], X:[ x0 ], OCMD:[ c ], AOUT:[ aout ], USE:[ true ], SOF:[ false ]
  guard
    filter and read
  var
    int(size=3*PIXSZ) x0 = sample,
    int(size=PHASESZ) aout = addr,
    int(size=CMDSZ) c = if shift then SHIFT else 0 end
  do
    target := next_target;
    next_target := t;
    addr := next_addr;
    next_addr := a;
    
    inputX := inputX + if shift then 1 else 0 end;
    sample := if shift then p else sample end;
    
    filter  := inputX = target;
    shift   := inputX != next_target;
    outside := outside or inputX = lastX;
    read    := shift and not outside;
  end
 
 
  nofilter.noread: action  ==>  
                OUT:[ sample ], X:[ sample ], OCMD:[ c ], AOUT:[ addr ], USE:[ false ], SOF:[ false ]
  guard
    (not filter) and (not read)
  var
    int(size=CMDSZ) c = if shift then SHIFT else 0 end
  do
    inputX := inputX + if shift then 1 else 0 end;
    
    filter  := inputX = target;
    shift   := inputX != next_target;
    outside := outside or inputX = lastX;
    read    := shift and not outside;
  end

  nofilter.read: action IN:[ p ] ==>  
                 OUT:[ x0 ], X:[ x0 ], OCMD:[ c ], AOUT:[ addr ], USE:[ false ], SOF:[ false ]
  guard
    (not filter) and read
  var
    int(size=3*PIXSZ) x0 = if preload then p else sample end,
    int(size=CMDSZ) c = if preload then PRELOAD else if shift then SHIFT else 0 end end
  do
//println("nofilter.read in registerControl");
    inputX := inputX + if shift then 1 else 0 end;
    sample := if shift or preload then p else sample end;
    
    preload := false;
    
    filter  := inputX = target;
    shift   := inputX != next_target;
    outside := outside or inputX = lastX;
    read    := shift and not outside;
  end
  
  schedule fsm start :
  
    // Wait for a start-of-frame indication
    start     ( sof          ) --> width;
    start     ( ignore       ) --> start;
    
    width     ( width        ) --> prefetch;
    
    prefetch  ( loop.next    ) --> loop;
    
    loop      ( loop.done    ) --> start;
    loop      ( loop.next    ) --> row;

    row       ( eol          ) --> loop;
    row       ( sof_read     ) --> drain;
    row       ( filter       ) --> row;
    row       ( nofilter     ) --> row;
    
    // Drain CMD port after premature sof
    drain     ( loop.done   ) --> width;
    drain     ( loop.next   ) --> drain;
  end

  priority
    sof > ignore;
    
    loop.done > loop.next;
    
    //sof > preload;
    
    eol > sof_read;
    eol > filter;
    eol > nofilter;
    
    sof_read > nofilter.read;
    sof_read > filter.read;
  end
end