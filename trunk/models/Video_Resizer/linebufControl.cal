/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/

// linebufControl.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

actor linebufControl
  (
    int PIXSZ,
    int PHASESZ, 
    int COORDSZ,
    int CMDSZ,
    int PRELOAD,
    int SHIFT,
    int EOL,
    int REPLICATE
   )
      int(size=2*PIXSZ+1) IN, int(size=COORDSZ) TARGET, int(size=PHASESZ) AIN ==>
      int(size=2*PIXSZ) OUT, int(size=CMDSZ) CMD, int(size=PHASESZ) AOUT, bool USE, bool SOF : 

  int(size=COORDSZ) lastX;
  int(size=COORDSZ) inputHeight;
  int(size=COORDSZ) x;
  int(size=COORDSZ) y;

  int(size=PHASESZ) addr := 0;
  int(size=CMDSZ)   cmd;
  int(size=COORDSZ) target;
  bool filter;
  bool read;
  bool eol;
  bool eof;
   
  // Pick off the start-of-frame bit
  int FRAME_BIT = 1 << (2 * PIXSZ);
  function isFrameBit( p ) :
    ( p & FRAME_BIT ) != 0
  end
  
  // Start of frame - send a dummy command so that x gets reset in linebuf
  sof: action IN:[ p ] ==> OUT:[ p ], CMD:[ EOL ], AOUT:[ 0 ], USE:[ false ], SOF:[ true ]
  guard isFrameBit( p )
  end
 
  ignore: action IN:[ p ] ==>
  end
  
  // Get the frame parameters
  p1: action TARGET:[ p ] ==>
  do
    lastX := p; // Note: vertPhaseCOunter actually sends w-1
  end

  p2: action TARGET:[ p ] ==>
  do
    inputHeight := p;
    x := 0;
    y := 0;
    cmd := PRELOAD;
    filter := false;
    read := true;
    eol := false;
  end
   
  no_read: action ==>
  guard not filter
  end

  target.done: action TARGET:[ t ], AIN:[ a ] ==>
  guard t < 0
  end

  // Only fetch a new target if we filtered on the last iteration  
  target.next: action TARGET:[ t ], AIN:[ a ] ==>
  do
    addr := a;
    target := t;
  end
  
  update: action ==>
  var
    int(size=COORDSZ) next = y + 1,
    bool last     = (next = inputHeight),
    bool outside  = (y >= inputHeight),
    bool adjacent = (next = target),
    bool lag      = (y < target),
    bool shift    = lag // and (not outside)
  do
    filter := adjacent or (not lag);
    read   := lag and (not last) and (not outside);
    cmd := if shift then SHIFT else 0 end +
           if (shift and not read) or not ( read or shift or filter ) then REPLICATE else 0 end;
 
    // println( "Line " + y + "(target "+target+"), FILTER = "+filter+", SHIFT = "+shift+", READ = " + read + ", REPLICATE = "+((shift and not read) or not ( read or shift or filter )));

    x := 0;    
    y := if lag then next else y end;
    eol := false;
  end

  pixel.done: action ==>
  guard eol
  end
  
  pixel.no_read: action ==> OUT:[ 0 ], 
                            CMD:[ bitor( cmd, if eol then EOL else 0 end ) ],
                            AOUT:[ addr ],
                            USE:[ filter ], SOF:[ false ]
  guard not read
  do
    eol := (x = lastX);
    x := x + 1;
  end

  pixel.read: action IN:[ p ] ==> OUT:[ p ], 
                                  CMD:[ bitor( cmd, if eol then EOL else 0 end ) ],
                                  AOUT:[ addr ],
                                  USE:[ filter ], SOF:[ false ]
  do
    eol := (x = lastX);
    x := x + 1;
  end
    
  schedule fsm start :
  
    // Wait for a start-of-frame indication
    start     ( sof           ) --> p1;
    start     ( ignore        ) --> start;

    // Get the image parameters
    p1        ( p1            ) --> p2;
    p2        ( p2            ) --> p3;
    p3        ( target.next   ) --> pixel;
    
    target    ( target.done   ) --> start;
    target    ( target.next   ) --> update;
    target    ( no_read       ) --> update;
    
    update    ( update        ) --> pixel;

    pixel     ( pixel.done    ) --> target;
    pixel     ( pixel.read    ) --> pixel;
    pixel     ( pixel.no_read ) --> pixel;
    pixel     ( sof           ) --> drain;
    
    drain     ( target.done   ) --> p1;
    drain     ( target.next   ) --> drain;
    
  end

  priority
    sof > ignore;
    no_read > target;
    pixel.done > pixel.no_read > sof > pixel.read;
  end
end