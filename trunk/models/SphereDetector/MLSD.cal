

actor MLSD (N, R, O) Y ==> S :

	L = #O;

	y := null;
	bestS := [0 : for i in 1 .. N];
	s := [0 : for i in 1 .. N];
	bestT := -1;
	T := [0 : for i in 1 .. N];

	level := 0;


	Start:
		action Y: [nextY] ==> 
		do
			y := nextY;
			level := N;
			s[N - 1] := 0;
			bestT := 10000;
		end
		
	Do.Down:
		action ==>
		guard if level > 0 and level <= N then s[level - 1] < L else false end
		do
//			println("Down Level: " + level);
			computePartialError(level);
			level := level - 1;
			if level > 0 then
				s [level - 1] := 0;
			end
		end

	Do.Up:
		action ==>
		guard if level > 0 and level <= N then s[level - 1] >= L else false end
		do
//			println("Up Level: " + level);
			level := level + 1;
			if level <= N then 
				s [level - 1] := s[level - 1] + 1;
			end
		end
	
	Do.Select:
		action ==>
		guard level <= 0
		do
//			println("Select: " + s + ", Y: " + y + ", T = " + T[0]);
			if T[0] < bestT then
//				println("Chose new best result: " + s + ", Y: " + y + ", T = " + T[0]);
				bestS := [a : for a in s];
				bestT := T[0];
			end

			level := level + 1;
			s [level - 1] := s[level - 1] + 1;
		end
		
	Done:
		action ==> S: [ [O[si] : for si in bestS] ]
		guard level > N
		end
		
	procedure computePartialError (lv)
	var n := lv - 1,
	    sum := if lv < N then T[lv] else 0 end,
	    row = R[lv - 1]
	begin
		while n < N do
			sum := sum + (row[n] * O[s[n]]);
			n := n + 1;
		end
		T [lv - 1] := square(y[lv - 1] - sum);
	end
	
	function square (x) : x * x end

	schedule fsm Initial: 
		Initial (Start) --> Running;
		Running (Do) --> Running;
		Running (Done) --> Initial;
	end
end
