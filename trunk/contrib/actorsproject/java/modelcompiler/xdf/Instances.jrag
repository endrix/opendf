/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

import java.util.HashSet;
import java.util.LinkedList;
import java.io.File; 
import java.io.FileNotFoundException; 
import java.io.PrintStream; 
import xlimAST.actor_port;

aspect Instances {
	syn LinkedList<Instance> ASTNode.getInstances(LinkedList<Instance> inst) = inst;
	eq Start.getInstances(LinkedList<Instance> inst) = getSpecification().getInstances(inst);
	eq Specification.getInstances(LinkedList<Instance> inst) {
		for (Element e : getElements()) {
			inst = e.getInstances(inst);
		}
		return inst;
	}
	eq XDF.getInstances(LinkedList<Instance> inst) {
		for (Element e : getElements()) {
			inst = e.getInstances(inst);
		}
		return inst;
	}
	eq Instance.getInstances(LinkedList<Instance> inst) {
		inst.add(this);
		return inst;
	}

	syn Instance XDF.getInstance(int index) {
		for (Instance i : getInstances(new LinkedList<Instance>())) {
			if (i.getIndex() == index) {
				return i;
			}
		}
		return null;
	}
}

aspect Misc {
	syn HashSet<xlimAST.actor_port> ASTNode.getPorts(HashSet<xlimAST.actor_port> inst) = inst;
	eq Start.getPorts(HashSet<xlimAST.actor_port> inst) {
		Specification sp = getSpecification();
		if (sp != null) {
			return sp.getPorts(inst);
		}
		return inst;
	}
	eq Specification.getPorts(HashSet<xlimAST.actor_port> inst) {
		for (Element e : getElements()) {
			inst = e.getPorts(inst);
		}
		return inst;
	}
	eq XDF.getPorts(HashSet<xlimAST.actor_port> inst) {
		for (Element e : getElements()) {
			inst = e.getPorts(inst);
		}
		return inst;
	}
	eq Instance.getPorts(HashSet<xlimAST.actor_port> inst) {
		inst.addAll(getPorts());
		return inst;
	}
	// eq Port.getPorts(HashSet<xlimAST.actor_port> inst) {
	// 	inst.add(this);
	// 	return inst;
	// }
	public HashSet<xlimAST.actor_port>  Instance.getPorts() {
		HashSet<xlimAST.actor_port> set = new HashSet<xlimAST.actor_port>();
		return xlimInstance().getPorts(set);
	}

	public HashSet<xlimAST.actor_port>  Instance.getPorts(String directory) {
		HashSet<xlimAST.actor_port> set = new HashSet<xlimAST.actor_port>();
		return xlimInstance(directory).getPorts(set);
	}

	// public LinkedList<Object> Instance.getActionList() {
	//   return xlimInstance().getActionList();
	// }
	// Replaced with getPhases() in xlim.

	syn boolean Port.isInputPort() = kind().equals("Input");
	syn boolean Port.isOutputPort() = kind().equals("Output");

	syn LinkedList<Connection> ASTNode.getConnections(LinkedList<Connection> set) = set;
	eq Start.getConnections(LinkedList<Connection> set) = getSpecification().getConnections(set);
	eq XDF.getConnections(LinkedList<Connection> set) {		
		for (Element e : getElements()) {
			set = e.getConnections(set);
		}
		return set;
	}
	eq Specification.getConnections(LinkedList<Connection> set) {
	  for (Element e : getElements()) {
	    set = e.getConnections(set);
	  }
	  return set;
	}
	eq Connection.getConnections(LinkedList<Connection> set) {
		set.add(this);
		return set;
	}

	public LinkedList<Connection> XDF.getConnections() {
		return getConnections(new LinkedList<Connection>());
	}

	public LinkedList<Instance> XDF.getInstances() {
		return getInstances(new LinkedList<Instance>());
	}
	
//	public HashSet<Connection> Start.getConnections(HashSet<Connection> set) {
//	  return getSpecification().getConnections(set);
//	}

	int Instance.index; // Each actor in a network needs to have a
						// unique index used in the schedule
	public int Instance.getIndex() {return index;}
	public void Instance.setIndex(int index) {this.index = index;}

	int Connection.bufSize; // If both connected actors are CSDF,
							// bufSize states the minimum size of the
							// internal buffer to avoid deadlock. For
							// other types of actors it can be used as
							// a design parameter to the runtime
							// system.
	public int Connection.getBufSize() {return bufSize;}
	public void Connection.setBufSize(int bufSize) {this.bufSize = bufSize;}

	
	public Attribute.Attribute(String value) {this(new AttrValue(unfix(value)));}
	public _kind._kind(String value) {this(new AttrValue(unfix(value)));}
	public _name._name(String value) {this(new AttrValue(unfix(value)));}


	public String Instance.className() {
		for (Element e : getElements()) {
			if (e instanceof Class) {
				return ((Class) e).name();
			}
		}
		return "";
	}

	syn Connection ASTNode.connection() = null;
	eq Port.connection() {
		// System.out.println("  "+name()+" "+kind());
		return getParent().connection(null,name());
	}

	syn Connection ASTNode.connection(String actor, String port) = 
		getParent().connection(actor,port);
	eq Port.connection(String actor, String port) = 
		getParent().connection(null,name());
	eq Actor.connection(String actor, String port) = 
		getParent().connection(actor,port);
	eq Instance.connection(String actor, String port) = 
		getParent().connection(name(),port);
	eq XDF.connection(String actor, String port) {
		// System.out.println("Looking for "+actor+":"+port);
		for (Connection c : getConnections()) {			
			// System.out.println("   Checking "+c.getDestination()+":"+
			// 				   c.getDestinationPort());
			// System.out.println("   Checking "+c.getSrc()+":"+c.getSourcePort());
			if (c.getDestination().equals(actor) && 
				c.getDestinationPort().equals(port) ||
				c.getSrc().equals(actor) && 
				c.getSourcePort().equals(port)) {
				// System.out.println("    Found it!");
				return c;
			}
		}
		return null;
	}

	syn int Port.bufSize() = connection().getBufSize();


	public HashSet<Port> ASTNode.ports(HashSet<Port> hs) { return hs; }
	public HashSet<Port> Start.ports(HashSet<Port> hs) { 
		return getSpecification().ports(hs); 
	}
	public HashSet<Port> Specification.ports(HashSet<Port> hs) { 
		for (Element e : getElements()) {
			e.ports(hs);
			// System.out.println(e.name()+":"+hs.size());
		}
		return hs;
	}
	public HashSet<Port> ComplexElement.ports(HashSet<Port> hs) {
		for (Element e : getElements()) {
			e.ports(hs);
		}
		// System.out.println(name()+":"+hs.size());
		return hs;
	} 
	public HashSet<Port> Instance.ports(HashSet<Port> hs) {
		// System.out.println("Checking XDF.Instance");
		HashSet<Port> ports = super.ports(new HashSet<Port>());
		if (ports.isEmpty()) {
			// Actors without ports are pretty rare, so the possibly
			// unnecessary work done here should be justified.
			// System.out.println("No ports in XDF.Actor");
			// HashSet<actor_port> actorPorts = getPorts(new HashSet<actor_port>());
			// for (actor_port ap : actorPorts) {

			
			for (Connection c : root().getConnections()) {
				TmpPort p = new TmpPort();
				if (c.getSource() == this) {
					p.addAttribute(new _kind("Output"));
					p.addAttribute(new _name(c.getSourcePort()));
					p.addElement(new Type(new List<Attribute>().add(new _name("int")),new List<Element>()));
					addElement(p);
					hs.add(p);
				} else if (c.getDest() == this) {
					p.addAttribute(new _kind("Input"));
					p.addAttribute(new _name(c.getDestinationPort()));
					p.addElement(new Type(new List<Attribute>().add(new _name("int")),new List<Element>()));
					addElement(p);
					hs.add(p);
				}

			}
		} else {
			hs.addAll(ports);
		}
		return hs;
	}
	public HashSet<Port> Port.ports(HashSet<Port> hs) {
		// System.out.println("** "+name());
		hs.add(this);
		return hs;
	}


}

aspect KarlErik {

	public Note ComplexElement.getMCNote() {
		for (Element e: getElements()) {
			if (e.kind().equals("MC")) {
				return (Note)e;
			}
		}
		return null;
	}

	public void ComplexElement.setMCNote(Note note) {
		addChild(note);
	}

	public HashSet<Port> Instance.getInports(HashSet<Port> hs) {
		HashSet<Port> ports = ports(new HashSet<Port>());
		// System.out.println(ports.size());
		for (Port p : ports) {
			if (p.isInputPort()) {
				hs.add(p);
			}
		}
		return hs;
	}

	public HashSet<Port> Instance.getOutports(HashSet<Port> hs ) {
		HashSet<Port> ports = ports(new HashSet<Port>());
		// System.out.println(ports.size());
		for (Port p : ports) {
			// System.out.print("Check for out: ");
			if (p.isOutputPort()) {
				hs.add(p);
			}
		}
		return hs;
		// for (Element e: getElements()) {
		// 	if(e instanceof Actor) {
		// 		Actor act = (Actor)e;
		// 		for (Element f: act.getElements()) {
		// 			if (f instanceof Port) {
		// 				Port p = (Port)f;
		// 				//	    System.out.println("Kind = " + p.kind());
		// 				//	    if (p.kind().equals("Output")) {
		// 				for (Attribute a: p.getAttributes()) {
		// 					// System.out.println("isKind " + a.isKind() + " literal " + a.getAttrValue().getLITERAL());
		// 					if ((a.isKind()) && (a.getAttrValue().getLITERAL().equals("\"Output\""))) {
		// 						hs.add(p);
		// 					}
		// 				}
		// 			}
		// 		}
		// 	}
		// }
		// return hs;
	}

	public HashSet<Parameter> Instance.getParameters(HashSet<Parameter> hs) {
		for (Element e: getElements()) {
			if (e instanceof Parameter) {
				Parameter par = (Parameter)e;
				hs.add(par);
			}
		}
		return hs;
	}

	public String Parameter.getName() {
		for (Attribute a: getAttributes()) {
			if (a instanceof _name) {
				return a.getAttrValue().getLITERAL();
			}
		}
		return "";
	}

	public String Parameter.getValue() {
		for (Element e: getElements()) {
			if (e instanceof Expr) {
				Expr exp = (Expr)e;
				for (Attribute a: exp.getAttributes()) {
					if (a instanceof _value) {
						return a.getAttrValue().getLITERAL();
					}
				}
			}
		}
		return "";
	}

	public void Parameter.setValue(String val) {
		for (Element e: getElements()) {
			if (e instanceof Expr) {
				Expr exp = (Expr)e;
				for (Attribute a: exp.getAttributes()) {
					if (a instanceof _value) {
						a.getAttrValue().setLITERAL(val);
					}
				}
			}
		}
	}


	public String Connection.getSourcePort() {
		for (Attribute a: getAttributes()) {
			if (a instanceof src_port) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	public String Connection.getDestinationPort() {
		for (Attribute a: getAttributes()) {
			if (a instanceof dst_port) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	public String Connection.getSrc() {
		for (Attribute a: getAttributes()) {
			if (a instanceof src) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	public String Connection.getDestination() {
		for (Attribute a: getAttributes()) {
			if (a instanceof dst) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	public String Port.getName() {
		for (Attribute a: getAttributes()) {
			if (a instanceof _name) {
				return a.getAttrValue().getLITERAL();
			}
		}
		return "";
	}

	public String Class.getName() {
		for (Attribute a: getAttributes()) {
			if (a instanceof _name) {
				return a.getAttrValue().getLITERAL();
			}
		}
		return "";
	}

	public String XDF.getName() {
		for (Attribute a: getAttributes()) {
			if (a instanceof _name) {
				return a.getAttrValue().getLITERAL();
			}
		}
		return "";
	}

	public String Instance.getId() {
		for (Attribute a: getAttributes()) {
			if (a instanceof id) {
				return a.getAttrValue().getLITERAL();
			}
		}
		return "";
	}


}

aspect XlimInstance {
	syn xlimAST.Start ASTNode.getXlimInstance(String name) = null; 
	eq Start.getXlimInstance(String name) = getSpecification().getXlimInstance(name);
	eq Specification.getXlimInstance(String name) = getElement(0).getXlimInstance(name);
	eq XDF.getXlimInstance(String name) {
		for (Instance i : getInstances()) {
			System.out.println("  Comparing: "+i.name()+" "+name);
			if (i.name().equals(name)) {
				// System.out.println("    Found");
				return i.xlimInstance();
			}
		}
		return null;
	}
}

