/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

import java.util.AbstractCollection;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.io.File; 
import java.io.FileNotFoundException; 
import java.io.PrintStream; 

aspect MergeActors {
	public void Start.mergeActors(String name, int[] schedule) {
		getSpecification().mergeActors(name,schedule);
		// Q&D, generate build script to compile/link merged network
		File script = new File(cwd+"build.sh");
		script.setExecutable(true,false); // a+x
		try {
			PrintStream sStream = new PrintStream(script);
			sStream.print(genBuild());
			sStream.close();
		} catch (FileNotFoundException e) {
			System.out.println("Could not print script to file");
		}
		System.out.println(genBuild());
	}

	public void Specification.mergeActors(String name, int[] schedule) {
		for (Element e : getElements()) {
			e.mergeActors(name,schedule);
		}
	}

	public void Element.mergeActors(String name, int[] schedule) {
	}

	public void ComplexElement.mergeActors(String name, int[] schedule) {
		for (Element e : getElements()) {
			e.mergeActors(name,schedule);
		}
	}

	public void XDF.mergeActors(String name, int[] sched) {
		ArrayList<Integer> schedule = new ArrayList<Integer>();
		for (int i=0; i<sched.length; i++) {
			schedule.add(sched[i]);
		}
		Instance mergeInstance = new Instance(new List<Attribute>(),new List<Element>());
		addElement(mergeInstance);
		mergeInstance.isMerged(true);
		mergeInstance.addAttribute(new id(new AttrValue(unfix(name))));
		// UID
		Note uid = new Note(new List<Attribute>(), new List<Element>());
		uid.addAttribute(new _kind(new AttrValue(unfix("UID"))));
		uid.addAttribute(new _value(new AttrValue(unfix(name))));
		mergeInstance.addElement(uid);
		// instanceHierarchy
		Note hier = new Note(new List<Attribute>(), new List<Element>());
		hier.addAttribute(new _kind(new AttrValue(unfix("instanceHierarchy"))));
		mergeInstance.addElement(hier);
		// Class
		Class clazz = new Class(new List<Attribute>(), new List<Element>());
		clazz.addAttribute(new _name(new AttrValue(unfix(name))));
		mergeInstance.addElement(clazz);
		// sourceLoaded
		Note source = new Note(new List<Attribute>(), new List<Element>());
		source.addAttribute(new _kind(new AttrValue(unfix("sourceLoaded"))));
		source.addAttribute(new _value(new AttrValue(unfix("true"))));
		mergeInstance.addElement(source);
		// className
		Note cName = new Note(new List<Attribute>(), new List<Element>());
		cName.addAttribute(new _kind(new AttrValue(unfix("className"))));
		cName.addAttribute(new _value(new AttrValue(unfix(name))));
		mergeInstance.addElement(cName);
		// Create merged actor instance
		int varIx = 0;
		xlimAST.Start xlimInstance = new xlimAST.Start();
		xlimInstance.init(name);

		// Remove connections between now merged actors. Replace
		// pinRead/pinWrite with accesses to circular buffer.
		for (Connection c : getConnections()) {
			System.out.println("Connection "+c.getDest().name()+
							   "("+c.getDest().getIndex()+")"+"->"
							   +c.getSource().name()+"("+c.getSource().getIndex()+")"+
							   schedule.contains(c.getDest().getIndex())+" "+ 
							   schedule.contains(c.getSource().getIndex()));
			if (schedule.contains(c.getDest().getIndex()) &&
				schedule.contains(c.getSource().getIndex())) {
				System.out.println("    Replace!");
				// Connection between two mergeable instances, replace with internal buffer
				// First, create circular buffer to use instead of FIFO
				xlimAST.Start srcXlim = c.getSource().xlimInstance();
				String typeName = srcXlim.getPort(c.getSourcePort()).typeName();
				String size = srcXlim.getPort(c.getSourcePort()).size();				
				// System.out.print(""+varIx+":"+xlimInstance.getDesign().getNumElement());
				// System.out.println(c.getBufSize());
				if (c.getBufSize() > 1) {
					// Doesn't make sense for scalar buffers
					xlimInstance.addStateVar("buf_"+varIx,c.getBufSize(),typeName,size);
					xlimInstance.addStateVar("inIx_"+varIx);
					xlimInstance.addStateVar("outIx_"+varIx);
				} else {
					xlimInstance.addStateVar("buf_"+varIx);
				}
				// System.out.println(":"+xlimInstance.getDesign().getNumElement());
				// Replace references to FIFO with internal circular
				// buffer instead.
				xlimInstance.replaceBuffer(c.getSource().xlimInstance(),
										   c.getDest().xlimInstance(),
										   c.getSourcePort(),
										   c.getDestinationPort(),
										   varIx,
										   c.getBufSize());
				varIx++;
				// xlimInstance.prettyPrint("",System.out);
				// Remove superfluous connection
				c.remove_me = true;
				c.is$Final(false);
			} else if (schedule.contains(c.getDest().getIndex())) {
				c.setDestPort(unfix(c.getDest().name()+"_"+c.dstPort()));
				c.setDest(unfix(name));
			} else if (schedule.contains(c.getSource().getIndex())) {
				c.setSourcePort(unfix(c.getSource().name()+"_"+c.srcPort()));
				c.setSource(unfix(name));
			}
		}

		// Populate instance with actions
		for (int i : schedule) {
			// System.out.println("Testing instance: "+getInstance(schedule[i]).name());
			Instance inst = getInstance(i);
			if (!inst.isMerged()) {
				// System.out.println("  Adding");
				System.out.println("Populating: "+inst.name());
				xlimInstance.populate(inst.xlimInstance(),inst.name());
				inst.isMerged(true);
				// detachFromXdf(inst);
				// getInstance(schedule[i]).disabled = true;
				// getInstance(schedule[i]).is$Final(false);
			}
		}

		// Extract (remaining) ports from merge instance and use to
		// popuplate xdf instance. Necessary for C code generation?
		HashSet<xlimAST.actor_port> xlimPorts = 
			xlimInstance.getPorts(new HashSet<xlimAST.actor_port>());
		Actor actor = new Actor(new List<Attribute>(),new List<Element>());
		mergeInstance.addElement(actor);
		actor.addAttribute(new _kind(new AttrValue(unfix(name))));
		for (xlimAST.actor_port xp : xlimPorts) {
			String pDir = xp.dir().equals("in") ? "Input" : "Output";
			Port p = new Port();
			actor.addElement(p);
			p.setAttributeList(new List<Attribute>().add(new _kind(pDir)).
							   add(new _name(xp.name())));
			// p.prettyPrint("",System.out);
			Type type = new Type();
			p.setElementList(new List<Element>().add(type));
			type.setAttributeList(new List<Attribute>().
								  add(new _name(xp.type())));
		}

		// Create new action scheduler
		HashSet<Port> mports = mergeInstance.getInports(new HashSet<Port>());
		mports = mergeInstance.getOutports(mports);
		xlimAST.module body = xlimInstance.addActionScheduler(mports);
		for (int i : schedule) {
			// body.addActionSchedule(getInstance(schedule[i]).
			// 								xlimInstance().actionScheduler());
			System.out.println("Adding action schedule for: "+
							   getInstance(i).xlimInstance().name());
			body.addActorPhase(getInstance(i).xlimInstance().
							   getPhasePrinter().printNextPhase());
		}

		// Detach superfluous instances from xdf
		for (int i : schedule) {
			detachFromXdf(getInstance(i));
		}


		// Insert XLIM instance into this XDF tree
		mergeInstance.xlimInstance(xlimInstance);
	}

	void Element.mergeActors() {}
	public void Start.mergeActors() {
		getSpecification().mergeActors();
	}
	void ComplexElement.mergeActors() {
		for (Element e : getElements()) {
			e.mergeActors();
		}
	}
	void Specification.mergeActors() {
		for (Element e : getElements()) {
			e.mergeActors();
		}
	}
	void Instance.mergeActors() {}
	void Connection.mergeActors() {
		String srcPort="",dstPort="";
		Instance src = getSource();
		Instance dst = getDest();
		if (src == null) {
			System.out.println(source()+" is null");
			return;
		}
		if (dst == null) {
			System.out.println(dest()+" is null");
			return;
		}
		if (src.isCSDF() && dst.isCSDF()) {
			System.out.println("   Found mergeable actors");
			// Check port names and perform actual actor
			// merge. Then set remove_me flag so that this
			// connection will be removed from the actor
			// network.
			srcPort = srcPort();
			dstPort = dstPort();
			System.out.println("Merging "+src.name()+":"+dst.name());
			src.isMerged(true);
			src.merge(dst,srcPort,dstPort);
			// Change all further references to the removed actor
			LinkedList<Connection> cons = root().getConnections(new LinkedList<Connection>());
			for (Connection c : cons) {
				if (dest().equals(c.source())) {
					c.setSource("\""+source()+"\"");
				}
			}
			dst.disabled = true;
			dst.is$Final(false);
			src.genFile();
			remove_me = true;
			is$Final(false);
		}
	}

	void Instance.merge(Instance inst,String srcPort, String dstPort) {
		if (isMerged()) {
			xlimInstance().merge(inst.xlimInstance(),srcPort,dstPort);
		}
	}

	void Instance.genFile() {
		if (isMerged()) {
			System.out.println("generating actor: "+name());
			try {
				if (!(xlimInstance() instanceof xlimAST.EmptyStart)) {
					xlimInstance().prettyPrint("",new PrintStream(new File(name()+".xlim")));
				}
			} catch (FileNotFoundException e) {
				System.out.println("Could not print to file: "+name());
			} 
		}
		if (disabled) {
			// remove from AST
			is$Final(false);
		}
	}

	private boolean Instance.isMerged = false;
	public void Instance.isMerged(boolean b) {
		isMerged = b;
	}
	public boolean Instance.isMerged() {
		return isMerged;
	}

	void XDF.detachFromXdf(Instance i) {
		if (i!=null) {
			List<Element> eList = getElements();
			for (int ix=0; ix<eList.getNumChild(); ix++) {
				if (i.name().equals(eList.getChild(ix).name())) {
					// System.out.print(eList.getNumChild());
					eList.setChild(new ComplexElement(),ix);
					// System.out.println(" "+eList.getNumChild());
				}
			}
		}
	}

}


aspect Rewrites {
	boolean Connection.remove_me = false;
	boolean Instance.disabled = false;
	
	rewrite Connection {
		when (remove_me) to ComplexElement {
			return new ComplexElement();
		}
	}
	rewrite Instance {
		when (disabled) to ComplexElement {
			System.out.println("Removing instance: "+name());
			return new ComplexElement();
		}
	}
}
