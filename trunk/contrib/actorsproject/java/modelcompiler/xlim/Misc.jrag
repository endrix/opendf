/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

aspect Misc {
	design ASTNode.rootNode;
	public void Start.setRoot() {
		// System.out.println("* Start.setRoot()");
		getSpecification().setRoot();
	}
	public void EmptyStart.setRoot() {}
	void Specification.setRoot() {
		// System.out.println("* Specification.setRoot()");
		getElement(0).setRoot();
	}
	void Element.setRoot(){}
	void design.setRoot() {
		// System.out.println("* design.setRoot()");
		rootNode = this;
		for (Element e : getElements()) {
			e.setRoot(this);
		}
	}
	void Element.setRoot(design root) {}
	void ComplexElement.setRoot(design root) {
		rootNode = root;
		for (Element e : getElements()) {
			e.setRoot(root);
		}
	}

	syn design ASTNode.root() = rootNode;
	eq Start.root() = getSpecification().getElement(0).root();
	eq EmptyStart.root() = null;

	// syn ASTNode ASTNode.root() {
	// 	System.out.println("root() in "+this+":"+name());
	// 	prettyPrint(" ",System.out);
	// 	return getParent().root();
	// }
	// eq design.root() = this;
	// eq Start.root() = getSpecification().getElement(0).root();

	syn design Start.getDesign() = (design) getSpecification().getElement(0);
	eq EmptyStart.getDesign() = new design(new List<Attribute>(),new List<Element>());

	public void EmptyStart.prettyPrint(String indent, PrintStream pStream) {}

	syn String Element.value() = "";
	eq ComplexElement.value() {
		for (Attribute a : getAttributes()) {
			if (a instanceof _value) {
				return a.value();
			}
		}
		return "";
	}

	syn String Attribute.value() = fix(getAttrValue().getLITERAL());

	syn actor_port ASTNode.getPort(String portName) = null;
	eq ComplexElement.getPort(String portName) {
		for (Element e: getElements()) {
			if (e.getPort(portName)!=null) {
				return e.getPort(portName);
			}
		}
		return null;
	}
	eq Start.getPort(String portName) = getSpecification().getPort(portName);
	eq Specification.getPort(String portName) = getElement(0).getPort(portName);
	eq actor_port.getPort(String portName) {
		if (name().equals(portName)) {
			return this;
		}
		return null;
	}


	syn String actor_port.size() {
		for (Attribute a : getAttributes()) {
			if (a instanceof _size) {
				return a.value();
			}
		}
		return "0";
	}


	// int operation.numElements() {
	// 	return root().numElements(lastPort().name());
	// }
	// syn lazy int ASTNode.numElements(String name) = 0;
	// eq Start.numElements(String name) = getSpecification().numElements(name);
	// eq Specification.numElements(String name) {
	// 	for (Element e : getElements()) {
	// 		if (e.numElements(name) > 0) {
	// 			return e.numElements(name);
	// 		}
	// 	}
	// 	return 0;
	// }
	// eq ComplexElement.numElements(String name) {
	// 	for (Element e : getElements()) {
	// 		if (e.numElements(name) > 0) {
	// 			return e.numElements(name);
	// 		}
	// 	}
	// 	return 0;
	// }
	// eq port.numElements(String name) {
	// 	if (isOutPort()
	// }

	syn int Element.consumptionRate(String pName) = 0;
	eq module.consumptionRate(String pName) {
		Element note = null;
		for (Element e : getElements()) {
			if (note != null) {
				if (e.kind().equals("pinRead")) {
					System.out.println("  "+Integer.valueOf(note.value()));
					return Integer.valueOf(note.value());
				} else {
					System.out.println("** Error. Element: "+e.kind()+
									   " should be consumptionRates");
				}
			}
			if (e.kind().equals("consumptionRates")) {
				System.out.println("Found Element");
				note = e;
			}
		}
		return 0;
	}

	syn int Element.productionRate(String pName) = 0;
	eq module.productionRate(String pName) {
		boolean portFound = false;
		for (Element e : getElements()) {
			if (portFound) {
				if (e.kind().equals("productionRates")) {
					System.out.println("  "+Integer.valueOf(e.value()));
					return Integer.valueOf(e.value());
				} else {
					System.out.println("** Error. Element: "+e.kind()+
									   " should be productionRates");
				}
			}
			if (e.kind().equals("pinWrite")) {
				System.out.println("Found Element");
				portFound = true;
			}
		}
		return 0;
	}
	
}