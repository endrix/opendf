/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import eu.actorsproject.xlim.XlimTopLevelPort;
import eu.actorsproject.xlim.decision2.PortSignature;
import eu.actorsproject.xlim.schedule.ActionSchedule;
import eu.actorsproject.xlim.schedule.MergePhasePrinterPlugIn;
import eu.actorsproject.xlim.schedule.PhasePrinter;
import eu.actorsproject.xlim.schedule.StaticActionSchedule;
import eu.actorsproject.xlim.schedule.StaticPhase;
import eu.actorsproject.xlim.schedule.StaticSubSchedule;

aspect Merge {
	private static int design.nameIndex = 0;
	static int ASTNode.tmpIndex = 0;
	
	public void Start.merge(Start dest, String srcPort, String dstPort) {
		getSpecification().getDesign().merge(dest.getSpecification().getDesign(),
											 srcPort,dstPort);
	}
	public void EmptyStart.merge(Start dest, String srcPort, String dstPort) {}

	public void design.merge(design dest, String srcPort, String dstPort) {
		HashSet<module> ops = dest.getActions(new HashSet<module>());
		System.out.println("Adding actions from: "+dest.name()+" to: "+name());
		String varName = "\""+name()+"_out_"+(nameIndex++)+"\"";
// 		setName(name()+"_"+dest.name());
		List<Element> eList = getElements();
		stateVar var = new stateVar();		
		initValue init = new initValue();
		init.setAttributeList(new List().add(new _size(new AttrValue("\"32\""))).
							  add(new _typeName(new AttrValue("\"int\""))).
							  add(new _value(new AttrValue("\"0\""))));
		var.setAttributeList(new List().add(new _name(new AttrValue(varName))).
							 add(new _sourceName(new AttrValue(varName))));
		var.addElement(init);
		eList.insertChild(var,0);
		// Re-set pinWrite with shared variable
		for (module m : getActions(new HashSet<module>())) {
			m.setOutVar(varName,srcPort);
		}
		for (module o : ops) {
			o.setInVar(varName,dstPort);
			o.setName(dest.name()+"_"+o.name());
			System.out.println("   Adding "+o.name());
 			eList.insertChild(o,eList.getNumChild()-2);
			actionScheduler().addTaskCall(o);
// 			eList.addChild(o);
		}
	}

	public void Start.replaceBuffer(Start src, Start dst, String srcPort, String dstPort, 
									int ix, int bufSize) {
		System.out.println("Replacing "+src.name()+":"+srcPort+"->"+dst.name()+":"+dstPort);
		portMap().put(srcPort,"buf_"+ix);
		portMap().put(dstPort,"buf_"+ix);
		for (module m : src.getActions(new HashSet<module>())) {
			System.out.println("  Out: "+m.productionRate(srcPort));
			m.setOutVar(ix,srcPort,bufSize,m.productionRate(srcPort));
		}		
		for (module m : dst.getActions(new HashSet<module>())) {
			System.out.println("  In: "+m.consumptionRate(srcPort));
			m.setInVar(ix,dstPort,bufSize,m.consumptionRate(srcPort));
		}		
		src.getSpecification().getDesign().removePort(fix(srcPort),ix);
		dst.getSpecification().getDesign().removePort(fix(dstPort),ix);
		src.actionScheduler().removePort(srcPort,ix);
		dst.actionScheduler().removePort(dstPort,ix);
		// src.actionScheduler().manglePinAvail(srcPort,name());
	}
	
	public Attribute.Attribute(String value) {this(new AttrValue(unfix(value)));}
	public Encoding.Encoding(String value) {super(new AttrValue(unfix(value)));}
	public Version.Version(String value) {super(new AttrValue(unfix(value)));}
	public autostart.autostart(String value) {super(new AttrValue(unfix(value)));}
	public decision.decision(String value) {super(new AttrValue(unfix(value)));}
	public _dir._dir(String value) {super(new AttrValue(unfix(value)));}
	public _kind._kind(String value) {super(new AttrValue(unfix(value)));}
	public _name._name(String value) {super(new AttrValue(unfix(value)));}
	public portName.portName(String value) {super(new AttrValue(unfix(value)));}
	public qualifier.qualifier(String value) {super(new AttrValue(unfix(value)));}
	public _size._size(String value) {super(new AttrValue(unfix(value)));}
	public target.target(String value) {super(new AttrValue(unfix(value)));}
	public source.source(String value) {super(new AttrValue(unfix(value)));}
	public _sourceName._sourceName(String value) {super(new AttrValue(unfix(value)));}
	public _typeName._typeName(String value) {super(new AttrValue(unfix(value)));}
	public _value._value(String value) {super(new AttrValue(unfix(value)));}

	public void Start.init(String name) {
		Specification spec = new Specification();
		XmlHeader xmlHead = new XmlHeader();
		xmlHead.setAttributeList(new List<Attribute>().add(new Version("1.0")).
								 add(new Encoding("UTF-8")));
		spec.setXmlHeader(xmlHead);
		design d = new design(new List<Attribute>().add(new _name(name)),new List<Element>());
		spec.setElementList(new List<Element>().add(d));
		setSpecification(spec);
		
		// Turn of blocking-waits generation in xlim2c, otherwise it
		// will crasch.
		note option = new note();
		d.addElement(option);
		option.setAttributeList(new List<Attribute>().
								add(new _kind("option")).
								add(new _name("generate-blocking-waits")).
								add(new _value("false")));
	}

	public void Start.addStateVar(String name, int bufSize, String typeName, String size) {
		getSpecification().getDesign().addStateVar(name,bufSize,typeName,size);
	}
	public void design.addStateVar(String name, int bufSize, String typeName, String size) {
		stateVar sVar = new stateVar();
		// addElement(sVar);
		getElements().insertChild(sVar,0);
		sVar.setAttributeList(new List<Attribute>().add(new _name(name)).
							  add(new _sourceName(name)));
		sVar.setElementList(new List<Element>());
		initValue list = new initValue();
		list.setAttributeList(new List<Attribute>().add(new _typeName("List")));
		List<Element> eList = new List<Element>();
		sVar.addElement(list);
		initValue iVal = new initValue();
		iVal.setElementList(new List<Element>());
		iVal.setAttributeList(new List<Attribute>().add(new _size(size)).
							  add(new _typeName(typeName)).
							  add(new _value("0")));
		for (int i=0; i<bufSize; i++) {
			eList.add(iVal);
		}
		list.setElementList(eList);
	}

	public void Start.addStateVar(String name) {
		getSpecification().getDesign().addStateVar(name);
	}
	public void design.addStateVar(String name) {
		stateVar sVar = new stateVar();
		// addElement(sVar);
		getElements().insertChild(sVar,0);
		sVar.setAttributeList(new List<Attribute>().add(new _name(name)).
							  add(new _sourceName(name)));
		initValue list = new initValue();
		list.setAttributeList(new List<Attribute>().
							  add(new _size("32")).
							  add(new _typeName("int")).
							  add(new _value("0")));
		sVar.setElementList(new List<Element>().add(list));
		// System.out.println("Adding statevar");
		// sVar.prettyPrint("",System.out);
		// System.out.println(getNumElement());
	}

	public void Start.populate(Start instance, String prefix) {
		getDesign().populate(instance,prefix);
	}

	public void design.populate(Start instance, String prefix) {
		// Before populating merged instance, mangle names for
		// uniqueness in source instance.
		instance.mangleNames(prefix);
		for (Element e : instance.getDesign().getElements()) {
			if (!e.isActionScheduler()) {
				addElement(e);
			}
		}
		// instance.prettyPrint("",System.out);
	}

	public static List<Element> ASTNode.increaseBufferIx(int ix, int bufSize, String bufName) {
		List<Element> operations = new List<Element>();
		// Declare literal 1. Should possibly be done globally
		// once.
		operation oneLit = new operation();
		operations.add(oneLit);
		oneLit.setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
								add(new _value("1")));
		List<Element> litList = new List<Element>();
		oneLit.setElementList(litList);
		port litPort = new port();
		litPort.setElementList(new List<Element>());
		litPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
								 add(new _size("32")).add(new source("one_"+tmpIndex)).
								 add(new _typeName("int")));
		litList.add(litPort);
		//***********************
		// First, increase buffer out index
		//***********************
		operation addOp = new operation();
		operations.add(addOp);
		addOp.setAttributeList(new List<Attribute>().add(new _kind("$add")));
		List<Element> addElements = new List<Element>();
		addOp.setElementList(addElements);
		addElements.add(new port(new List<Attribute>().add(new _dir("in")).
								 add(new source("one_"+tmpIndex)),new List<Element>())).
			add(new port(new List<Attribute>().add(new _dir("in")).
						 add(new source(bufName+ix)),new List<Element>())).
			add(new port(new List<Attribute>().add(new _dir("out")).
						 add(new _size("32")).add(new source(bufName+ix+"_add")).
						 add(new _typeName("int")),
						 new List<Element>()));

		//***********************
		// Test if index should wrap to 0
		//***********************
		module ifm = new module();
		operations.add(ifm);
		ifm.setAttributeList(new List<Attribute>().add(new _kind("if")));
		List<Element> ifmElements = new List<Element>();
		ifm.setElementList(ifmElements);
		module testm = new module();
		ifm.addElement(testm);
		testm.setAttributeList(new List<Attribute>().add(new decision("decision_"+tmpIndex)).
							   add(new _kind("test")));
		List<Element> testmElements = new List<Element>();
		testm.setElementList(testmElements);
		//***********************
		// Buffer size literal
		//***********************
		operation sizeLit = new operation();
		testmElements.add(sizeLit);
		sizeLit.setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
								 add(new _value(Integer.toString(bufSize))));
		List<Element> sizeLitList = new List<Element>();
		sizeLit.setElementList(sizeLitList);
		port sizeLitPort = new port();
		sizeLitPort.setElementList(new List<Element>());
		sizeLitPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
									 add(new _size("32")).add(new source("bufSize_"+ix)).
									 add(new _typeName("int")));
		sizeLitList.add(sizeLitPort);
		//***********************
		// outIx >= bufSize?
		//***********************
		List<Element> geqElements = new List<Element>();
		operation geq = new operation(new List<Attribute>().add(new _kind("$ge")),
									  geqElements);
		testmElements.add(geq);
		geqElements.add(new port(new List<Attribute>().add(new _dir("in")).
								 add(new source(bufName+ix+"_add")),
								 new List<Element>())).
			add(new port(new List<Attribute>().add(new _dir("in")).
						 add(new source("bufSize_"+ix)),
						 new List<Element>())).
			add(new port(new List<Attribute>().add(new _dir("out")).
						 add(new source("decision_"+tmpIndex)).add(new _typeName("bool")),
						 new List<Element>()));
		//***********************
		// then module
		//***********************
		module thenm = new module();
		ifm.addElement(thenm);
		thenm.setAttributeList(new List<Attribute>().add(new _kind("then")));
		List<Element> thenmElements = new List<Element>();
		thenm.setElementList(thenmElements);
		// zero literal
		operation zeroLit = new operation();
		thenmElements.add(zeroLit);
		zeroLit.setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
								 add(new _value("0")));
		List<Element> zeroLitList = new List<Element>();
		zeroLit.setElementList(zeroLitList);
		port zeroLitPort = new port();
		zeroLitPort.setElementList(new List<Element>());
		zeroLitPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
									 add(new _size("32")).
									 add(new source("zeroLit_"+tmpIndex)).
									 add(new _typeName("int")));
		zeroLitList.add(zeroLitPort);
		//***********************
		// outIx = 0
		//***********************
		List<Element> assignElements = new List<Element>();
		// operation assign = new operation(new List<Attribute>().
		// 								 add(new _kind("assign")).
		// 								 add(new target(bufName+ix)),
		// 								 assignElements);
		operation assign = new operation(new List<Attribute>().
										 add(new _kind("noop")),
										 assignElements);
		thenmElements.add(assign);
		assignElements.add(new port(new List<Attribute>().add(new _dir("in")).
						 add(new source("zeroLit_"+tmpIndex)),new List<Element>()));
		assignElements.add(new port(new List<Attribute>().add(new _dir("out")).
									add(new _size("32")).
									add(new source(bufName+ix+"_then")).
									add(new _typeName("int")),new List<Element>()));
		//***********************
		// else module
		//***********************
		module elsem = new module();
		ifm.addElement(elsem);
		elsem.setAttributeList(new List<Attribute>().add(new _kind("else")));
		List<Element> elsemElements = new List<Element>();
		elsem.setElementList(elsemElements);
		operation noop = new operation();
		elsemElements.add(noop);
		noop.setAttributeList(new List<Attribute>().add(new _kind("noop")));
		port noopIn = new port();
		noop.addElement(noopIn);
		noopIn.setAttributeList(new List<Attribute>().add(new _dir("in")).
								add(new source(bufName+ix+"_add")));
		port noopOut = new port();
		noop.addElement(noopOut);
		noopOut.setAttributeList(new List<Attribute>().add(new _dir("out")).
								 add(new _size("32")).
								 add(new source(bufName+ix+"_else")).
								 add(new _typeName("int")));

		//***********************
		// PHI 
		//***********************
		PHI phi = new PHI();
		ifm.addElement(phi);
		port phiIn1 = new port();
		phi.addElement(phiIn1);
		phiIn1.setAttributeList(new List<Attribute>().add(new _dir("in")).
								add(new qualifier("then")).
								add(new source(bufName+ix+"_then")));
		port phiIn2 = new port();
		phi.addElement(phiIn2);
		phiIn2.setAttributeList(new List<Attribute>().add(new _dir("in")).
								add(new qualifier("else")).
								add(new source(bufName+ix+"_else")));
		port phiOut1 = new port();
		phi.addElement(phiOut1);
		phiOut1.setAttributeList(new List<Attribute>().add(new _dir("out")).
								 add(new _size("32")).
								 add(new source(bufName+ix+"_res")).
								 add(new _typeName("int")));
		//***********************
		// Write back to state var 	  
		//***********************
		operation wBack = new operation();
		operations.add(wBack);
		wBack.setAttributeList(new List<Attribute>().add(new _kind("assign")).
							   add(new target(bufName+ix)));
		port wPort = new port();
		wBack.addElement(wPort);
		wPort.setAttributeList(new List<Attribute>().add(new _dir("in")).
							   add(new source(bufName+ix+"_res")));

		// Finished. Return list
		// System.out.println("increaseBufferIx "+operations.getNumChild());
		tmpIndex++;
		return operations;
	}

}

aspect Ports {
	syn HashSet<actor_port> ASTNode.getPorts(HashSet<actor_port> ports) = ports;
	eq Start.getPorts(HashSet<actor_port> ports) = 
		getSpecification().getPorts(ports);
	eq EmptyStart.getPorts(HashSet<actor_port> ports) = ports;
	eq Specification.getPorts(HashSet<actor_port> ports) {
		for (Element e : getElements()) {
			ports = e.getPorts(ports);
		}
		return ports;
	}
	eq ComplexElement.getPorts(HashSet<actor_port> ports) {
		for (Element e : getElements()) {
			ports = e.getPorts(ports);
		}
		return ports;
	}
	eq actor_port.getPorts(HashSet<actor_port> ports) {
		ports.add(this);
		return ports;
	}

}

aspect Actions {
	syn HashSet<module> ASTNode.getActions(HashSet<module> ops) = ops;
	eq Start.getActions(HashSet<module> ops) = 
		getSpecification().getActions(ops);
	eq Specification.getActions(HashSet<module> ops) {
		for (Element e : getElements()) {
			ops = e.getActions(ops);
		}
		return ops;
	}
	eq ComplexElement.getActions(HashSet<module> ops) {
		for (Element e : getElements()) {
			ops = e.getActions(ops);
		}
		return ops;
	}
	eq module.getActions(HashSet<module> ops) {
		if (isAction()) {
			ops.add(this);
		}
		return ops;
	}

	void module.setOutVar(String varName,String srcPort) {
		for (Element e : getElements()) {
			e.setOutVar(varName, srcPort);
		}
	}
	void Element.setOutVar(String varName, String srcPort){}
	void operation.setOutVar(String varName, String srcPort) {
		if (kind().equals("pinWrite") && portName().equals(srcPort)) {
			setAttributeList(new List().add(new _kind(new AttrValue("\"assign\""))).
							 add(new target(new AttrValue(varName))));
		}
	}
	List<Element> module.setOutVar(int ix,String srcPort, int bufSize, int pRate) {
		List<Element> eList = new List<Element>();
		for (Element e : getElements()) {
			eList.add(e);
			// e.prettyPrint(" ",System.out);
			// System.out.println(e);
			for (Element ee : e.setOutVar(ix, srcPort, bufSize, pRate)) {
				eList.add(ee);
			}
		}
		setElementList(eList);
		return new List<Element>();
	}
	List<Element> Element.setOutVar(int ix, String srcPort, int bufSize, int pRate) {
		return new List<Element>();
	}
	List<Element> operation.setOutVar(int ix, String srcPort, int bufSize, int pRate) {
		if (kind().equals("pinWrite") && portName().equals(srcPort)) {
			if (pRate > 1) {
				String outVar = ((ComplexElement)getElement(0)).getAttribute(1).value();
				typeDef elementType = getElement(0).typeDef();
				String eTypeName = "int";
				String eTypeSize = "32";
				if (elementType == null) {
					System.out.println("Could not find element type for: "+outVar);
				} else {
					eTypeName = elementType.elementTypeName();
					eTypeSize = elementType.elementTypeSize();
				}
				setAttributeList(new List().
								 add(new _kind("$literal_Integer")).
								 add(new _value("0")));
				setElementList(new List<Element>().
							   add(new port(new List<Attribute>().
											add(new _dir("out")).
											add(new _size("32")).
											add(new source("outLoopInit_"+ix)).
											add(new _typeName("int")),
											new List<Element>())));
				List<Element> eList = new List<Element>();
				// First, declare loop variable initial value (0)
				// eList.add(new operation(new List<Attribute>().add(new _kind("$literal_Integer")).
				// 						add(new _value("0")),
				// 						new List<Element>().
				// 						add(new port(new List<Attribute>().
				// 									 add(new _dir("out")).
				// 									 add(new _size("32")).
				// 									 add(new source("loop_init")).
				// 									 add(new _typeName("int")),
				// 									 new List<Element>()))));
				
				module loop = new module();
				eList.add(loop);
				loop.setAttributeList(new List<Attribute>().add(new _kind("loop")));		
				// PHI module
				PHI phi = new PHI();
				loop.addElement(phi);
				port p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("in")).
								   add(new source("outLoopInit_"+ix)));
				p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("in")).
								   add(new source("out_i_new_"+ix)));
				p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("out")).
								   add(new _size("32")).
								   add(new source("out_i_"+ix)).
								   add(new _typeName("int")));
				// module decision
				module deci = new module();
				loop.addElement(deci);
				deci.setAttributeList(new List<Attribute>().add(new decision("outDeci_"+ix)).
								   add(new _kind("test")));
				deci.addElement(new operation(new List<Attribute>().add(new _kind("$literal_Integer")).
											  add(new _value(Integer.toString(pRate))),
											  new List<Element>().add(new port(new List<Attribute>().
																			   add(new _dir("out")).
																			   add(new _size("32")).
																			   add(new source("p_rate")).
																			   add(new _typeName("int")),
																			   new List<Element>()))));
				operation o = new operation(new List<Attribute>().add(new _kind("$lt")),
											new List<Element>());
				deci.addElement(o);
				o.addElement(new port(new List<Attribute>().add(new _dir("in")).
									  add(new source("out_i_"+ix)),new List<Element>()));
				o.addElement(new port(new List<Attribute>().add(new _dir("in")).
									  add(new source("p_rate")),new List<Element>()));
				o.addElement(new port(new List<Attribute>().add(new _dir("out")).
									  add(new source("outDeci_"+ix)).add(new _typeName("bool")),
									  new List<Element>()));
				// module body
				module body = new module(new List<Attribute>().add(new _kind("body")),
										 new List<Element>());
				loop.addElement(body);
				// x[i]
				operation vref = new operation(new List<Attribute>().add(new _kind("var_ref")).
											   add(new _name(outVar)),
											   new List<Element>());
				body.addElement(vref);
				vref.addElement(new port(new List<Attribute>().add(new _dir("in")).
										 add(new source("out_i_"+ix)),
										 new List<Element>()));
				vref.addElement(new port(new List<Attribute>().add(new _dir("out")).
										 add(new _size(eTypeSize)).
										 add(new source("outTmp_"+ix)).
										 add(new _typeName(eTypeName)),
										 new List<Element>()));
				// ix+i
				// operation add = new operation(new List<Attribute>().add(new _kind("$add")),
				// 							  new List<Element>());
				// body.addElement(add);
				// add.addElement(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("i")),
				// 						 new List<Element>()));
				// add.addElement(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("outIx_"+ix)),
				// 						 new List<Element>()));
				// add.addElement(new port(new List<Attribute>().add(new _dir("out")).
				// 						 add(new _size("32")).
				// 						 add(new source("tmp_0")).
				// 						 add(new _typeName("int")),
				// 						 new List<Element>()));
				// buf[ix] = x[i]
				operation assign = new operation(new List<Attribute>().add(new _kind("assign")).
												 add(new target("buf_"+ix)),
												 new List<Element>());
				body.addElement(assign);
				assign.addElement(new port(new List<Attribute>().add(new _dir("in")).
										   add(new source("outIx_"+ix)),
										   new List<Element>()));
				assign.addElement(new port(new List<Attribute>().add(new _dir("in")).
										   add(new source("outTmp_"+ix)),
										   new List<Element>()));
				// i+1
				operation oneLit = new operation();
				body.addElement(oneLit);
				oneLit.setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
										add(new _value("1")));
				List<Element> litList = new List<Element>();
				oneLit.setElementList(litList);
				port litPort = new port();
				litPort.setElementList(new List<Element>());
				litPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
										 add(new _size("32")).add(new source("one__"+tmpIndex)).
										 add(new _typeName("int")));
				litList.add(litPort);
				operation add = new operation(new List<Attribute>().add(new _kind("$add")),new List<Element>());
				body.addElement(add);
				add.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("out_i_"+ix)),
										new List<Element>()));
				add.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("one__"+tmpIndex)),
										new List<Element>()));
				add.addElement(new port(new List<Attribute>().add(new _dir("out")).
										add(new _size("32")).
										add(new source("out_i_tmp_"+ix)).
										add(new _typeName("int")),
										new List<Element>()));
				// i:=i+1
				operation noop = new operation(new List<Attribute>().add(new _kind("noop")),new List<Element>());
				body.addElement(noop);
				noop.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("out_i_tmp_"+ix)),
										new List<Element>()));
				noop.addElement(new port(new List<Attribute>().add(new _dir("out")).
										add(new _size("32")).
										add(new source("out_i_new_"+ix)).
										add(new _typeName("int")),
										new List<Element>()));
				//***********************
				// First, increase buffer out index
				//***********************
				// operation addOp = new operation();
				// body.addElement(addOp);
				// addOp.setAttributeList(new List<Attribute>().add(new _kind("$add")));
				// List<Element> addElements = new List<Element>();
				// addOp.setElementList(addElements);
				// addElements.add(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("one_"+tmpIndex)),new List<Element>())).
				// 	add(new port(new List<Attribute>().add(new _dir("in")).
				// 				 add(new source("outIx_"+ix)),new List<Element>())).
				// 	add(new port(new List<Attribute>().add(new _dir("out")).
				// 				 add(new _size("32")).add(new source("outIx"+ix+"_add")).
				// 				 add(new _typeName("int")),
				// 				 new List<Element>()));
				for (Element e : increaseBufferIx(ix,bufSize,"outIx_")) {
					body.addElement(e);
				}
				return eList;
			} else {
				setAttributeList(new List().add(new _kind(new AttrValue("\"assign\""))).
								 add(new target("buf_"+ix)));
				if (bufSize > 1) {
					// Scalar buffers does not need this			  
					port indexPort = new port();
					indexPort.setAttributeList(new List().add(new _dir(new AttrValue("\"in\""))).
											   add(new source("outIx_"+ix)));
					getElements().insertChild(indexPort,0);
					// prettyPrint("",System.out);
					// OK, so then add operations to increase buffer index,
					// mod size.
					System.out.println("** replaced pinWrite");
					return increaseBufferIx(ix,bufSize,"outIx_");
				} else {
					return new List<Element>();
				}
			}
		}
		// Not done anything so return empty list
		// System.out.println("** nothing");
		return new List<Element>();
	}

	void module.setInVar(String varName,String srcPort) {
		for (Element e : getElements()) {
			e.setInVar(varName, srcPort);
		}
	}
	void Element.setInVar(String varName, String srcPort){}
	void operation.setInVar(String varName, String srcPort) {
		if (kind().equals("pinRead")) {
			String src = getElement(0).source();
			setAttributeList(new List().add(new _kind(new AttrValue("\"noop\""))));
			port newInPort = new port();
			newInPort.setAttributeList(new List().add(new _dir(new AttrValue("\"in\""))).
									 add(new source(new AttrValue(varName))));
// 			port newOutPort = new port();
// 			newOutPort.setAttributeList(new List().add(new _dir(new AttrValue("\"out\""))).
// 										add(new size(new AttrValue("\"32\""))).
// 										add(new source(new AttrValue(srcPort))));
 			addElement(newInPort);
// 			setElementList(new List().add(newInPort).add(newOutPort));
		}
	}

	List<Element> module.setInVar(int ix,String srcPort, int bufSize, int cRate) {
		List<Element> eList = new List<Element>();
		for (Element e : getElements()) {
			eList.add(e);
			List<Element> tmpList = e.setInVar(ix, srcPort, bufSize, cRate);
			// System.out.print("module.setInvar "+e.getClass().getName()+" ");
			// System.out.println(tmpList.getNumChild());
			// for (Element ee : e.setInVar(ix, srcPort, bufSize)) {
			for (Element ee : tmpList) {
				eList.add(ee);
			}
		}
		setElementList(eList);
		return new List<Element>();
	}
	List<Element> Element.setInVar(int ix, String srcPort, int bufSize, int cRate) {
		// System.out.println("Element.setInvar");
		return new List<Element>();
	}
	List<Element> operation.setInVar(int ix, String srcPort, int bufSize, int cRate) {
		// System.out.println("operation.setInvar");
		if (kind().equals("pinRead") && portName().equals(srcPort)) {
			if (cRate > 1) {
				String inVar = ((ComplexElement)getElement(0)).source();
				typeDef elementType = getElement(0).typeDef();
				String eTypeName = "unknown";
				String eTypeSize = "unknown";
				if (elementType == null) {
					System.out.println("Could not find element type for: "+inVar);
					eTypeName = ((ComplexElement) getElement(0)).typeName();
					eTypeSize = ((ComplexElement) getElement(0)).typeSize();
				} else {
					eTypeName = elementType.elementTypeName();
					eTypeSize = elementType.elementTypeSize();
				}
				
				// setAttributeList(new List<Attribute>().
				// 				 add(new _kind("$literal_Integer")).
				// 				 add(new _value("0")));
				// setElementList(new List<Element>().
				// 			   add(new port(new List<Attribute>().
				// 							add(new _dir("out")).
				// 							add(new _size("32")).
				// 							add(new source("loop_init")).
				// 							add(new _typeName("int")),
				// 							new List<Element>())));
				setAttributeList(new List<Attribute>().
								 add(new _kind("$valloc")));
				List<Element> eList = new List<Element>();
				// First, declare loop variable initial value (0)
				eList.add(new operation(new List<Attribute>().add(new _kind("$literal_Integer")).
										add(new _value("0")),
										new List<Element>().
										add(new port(new List<Attribute>().
													 add(new _dir("out")).
													 add(new _size("32")).
													 add(new source("loop_init")).
													 add(new _typeName("int")),
													 new List<Element>()))));
				
				module loop = new module();
				eList.add(loop);
				loop.setAttributeList(new List<Attribute>().add(new _kind("loop")));		
				// PHI module
				PHI phi = new PHI();
				loop.addElement(phi);
				port p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("in")).
								   add(new source("loop_init")));
				p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("in")).
								   add(new source("i_new")));
				p = new port();
				phi.addElement(p);
				p.setAttributeList(new List<Attribute>().
								   add(new _dir("out")).
								   add(new _size("32")).
								   add(new source("i")).
								   add(new _typeName("int")));
				// module decision
				module deci = new module();
				loop.addElement(deci);
				deci.setAttributeList(new List<Attribute>().add(new decision("deci_0")).
								   add(new _kind("test")));
				deci.addElement(new operation(new List<Attribute>().add(new _kind("$literal_Integer")).
											  add(new _value(Integer.toString(cRate))),
											  new List<Element>().add(new port(new List<Attribute>().
																			   add(new _dir("out")).
																			   add(new _size("32")).
																			   add(new source("c_rate")).
																			   add(new _typeName("int")),
																			   new List<Element>()))));
				operation o = new operation(new List<Attribute>().add(new _kind("$lt")),
											new List<Element>());
				deci.addElement(o);
				o.addElement(new port(new List<Attribute>().add(new _dir("in")).
									  add(new source("i")),new List<Element>()));
				o.addElement(new port(new List<Attribute>().add(new _dir("in")).
									  add(new source("c_rate")),new List<Element>()));
				o.addElement(new port(new List<Attribute>().add(new _dir("out")).
									  add(new source("deci_0")).add(new _typeName("bool")),
									  new List<Element>()));
				// module body
				module body = new module(new List<Attribute>().add(new _kind("body")),
										 new List<Element>());
				loop.addElement(body);
				// buf[i]
				operation vref = new operation(new List<Attribute>().add(new _kind("var_ref")).
											   add(new _name("buf_"+ix)),
											   new List<Element>());
				body.addElement(vref);
				vref.addElement(new port(new List<Attribute>().add(new _dir("in")).
										 add(new source("inIx_"+ix)),
										 new List<Element>()));
				vref.addElement(new port(new List<Attribute>().add(new _dir("out")).
										 add(new _size(eTypeSize)).
										 add(new source("tmp_0")).
										 add(new _typeName(eTypeName)),
										 new List<Element>()));
				// ix+i
				// operation add = new operation(new List<Attribute>().add(new _kind("$add")),
				// 							  new List<Element>());
				// body.addElement(add);
				// add.addElement(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("i")),
				// 						 new List<Element>()));
				// add.addElement(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("outIx_"+ix)),
				// 						 new List<Element>()));
				// add.addElement(new port(new List<Attribute>().add(new _dir("out")).
				// 						 add(new _size("32")).
				// 						 add(new source("tmp_0")).
				// 						 add(new _typeName("int")),
				// 						 new List<Element>()));
				// buf[ix] = x[i]
				operation assign = new operation(new List<Attribute>().add(new _kind("assign")).
												 add(new target(inVar)),
												 new List<Element>());
				body.addElement(assign);
				assign.addElement(new port(new List<Attribute>().add(new _dir("in")).
										   add(new source("i")),
										   new List<Element>()));
				assign.addElement(new port(new List<Attribute>().add(new _dir("in")).
										   add(new source("tmp_0")),
										   new List<Element>()));
				// i+1
				operation oneLit = new operation();
				body.addElement(oneLit);
				oneLit.setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
										add(new _value("1")));
				List<Element> litList = new List<Element>();
				oneLit.setElementList(litList);
				port litPort = new port();
				litPort.setElementList(new List<Element>());
				litPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
										 add(new _size("32")).add(new source("one__"+tmpIndex)).
										 add(new _typeName("int")));
				litList.add(litPort);
				operation add = new operation(new List<Attribute>().add(new _kind("$add")),new List<Element>());
				body.addElement(add);
				add.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("i")),
										new List<Element>()));
				add.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("one__"+tmpIndex)),
										new List<Element>()));
				add.addElement(new port(new List<Attribute>().add(new _dir("out")).
										add(new _size("32")).
										add(new source("i_tmp")).
										add(new _typeName("int")),
										new List<Element>()));
				// i:=i+1
				operation noop = new operation(new List<Attribute>().add(new _kind("noop")),new List<Element>());
				body.addElement(noop);
				noop.addElement(new port(new List<Attribute>().add(new _dir("in")).
										add(new source("i_tmp")),
										new List<Element>()));
				noop.addElement(new port(new List<Attribute>().add(new _dir("out")).
										add(new _size("32")).
										add(new source("i_new")).
										add(new _typeName("int")),
										new List<Element>()));
				//***********************
				// First, increase buffer out index
				//***********************
				// operation addOp = new operation();
				// body.addElement(addOp);
				// addOp.setAttributeList(new List<Attribute>().add(new _kind("$add")));
				// List<Element> addElements = new List<Element>();
				// addOp.setElementList(addElements);
				// addElements.add(new port(new List<Attribute>().add(new _dir("in")).
				// 						 add(new source("one_"+tmpIndex)),new List<Element>())).
				// 	add(new port(new List<Attribute>().add(new _dir("in")).
				// 				 add(new source("outIx_"+ix)),new List<Element>())).
				// 	add(new port(new List<Attribute>().add(new _dir("out")).
				// 				 add(new _size("32")).add(new source("outIx"+ix+"_add")).
				// 				 add(new _typeName("int")),
				// 				 new List<Element>()));
				for (Element e : increaseBufferIx(ix,bufSize,"inIx_")) {
					body.addElement(e);
				}
				return eList;
			} else {
				if (bufSize > 1) {
					setAttributeList(new List().add(new _kind("var_ref")).
									 add(new _name("buf_"+ix)));
					// if (cRate > 1) {
					// 	return new List<Element>();
					// } else {
					// Scalar buffers does not need this
					port indexPort = new port();
					indexPort.setAttributeList(new List().add(new _dir("in")).
											   add(new source("inIx_"+ix)));
					getElements().insertChild(indexPort,0);
					// prettyPrint("",System.out);
					// OK, so then add operations to increase buffer index,
					// mod size.
					return increaseBufferIx(ix,bufSize,"inIx_");
					// }
				} else {
					setAttributeList(new List().add(new _kind("noop")));
					port inPort = new port();
					inPort.setAttributeList(new List().add(new _dir("in")).
											add(new source("buf_"+ix)));
					getElements().insertChild(inPort,0);
					return new List<Element>();
				}
			}
		}
		// Not done anything so return empty list
		// System.out.println("operation.setInvar return empty list");
		return new List<Element>();
	}

}

aspect ActionScheduler {
	public module Start.actionScheduler() {
		return getSpecification().getDesign().actionScheduler();
	}
	syn module Element.actionScheduler() = null;
	eq ComplexElement.actionScheduler() {
		for (Element e : getElements()) {
			if (e.actionScheduler() != null) {
				return e.actionScheduler();
			}
		}
		return null;
	}
	eq module.actionScheduler() {
		if (isActionScheduler()) {
			return this;
		}
		return null;
	}

	syn boolean Element.isActionScheduler() = false;
	eq module.isActionScheduler() {
		return kind().equals("action-scheduler");
	}

	void Element.addTaskCall(module m) {}
	void module.addTaskCall(module m) {
		// System.out.println("Looking in: "+kind());
		if (hasTaskCall()) {
			operation o = new operation();
			o.setAttributeList(new List().add(new _kind(new AttrValue("\"taskCall\""))).
							   add(new target(new AttrValue(unfix(m.name())))));
			addElement(o);
		} else {
			for (Element e : getElements()) {
				e.addTaskCall(m);
			}
		}
	}

	syn boolean Element.hasTaskCall() = false;
	eq module.hasTaskCall() {
		for (Element e : getElements()) {
			if (e instanceof operation) {
				System.out.println("  "+e.kind());
			}
			if (e instanceof operation && e.kind().equals("taskCall")) {
				return true;
			}
		}
		return false;
	}

	// Replace any access to this port with boolean true
	void Element.removePort(String portName, int ix) {}
	void ComplexElement.removePort(String portName, int ix) {
		for (Element e: getElements()) {
			e.removePort(portName, ix);
		}
	}
	void operation.removePort(String portName, int ix) {
		if (kind().equals("pinAvail")) {
			setAttributeList(new List<Attribute>().add(new _kind("$literal_Integer")).
							 add(new _value("65535")));
		} else if (kind().equals("pinPeek") && portName.equals(portName())) {
			setAttributeList(new List<Attribute>().add(new _kind("var_ref")).
							 add(new _name("buf_"+ix)));			
		}
	}
	void actor_port.removePort(String portName, int ix) {
		// System.out.println("Looking for: "+portName+" found "+name());
		if (name().equals(portName)) {
			remove_me = true;
			is$Final(false);
		}
	}
	void note.removePort(String portName, int ix) {
		System.out.println("Looking for: "+portName+" found "+name());
		if (name().equals(portName)) {
			System.out.println("  Removing port: "+portName);
			remove_me = true;
			is$Final(false);
		}
	}

	public module Start.addActionScheduler(HashSet<xdfAST.Port> ports) {
		module actionSchedule = new module();
		actionSchedule.setAttributeList(new List<Attribute>().add(new autostart("true")).
								add(new _kind("action-scheduler")).
								add(new _name("action-scheduler")).
								add(new _sourceName("action-scheduler")));
		operation trueLiteral = new operation();
		module loop = new module();
		actionSchedule.setElementList(new List<Element>().add(trueLiteral).add(loop));
		trueLiteral.setAttributeList(new List<Attribute>().
									 add(new _kind("$literal_Integer")).
									 add(new _value("1")));
		List<Element> trueLiteralList = new List<Element>();
		trueLiteral.setElementList(trueLiteralList);
		port trueLiteralPort = new port();
		trueLiteralPort.setElementList(new List<Element>());
		trueLiteralPort.setAttributeList(new List<Attribute>().add(new _dir("out")).
									 add(new _size("1")).add(new source("trueLiteral")).
									 add(new _typeName("bool")));
		trueLiteralList.add(trueLiteralPort);
		loop.setAttributeList(new List<Attribute>().add(new _kind("loop")));
		loop.setElementList(new List<Element>());
		// Add decision and body elements to the loop
		module decision = new module();
		loop.addElement(decision);
		decision.setAttributeList(new List<Attribute>().
								  add(new decision("trueLoop")).
								  add(new _kind("test")));
		decision.setElementList(new List<Element>());
		operation nopDecision = new operation();
		decision.addElement(nopDecision);
		nopDecision.setAttributeList(new List<Attribute>().add(new _kind("noop")));
		nopDecision.setElementList(new List<Element>().
								   add(new port(new List<Attribute>().
												add(new _dir("in")).
												add(new source("trueLiteral")),
												new List<Element>())).
								   add(new port(new List<Attribute>().
												add(new _dir("out")).
												add(new _size("1")).
												add(new source("trueLoop")).
												add(new _typeName("bool")),
												new List<Element>())));
		module body = new module();
		loop.addElement(body);
		body.setAttributeList(new List<Attribute>().add(new _kind("body")));

		// Add initial test on all input/output ports 
		int portIx = 0;
		String prevPort = null;
		for (xdfAST.Port port : ports) {
			operation numToken = new operation();
			body.addElement(numToken);
			numToken.setAttributeList(new List<Attribute>().
									  add(new _kind("$literal_Integer")).
									  add(new _value(String.valueOf(port.bufSize()))));
			port numPort = new port();
			numToken.addElement(numPort);
			numPort.setAttributeList(new List<Attribute>().
									 add(new _dir("out")).
									 add(new _size("32")).
									 add(new source(port.name()+"_size")).
									 add(new _typeName("int")));
			operation portNum = new operation();
			body.addElement(portNum);
			portNum.setAttributeList(new List<Attribute>().
									 add(new _kind("pinAvail")).
									 add(new portName(port.name())));
			port numAvail = new port();
			portNum.addElement(numAvail);
			numAvail.setAttributeList(new List<Attribute>().
									 add(new _dir("out")).
									 add(new _size("32")).
									 add(new source(port.name()+"_avail")).
									 add(new _typeName("int")));
			operation comp = new operation();
			body.addElement(comp);
			// if (port.isInputPort()) {
			// 	comp.setAttributeList(new List<Attribute>().
			// 						  add(new _kind("$lt")));
			// } else {
				comp.setAttributeList(new List<Attribute>().
									  add(new _kind("$gt")));
			// }
			port inSize = new port();
			comp.addElement(inSize);
			inSize.setAttributeList(new List<Attribute>().
									add(new _dir("in")).
									add(new source(port.name()+"_size")));
			port inAvail = new port();
			comp.addElement(inAvail);
			inAvail.setAttributeList(new List<Attribute>().
									 add(new _dir("in")).
									 add(new source(port.name()+"_avail")));
			port compRes = new port();
			comp.addElement(compRes);
			compRes.setAttributeList(new List<Attribute>().
									 add(new _dir("out")).
									 add(new _size("1")).
									 add(new source(port.name()+"_res")).
									 add(new _typeName("bool")));

			// Now time to create the if-statement
			module ifStmt = new module();
			body.addElement(ifStmt);
			ifStmt.addAttribute(new _kind("if"));
			module ifDecision = new module();
			ifStmt.addElement(ifDecision);
			ifDecision.setAttributeList(new List<Attribute>().
										add(new decision("portcond_"+portIx)).
										add(new _kind("test")));
			operation condCopy = new operation();
			ifDecision.addElement(condCopy);
			condCopy.addAttribute(new _kind("noop"));
			port noopP = new port();
			condCopy.addElement(noopP);
			noopP.setAttributeList(new List<Attribute>().
								   add(new _dir("in")).
								   add(new source(port.name()+"_res")));
			noopP = new port();
			condCopy.addElement(noopP);
			noopP.setAttributeList(new List<Attribute>().
								   add(new _dir("out")).
								   add(new _size("1")).
								   add(new source("portcond_"+portIx)).
								   add(new _typeName("bool")));
			module ifThen = new module();
			ifStmt.addElement(ifThen);
			ifThen.addAttribute(new _kind("then"));
			operation yield = new operation();
			ifThen.addElement(yield);
			yield.setAttributeList(new List<Attribute>().
								   add(new _kind("yield")).
								   add(new portName(port.name())).
								   add(new _value(String.valueOf(port.bufSize()))));
			module ifElse = new module();
			ifStmt.addElement(ifElse);
			ifElse.addAttribute(new _kind("else"));
			body = ifElse;
		
			// if (prevPort != null) {
			// 	operation and = new operation();
			// 	body.addElement(and);
			// 	and.setAttributeList(new List<Attribute>().
			// 						 add(new _kind("$and")));
			// 	port andIn1 = new port();
			// 	and.addElement(andIn1);
			// 	andIn1.setAttributeList(new List<Attribute>().
			// 							add(new _dir("in")).
			// 							add(new source(prevPort)));
			// 	port andIn2 = new port();
			// 	and.addElement(andIn2);
			// 	andIn2.setAttributeList(new List<Attribute>().
			// 							add(new _dir("in")).
			// 							add(new source(port.name()+"_res")));
			// 	port andOut = new port();
			// 	and.addElement(andOut);
			// 	andOut.setAttributeList(new List<Attribute>().
			// 							add(new _dir("out")).
			// 							add(new size("1")).
			// 							add(new source(port.name()+"_res2")).
			// 							add(new _typeName("bool")));
			// 	prevPort = port.name()+"_res2";
			// } else {
			// 	prevPort = port.name()+"_res";
			// }
			portIx++;
		}

		// Attach new action scheduler to the tree
		getSpecification().getDesign().addElement(actionSchedule);
		return body;
	}

	// public void Element.addActionSchedule(module schedule) {}
	// public void Start.addActionSchedule(module schedule) {
	// 	actionScheduler().addActionSchedule(schedule);
	// }
	// public void module.addActionSchedule(module schedule) {
	// 	if (kind().equals("body") || kind().equals("else")) {
	// 		for (Element e : schedule.getActionSchedulerBody().getElements()) {
	// 			addElement(e);
	// 		} 
	// 	} else {
	// 		for ( Element e : getElements()) {
	// 			e.addActionSchedule(schedule);
	// 		}
	// 	}
	// }

	// syn module Element.getActionSchedulerBody() = null;
	// eq ComplexElement.getActionSchedulerBody() {
	// 	for (Element e : getElements()) {
	// 		if (e.getActionSchedulerBody() != null) {
	// 			return e.getActionSchedulerBody();
	// 		}
	// 	}
	// 	return null;
	// }
	// eq module.getActionSchedulerBody() {
	// 	if (kind().equals("body")) {
	// 		return this;
	// 	} 
	// 	return super.getActionSchedulerBody();
	// }

	public void module.addActorPhase(String phaseXlim) {
		ActorPhase ap = new ActorPhase();
		ap.setPhase(phaseXlim);
		addElement(ap);
	}
}

aspect ActorPhase {
	String ActorPhase.phase;
	public void ActorPhase.setPhase(String phase) {this.phase = phase;}
	public String ActorPhase.getPhase() {return phase;}

	public void ActorPhase.prettyPrint(String ind, PrintStream pStream) {
		pStream.print(phase);
	}
}

aspect Classification {
	ActionSchedule Start.actionSchedule;
	public void Start.setActionSchedule(ActionSchedule as) {
		actionSchedule = as;
	}
	public ActionSchedule Start.getActionSchedule() {
		return actionSchedule;
	}
	public ActionSchedule ASTNode.getActionSchedule() {
		return getParent().getActionSchedule();
	}

	// public LinkedList<Object> ASTNode.getActionList() {
	//   return getActionSchedule().getActionList();
	// }

	public LinkedList<Integer> actor_port.tokenPattern() {
		if (getActionSchedule().isStatic()) {			
			StaticActionSchedule sas = getActionSchedule().getStaticSchedule();
			System.out.println("schedules: "+getActionSchedule()+" "+ sas);
			System.out.println("hasInitialSchedule(): "+sas.hasInitialSchedule()+
							   "repeatsForever(): "+sas.repeatsForever());
			if (!sas.hasInitialSchedule() && sas.repeatsForever()) {
				int n = sas.getRepeatedSchedule().getNumberOfPhases();
				int i = 0;
				LinkedList<Integer> pattern = new LinkedList<Integer>();
				for (StaticPhase phase : sas.getPhases()) {
					PortSignature sig = phase.getPortSignature();
					boolean inPattern = false;
					for (XlimTopLevelPort port : sig.getPorts()) {
						if (port.getName().equals(name())) {
							inPattern = true;
							pattern.add(sig.getPortRate(port));
							System.out.println("portrate for "+name()+": "+
											   sig.getPortRate(port));
						}
					}
					if (!inPattern) {
						pattern.add(0);
					}
					if (++i == n) {
						break;
					}
				}
				System.out.println("port pattern: "+pattern);
				return pattern;
				// } catch (IllegalArgumentException e) {
				// 	// System.out.println(nameMap.values());
				// 	System.out.println(nameMap.keySet());
				// 	System.out.println(e.getMessage());
				// 	e.printStackTrace();
				// }
				// return phasePrinter;
			} else {
				System.out.println("Static schedule is not really static.");		   
			}		
		} else {
			System.out.println("Can not create port pattern for non-static actors.");
		}
		return new LinkedList<Integer>();
	}

	// public Iterable<StaticPhase> ASTNode.getPhases() {
	// 	return getActionSchedule().getStaticSchedule().getRepeatedSchedule().getPhases();
	// }

	PhasePrinter Start.phasePrinter;

	public PhasePrinter Start.getPhasePrinter() {
		if (phasePrinter != null) {
			System.out.println("PhasePrinter is cached");
			return phasePrinter;
		} else if (getActionSchedule().isStatic()) {			
			StaticActionSchedule sas = getActionSchedule().getStaticSchedule();
			System.out.println("schedules: "+getActionSchedule()+" "+ sas);
			if (!sas.hasInitialSchedule() && sas.repeatsForever()) {
				try {
					phasePrinter = 
						sas.getPhasePrinter(nameMap,
											new MergePhasePrinterPlugIn(portMap()));
					// phasePrinter = sas.getPhasePrinter(nameMap);
					System.out.println("*** portMap="+portMap);
				} catch (IllegalArgumentException e) {
					// System.out.println(nameMap.values());
					System.out.println(nameMap.keySet());
					System.out.println(e.getMessage());
					e.printStackTrace();
				}
				return phasePrinter;
			} else {
				System.out.println("Static schedule is not really static.");		   
			}
		} else {
			System.out.println("Can not create PhasePrinter for non-static actors.");
		}
		return null;
	}

}

aspect NameMap {
	HashMap<String,String> Start.nameMap = new HashMap<String,String>();
	
	syn HashMap<String,String> ASTNode.nameMap() = getParent().nameMap();
	eq Start.nameMap() = nameMap;
}

aspect PortMap {
	HashMap<String,String> Start.portMap = new HashMap<String,String>();
	
	syn HashMap<String,String> ASTNode.portMap() = getParent().portMap();
	eq Start.portMap() = portMap;
}

aspect Misc {
	void Start.mangleNames(String prefix) {
		getSpecification().getDesign().mangleNames(prefix);
	}
	// void design.mangleNames(String prefix) {
	// 	// System.out.println("* Mangling: "+name());
	// 	mangleNames(prefix+"_");
	// }
	
	void Element.mangleNames(String prefix) {}
	void Attribute.mangleNames(String prefix) {}
	void ComplexElement.mangleNames(String prefix) {
		for (Attribute a : getAttributes()) {
			a.mangleNames(prefix);
		}
		for (Element e : getElements()) {
			e.mangleNames(prefix);
		}
	}
	void design.mangleNames(String prefix) {
		for (Element e : getElements()) {
			e.mangleNames(prefix+"_");
		}
	}
	void type.mangleNames(String prefix) {
		for (Element e : getElements()) {
			e.mangleNames(prefix+"_");
		}
	}
	// void decision.mangleNames(String prefix) {
	// 	// System.out.println("* Mangling decision");
	// 	getAttrValue().setLITERAL(unfix(prefix+fix(getAttrValue().getLITERAL())));
	// }
	void _name.mangleNames(String prefix) {
		// System.out.println("* Mangling name");
		String origName = fix(getAttrValue().getLITERAL());
		String newName = prefix+origName;
		// System.out.println("Adding mapping: "+origName+" -> "+newName);
		nameMap().put(origName,newName);
		getAttrValue().setLITERAL(unfix(newName));
	}
	void _typeName.mangleNames(String prefix) {
		// System.out.println("* Mangling name");
		String origName = fix(getAttrValue().getLITERAL());
		if (origName.endsWith("typedef")) {
			String newName = prefix+origName;
			// System.out.println("Adding mapping: "+origName+" -> "+newName);
			nameMap().put(origName,newName);
			getAttrValue().setLITERAL(unfix(newName));
		}
	}
	void portName.mangleNames(String prefix) {
		// System.out.println("* Mangling portName");
		String origName = fix(getAttrValue().getLITERAL());
		String newName = prefix+origName;
		// System.out.println("Adding mapping: "+origName+" -> "+newName);
		nameMap().put(origName,newName);
		getAttrValue().setLITERAL(unfix(newName));
	}
	void operation.mangleNames(String prefix) {
		if (!kind().equals("var_ref")) {
			super.mangleNames(prefix);
		} else {
			for (Element e : getElements()) {
				e.mangleNames(prefix);
			}
		}
	}
	void source.mangleNames(String prefix) {
		// System.out.println("* Mangling source");
		String attr = getAttrValue().getLITERAL();
		if (attr.contains("pinAvail") || attr.equals("currentState")) {
			String origName = fix(getAttrValue().getLITERAL());
			String newName = prefix+origName;
			// System.out.println("Adding mapping: "+origName+" -> "+newName);
			nameMap().put(origName,newName);
			getAttrValue().setLITERAL(unfix(newName));
			// getAttrValue().setLITERAL(unfix(prefix+fix(getAttrValue().getLITERAL())));
		} 
	}
	void stateVar.mangleNames(String prefix) {
		if (name().equals("currentState")) {
			super.mangleNames(prefix);			
		}
	}
	void target.mangleNames(String prefix) {
		// System.out.println("* Mangling target");
		AttrValue attr = getAttrValue();
		if (attr.getLITERAL().contains("actionAtLine")) {
			String origName = fix(getAttrValue().getLITERAL());
			String newName = prefix+origName;
			// System.out.println("Adding mapping: "+origName+" -> "+newName);
			nameMap().put(origName,newName);
			getAttrValue().setLITERAL(unfix(newName));
			// getAttrValue().setLITERAL(unfix(prefix+fix(getAttrValue().getLITERAL())));
		}
	}
	void valuePar.mangleNames(String prefix) {}
	void typePar.mangleNames(String prefix) {}

	// void Element.manglePinAvail(String portName, String actorName) {}
	// void Attribute.manglePinAvail(String portName, String actorName) {}
	// void ComplexElement.manglePinAvail(String portName, String actorName) {
	// 	for (Attribute a : getAttributes()) {
	// 		a.manglePinAvail(portName, actorName);
	// 	}
	// 	for (Element e : getElements()) {
	// 		e.manglePinAvail(portName, actorName);
	// 	}
	// }
	// void source.manglePinAvail(String portName, String actorName) {
	// 	AttrValue attr = getAttrValue();
	// 	System.out.println("Searching for "+portName+" in "+fix(attr.getLITERAL()));
	// 	if (attr.getLITERAL().contains(actorName) && 
	// 		attr.getLITERAL().contains("pinAvail")) {
	// 		attr.setLITERAL(unfix(actorName+"_"+fix(attr.getLITERAL())));
	// 	}
	// }
	
	
}

aspect Rewrites {
	boolean ComplexElement.remove_me = false;

	rewrite actor_port {
		when (remove_me) to ComplexElement {
			return new ComplexElement();
		}
	}
	rewrite note {
		when (remove_me) to ComplexElement {
			return new ComplexElement();
		}
	}
}
 