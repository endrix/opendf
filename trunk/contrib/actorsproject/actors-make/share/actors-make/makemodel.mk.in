# makemodel.mk - elaborate, compile and link a CAL network/model
#                Assumed to be used in sub-make from main Makefile

# delete the built-in suffixes to avoid surprises
.SUFFIXES:   

ifeq "$(strip $(MODEL))" ""
  $(error MODEL not set)
endif

EXE?=$(MODEL)
srcdir?=.

.PHONY: all
all: $(EXE)

# Dependences of MODEL (re-generated if necessary)
include $(MODEL).depend

# Default definitions of tools and directories
include @datadir@/actors-make/definitions.mk

#
# Set CFLAGS, CPPFLAGS, LDFLAGS and LDLIBS
#

# Include path goes into CPPFLAGS (C pre-processor)
override CPPFLAGS += "-I$(ACTORS_INCLUDE)"

ifdef DEBUG
override CPPFLAGS += -DDEBUG
endif

override LDLIBS  += -lactors-rts -lpthread

ifdef STATIC
override LDFLAGS += -static -L$(ACTORS_LIB)
else
override LDFLAGS += -L$(ACTORS_LIB) -Wl,-rpath=$(ACTORS_LIB)
endif

ifdef PROFILE
override CFLAGS += -pg -fno-omit-frame-pointer
override LDFLAGS += -pg
endif

ifdef GTK
override LDLIBS += `gtk-config --libs`
endif

ifdef ARM
ARMDIR=$(HOME)/work/actor/arm/usr/local
override  LDLIBS += -L$(ARMDIR)/lib -lxml2 -lz
else
override  LDLIBS += `xml2-config --libs`
endif

ifdef SDL
ifdef ARM
override LDLIBS  += -L$(ARMDIR)/lib -lSDL -lts
else
override LDLIBS  += `sdl-config --libs`
endif
endif

ifdef MERGE
override MODEL_DEPEND = $(MODEL)_new.xdf 
else
override MODEL_DEPEND = $(MODEL).xdf
endif

ifdef TRACE
override CFLAGS += -DTRACE
endif

#
# We get the actor instances from the CALML-files 
# (we have to do elaboration first, to get *.calml).
#

ACTOR_C_FILES=$(XLIM_FILES:.xlim=.c)
PAR_FILES=$(XLIM_FILES:.xlim=.par)
EXTRA_OBJECTS=$(C_FILES:.c=.o)
OBJECTS=$(ACTOR_C_FILES:.c=.o) $(EXTRA_OBJECTS) $(MODEL).o

$(EXE): $(OBJECTS)
	$(CC) -g $^ $(LDFLAGS) $(LDLIBS) -o $@

#
# Rule for additional C files
#

$(EXTRA_OBJECTS) : %.o : $(srcdir)/%.c
	$(CC) -c -O3 -Wall $(CPPFLAGS) $(CFLAGS) -o $@ $<


#
# Implicit rules .xlim -> .c -> .o
#

%.o : %.c
	$(CC) -c -O3 -Wall $(CPPFLAGS) $(CFLAGS) -o $@ $<

# Preserve generated C files (make otherwise considers them temporary files)
.SECONDARY: $(ACTOR_C_FILES)

%.c : %.xlim
	$(XLIM2C) $< $@

#
# Generate network configuration from .xdf
#
$(MODEL).c: $(MODEL_DEPEND)
	$(SAXON8) -o $@ $< $(GENERATECONFIG_XSL)

#
# If enabled, run model compiler
#
$(MODEL)_new.xdf: $(MODEL).xdf $(XLIM_FILES)
	$(MODELCOMPILER) $(MODEL).xdf
	@cp $(MODEL)_new.xdf $(MODEL).xdf
	@touch $(MODEL).timestamp

#
# Generate .xlim from .cal and .par
# (dependence of .xlim on .cal and .par is given by $(MODEL).depend)
#
$(XLIM_FILES): %.xlim :
	$(SSAGENERATOR) -mp "$(srcdir)" `cat $(basename $(@F)).par` $(<F)
	mv $(basename $(<F)).xlim $@


#
# Generate parameter (.par) files from $(MODEL).xdf
# (dependence of .par files on $(MODEL).xdf via $(MODEL).timestamp)
#

$(PAR_FILES): $(MODEL).timestamp

$(MODEL).timestamp: $(MODEL).xdf
	$(XDF2PAR) $<
	@touch $@

#
# Generate dependences from .xdf
#
$(MODEL).depend: $(MODEL).xdf
	$(SAXON8) -o $@ $< $(XDF2DEPEND_XSL)


#
# Generate xdf from network (nl) files
# (dependence of $(MODEL).xdf on network (.nl) files is
#  given in $(MODEL).depend). 
#
$(MODEL).xdf: $(srcdir)/$(MODEL).nl $(SUB_NETWORKS)
	$(ELABORATOR) -mp $(srcdir) $(MODEL)

.PHONY: clean

# C files to clean (filter out C_FILES in case srcdir is current directory)
CLEAN_C_FILES=$(filter-out $(C_FILES),$(wildcard *.c))

clean:
	rm -f $(EXE) $(MODEL).xdf $(MODEL).depend $(MODEL).timestamp \
            *.par *.xlim $(CLEAN_C_FILES) *.o
