/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2006, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/

// BlockExpand.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)

import all caltrop.lib.BitOps;

// Insert zero coefficients into a sparsely encoded block

actor BlockExpand (
    int SAMPLE_COUNT_SZ,
    int SAMPLE_SZ
 ) int(size=SAMPLE_COUNT_SZ) RUN, int(size=SAMPLE_SZ) VALUE, bool LAST ==> int(size=SAMPLE_SZ) OUT :

  int BLOCK_SIZE = 64;

  int(size=SAMPLE_COUNT_SZ) count :=  0;  // Index of next sample to be transmitted
  int(size=SAMPLE_COUNT_SZ) run := -1;    // Index offset of next sample decoded (-1 means no sample pending)
  int(size=SAMPLE_SZ) next_value;         // Value of next non-zero to be transmitted
  bool last := false;                     // Next sample is the last non-zero.

  // End of block - reset counters
  done: action ==>
  guard
    count = BLOCK_SIZE
  do
    count := 0;
    run := -1;
    last := false;
  end

  // When run count is zero, transmit the value
  write.value: action ==> OUT:[ next_value ]
  guard
    run = 0
  do
    run := -1;
    count := count + 1;
  end

  // Stuff zeros before the sample value, and after as well if it was the last
  write.zero: action ==> OUT:[ 0 ]
  guard
    run > 0 or last
  do
    run := run - 1;
    count := count + 1;
  end

  // Read actions are all lower priority than write actions

  // Read and write the sample out immediately if RUN = 0
  read.immediate: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==> OUT:[ v ]
  guard
    r = 0
  do
    last := l;
    count := count + 1;
  end

  // Write out a zero sample
  read.save: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==> OUT:[ 0 ]
  do
    run := r - 1;
    next_value := v;
    last := l;
    count := count + 1;
  end

  priority
    done > read;
    done > write;
    write > read;
    read.immediate > read.save;
    write.value > write.zero;
  end

end