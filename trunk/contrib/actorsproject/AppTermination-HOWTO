How to Terminate the application by using active actor concept
============================================================

1. Introduction
For cpu bounded application, there is no particular requirements
as the runtime terminates the application when all the actors
are idle and no firings after a complete run. However this wont work for
the I/O or control bounded application, in which the data flow is 
driven or controlled by I/O. In this case, the application should not be
terminated even if all the actors in idle state. A concept of active actor
is introduced so the runtime can properly handle the termination of 
the application.

2. Active actor
The I/O or control actors need to be marked as the active actors. This 
can be done by passing the param activeMode in the .nl file for the
actors:

MyActor=myActor(activeMode=1);

3. Active actor termination
In case the active actor terminats, the actor's action scheduler
must exit with the code:

exitCode=EXITCODE_TERMINATE; goto action_scheduler_exit;

4. General implementatin
Normally the active actor creates a thread in the constructor. This
thread is responsible for obtaining I/O or control data, listening 
to a specific port or waiting for keyboard input, for example. 
There should be a comminucation mechanism implemented so the 
thread can: 
 - passing data or control signal over to the active actor scheduler
 - wake up the active actor thread in case it is sleeping
