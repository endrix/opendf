// MPEG4_algo_Inversequant.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

// MPEG-4 inverse quantization function

import all caltrop.lib.BitOps;

actor MPEG4_algo_Inversequant ( int QUANT_SZ, int SAMPLE_SZ ) int(size=SAMPLE_SZ) DC, int(size=SAMPLE_SZ) AC, int(size=QUANT_SZ) QP ==> int(size=SAMPLE_SZ) OUT :

  function saturate( x )
    var
      bool minus = x < -2048,
      bool plus  = x >  2047 :
    if minus then -2048 else if plus then 2047 else x end end
  end

  int(size=7) count;
  int(size=QUANT_SZ) quant;
  int(size=2) round;

  get_qp: action QP:[ q ], DC:[i] ==> OUT:[i]
  do
    quant := q;
    round := bitxor( bitand( q, 1 ), 1 );
    count := 0;
  end

  done: action ==>
  guard count = 63
  end

  function abs( x ) :
    if x < 0 then - x else x end
  end

  ac: action AC:[i] ==> OUT:[ saturate( o )]
  var
    int(size=SAMPLE_SZ) v = ( quant * ( lshift( abs(i), 1) + 1) ) - round,
    int(size=SAMPLE_SZ) o = if i = 0 then 0 else if i < 0 then -v else v end end
  do
    count := count + 1;
  end

  schedule fsm start :
    start  ( get_qp  ) --> ac;
    ac     ( done    ) --> start;
    ac     ( ac      ) --> ac;
  end

  priority
    done > ac;
  end

end