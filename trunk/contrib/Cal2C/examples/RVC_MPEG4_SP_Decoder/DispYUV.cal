// DispYUV.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
// Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
//
// Copyright (c) 2004-2006 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

import ptolemy.media.Picture;
import javax.swing.JFrame;
import all caltrop.lib.BitOps;
import java.lang.System;

actor DispYUV [int] (string title,string file, int width,
        int height, int doCompare ) list[int] B ==>  :  // JWJ: List should be list

  lastTime := 0;

  x := 0;
  y := 0;
  e := 0;
  fcount := 1;
  compare = doCompare;

  picture = Picture( width, height);
  frame = JFrame( title );

  fd = openFile(file);
  int nextc := readByte( fd );

  int ysize   = width * height;
  int uvsize  = rshift(ysize,2);
  int uvwidth = rshift(width,1);

  function initList( v, size ) :
    [ v : for i in Integers( 1, size ) ]
  end

  list[ int ] yframe := initList( 0, ysize  );  // JWJ: ditto
  list[ int ] uframe := initList( 0, uvsize );
  list[ int ] vframe := initList( 0, uvsize );

  procedure readFrame()
  var
    int i = 0
  begin
    while i < ysize do
      yframe [ i ] :=  nextc ;
      nextc := readByte( fd );
      i := i + 1;
    end
    i := 0;
    while i < uvsize do
      uframe [ i ] := nextc ;
      nextc := readByte( fd );
      i := i + 1;
    end
    i := 0;
    while i < uvsize do
      vframe [ i ] := nextc ;
      nextc := readByte( fd );
      i := i + 1;
    end
    x := 0;
    y := 0;
  end

  initialize ==>
  do
    frame.getContentPane().add(picture);
    frame.pack();
    frame.setVisible(true);
    frame.invalidate();
    frame.repaint();
    readFrame();
    lastTime :=  currentSystemTime();
    picture.displayImage();
    //readFrame();
  end
/*
  function yuv2rgb( y, u, v ) :
    [ rshift( (76306*(y-16))+32768+(104597*(v-128))                , 16),
      rshift( (76306*(y-16))+32768-( 25675*(u-128))-(53279*(v-128)), 16),
      rshift( (76306*(y-16))+32768+(132201*(u-128))                , 16)
    ]
  end
*/
  function Nuv( Ny, n ) :
      bitand( rshift( Ny, 1), 3 )
    + ( if (n = 0 or n = 2) then 0 else 4 end )
    + ( 8 * rshift( Ny, 4 ) )
    + ( if (n = 0 or n = 1) then 0 else 32 end )
  end
/*
  function blockrgb( by, bu, bv, n ) :
    [
      yuv2rgb( by.get(i), bu.get( Nuv( i, n) ), bv.get( Nuv( i, n) ) ) : for i in Integers( 0, 63 )
    ]
  end
*/
  action B:[ macroblock ] repeat 6 * 64 ==>
  var
    y0 = [ macroblock[0   +i] : for i in Integers(  0,  63) ],
    y1 = [ macroblock[1*64+i] : for i in Integers(  0,  63) ],
    y2 = [ macroblock[2*64+i] : for i in Integers(  0,  63) ],
    y3 = [ macroblock[3*64+i] : for i in Integers(  0,  63) ],
    u  = [ macroblock[4*64+i] : for i in Integers(  0,  63) ],
    v  = [ macroblock[5*64+i] : for i in Integers(  0,  63) ],
    int n = 0,
    int xx,
    int yy,
    int py0,
    int py1,
    int py2,
    int py3,
    int pu,
    int pv,
    int ref,
    int uvx,
    int uvy,
    int r,
    int g,
    int b,
    int t,
    int tu,
    int tv,
    int nuv,

    thisTime
  do
    // Display macro block
    while n < 64 do
      xx := bitand( n, 7 );
      yy := rshift( n, 3 );
      uvx := rshift(x,1) + xx;
      uvy := rshift(y,1) + yy;
      xx := xx + x;
      yy := yy + y;
      py0 := y0 [n];
      py1 := y1 [n];
      py2 := y2 [n];
      py3 := y3 [n];
      pu  :=  u [n];
      pv  :=  v [n];

      t := (76306*(py0-16))+32768;
      nuv := Nuv( n, 0 );
      tu := u [ nuv ];
      tv := v [ nuv ];
      r := rshift( t+(104597*(tv-128)), 16);
      g := rshift( t-((25675*(tu-128))+(53279*(tv-128))), 16);
      b := rshift( t+(132201*(tu-128)), 16);
      picture.setPixel( yy, xx, r, g, b );

      t := (76306*(py1-16))+32768;
      nuv := Nuv( n, 1 );
      tu := u [ nuv ];
      tv := v [ nuv ];
      r := rshift( t+(104597*(tv-128)), 16);
      g := rshift( t-((25675*(tu-128))+(53279*(tv-128))), 16);
      b := rshift( t+(132201*(tu-128)), 16);
      picture.setPixel( yy, xx+8, r, g, b );

      t := (76306*(py2-16))+32768;
      nuv := Nuv( n, 2 );
      tu := u [ nuv ];
      tv := v [ nuv ];
      r := rshift( t+(104597*(tv-128)), 16);
      g := rshift( t-((25675*(tu-128))+(53279*(tv-128))), 16);
      b := rshift( t+(132201*(tu-128)), 16);
      picture.setPixel( yy+8, xx, r, g, b );

      t := (76306*(py3-16))+32768;
      nuv := Nuv( n, 3 );
      tu := u [ nuv ];
      tv := v [ nuv ];
      r := rshift( t+(104597*(tv-128)), 16);
      g := rshift( t-((25675*(tu-128))+(53279*(tv-128))), 16);
      b := rshift( t+(132201*(tu-128)), 16);
      picture.setPixel( yy+8, xx+8, r, g, b );

      if compare = 1 then
        // test Y values
        ref := yframe [ (yy*width) + xx ];
        if py0 != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][y0]   got "+py0+", expected "+ref+" at n="+n);
        end
        ref := yframe [ (yy*width) + xx + 8];
        if py1 != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][y1]   got "+py1+", expected "+ref+" at n="+n);
        end
        ref := yframe [ ((yy+8)*width) + xx ];
        if py2 != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][y2]   got "+py2+", expected "+ref+" at n="+n);
        end
        ref := yframe [ ((yy+8)*width) + xx + 8 ];
        if py3 != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][y3]   got "+py3+", expected "+ref+" at n="+n);
        end

        // test UV values
        ref := uframe [ (uvy*uvwidth) + uvx ];
        if pu != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][u ]   got "+pu+", expected "+ref+" at n="+n);
        end
        ref := vframe [ (uvy*uvwidth) + uvx ];
        if pv != ref then
          e := e + 1;
          println("  error in frame "+fcount+" ["+(x/16)+"]["+(y/16)+
                  "][v ]   got "+pv+", expected "+ref+" at n="+n);
        end
        if e > 100 then
          compare := 0;
        end
      end

      n := n + 1;
    end
    picture.displayImage();

    // Advance to next MB position
    x := x + 16;
    if x >= width then
      x := 0;
      y := y + 16;

      if y >= height then
if compare = 1 then
        thisTime := currentSystemTime();
        println("Frame "+fcount+(if e = 0 then " OK" else (" had "+e+" errors") end) + " time: " + (thisTime - lastTime) + "ms");
       lastTime := thisTime;
end
        e := 0;
        fcount := fcount + 1;
        y := 0;
        readFrame();
      end
    end
  end

end