#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_DCRinvpred_luma_16x16.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_DCRinvpred_luma_16x16_variables {
   int BUF_SIZE ;
   int scaler ;
   int dc_pred ;
   int is_signed ;
   int comp ;
   int round ;
   int QP ;
   int dc_val ;
   int ptr ;
   int dc_buf[492] ;
   int SCALER_SZ ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_advance(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ) ;
int MPEG4_algo_DCRinvpred_luma_16x16_function_abs(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                  int x ) ;
int MPEG4_algo_DCRinvpred_luma_16x16_function_dc_scaler(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ) ;
int MPEG4_algo_DCRinvpred_luma_16x16_function_saturate(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                       int x ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_inter(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                      int dc ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_intra(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                      int dc ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                        int cmd , int *AC_PRED_DIR ,
                                                        int *PTR , int *SIGNED , int *QUANT ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                     int cmd , int a , int b , int c ,
                                                     int *PTR , int *AC_PRED_DIR ,
                                                     int *SIGNED , int *QUANT ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                                     int cmd , int *AC_PRED_DIR ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_sat(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                          int *QF_DC ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_skip(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                           int x ) ;
void MPEG4_algo_DCRinvpred_luma_16x16_start(struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ,
                                            int cmd , int *AC_PRED_DIR ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_DCRinvpred_luma_16x16::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _token_5 ;
  int _token_6 ;
  int _token_7 ;
  int _token_8 ;
  int _out_1 ;
  int _out_2 ;
  int _out_3 ;
  int _out_4 ;
  int _token_9 ;
  int _out_5 ;
  int _token_10 ;
  int _out_6 ;
  int _out_7 ;
  int _out_8 ;
  int _out_9 ;
  int _token_11 ;
  int _out_10 ;
  int _out_11 ;
  int _call_25 ;
  int _call_26 ;
  int _call_27 ;
  int _call_28 ;
  int _call_29 ;
  int _call_30 ;
  int _call_31 ;
  int _call_32 ;
  int _call_33 ;
  int _call_34 ;
  int _call_35 ;
  struct MPEG4_algo_DCRinvpred_luma_16x16_variables *_actor_variables ;
  int k ;

  {
  _actor_variables = (struct MPEG4_algo_DCRinvpred_luma_16x16_variables *)malloc(2008);
  _actor_variables->BUF_SIZE = 492;
  _actor_variables->SCALER_SZ = 7;
  _actor_variables->comp = 0;
  k = 0;
  while (k < 492) {
    _actor_variables->dc_buf[1 * k + 0] = 1024;
    k ++;
  }
  _actor_variables->ptr = 4;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_start: get from btype\n");
      _call_25 = btype->get();
      _token_11 = _call_25;
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_start: got %i from btype\n",
                    _token_11);
      MPEG4_algo_DCRinvpred_luma_16x16_start(_actor_variables, _token_11, & _out_10);
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_start: put value %i to AC_PRED_DIR\n",
                    _out_10);
      AC_PRED_DIR->put(_out_10);
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_start: put to AC_PRED_DIR OK\n");
      fsm_state = 4;
    } else {
      if ((btype->peek() & 512) != 0 && (btype->peek() & 2) != 0) {
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: get from btype\n");
        _call_26 = btype->get();
        _token_10 = _call_26;
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: got %i from btype\n",
                      _token_10);
        MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac(_actor_variables, _token_10,
                                                           & _out_6, & _out_7, & _out_8,
                                                           & _out_9);
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put value %i to AC_PRED_DIR\n",
                      _out_6);
        AC_PRED_DIR->put(_out_6);
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put to AC_PRED_DIR OK\n");
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put value %i to PTR\n",
                      _out_7);
        PTR->put(_out_7);
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put to PTR OK\n");
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put value %i to SIGNED\n",
                      _out_8);
        SIGNED->put(_out_8);
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put to SIGNED OK\n");
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put value %i to QUANT\n",
                      _out_9);
        QUANT->put(_out_9);
        libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_inter_ac: put to QUANT OK\n");
        fsm_state = 5;
      } else {
        if ((btype->peek() & 1024) == 0) {
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other: get from btype\n");
          _call_27 = btype->get();
          _token_9 = _call_27;
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other: got %i from btype\n",
                        _token_9);
          MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other(_actor_variables, _token_9,
                                                          & _out_5);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other: put value %i to AC_PRED_DIR\n",
                        _out_5);
          AC_PRED_DIR->put(_out_5);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_other: put to AC_PRED_DIR OK\n");
          fsm_state = 2;
        } else {
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: get from btype\n");
          _call_28 = btype->get();
          _token_5 = _call_28;
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: got %i from btype\n",
                        _token_5);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: get from A\n");
          _call_29 = A->get();
          _token_6 = _call_29;
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: got %i from A\n",
                        _token_6);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: get from B\n");
          _call_30 = B->get();
          _token_7 = _call_30;
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: got %i from B\n",
                        _token_7);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: get from C\n");
          _call_31 = C->get();
          _token_8 = _call_31;
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: got %i from C\n",
                        _token_8);
          MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra(_actor_variables, _token_5,
                                                          _token_6, _token_7, _token_8,
                                                          & _out_1, & _out_2, & _out_3,
                                                          & _out_4);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put value %i to PTR\n",
                        _out_1);
          PTR->put(_out_1);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put to PTR OK\n");
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put value %i to AC_PRED_DIR\n",
                        _out_2);
          AC_PRED_DIR->put(_out_2);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put to AC_PRED_DIR OK\n");
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put value %i to SIGNED\n",
                        _out_3);
          SIGNED->put(_out_3);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put to SIGNED OK\n");
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put value %i to QUANT\n",
                        _out_4);
          QUANT->put(_out_4);
          libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_read_dot_intra: put to QUANT OK\n");
          fsm_state = 7;
        }
      }
    }
    break;
    }
    case 2: 
    {
    if (1) {
      MPEG4_algo_DCRinvpred_luma_16x16_advance(_actor_variables);
      fsm_state = 1;
    }
    break;
    }
    case 3: 
    {
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_skip: get from btype\n");
    _call_32 = btype->get();
    _token_1 = _call_32;
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_skip: got %i from btype\n",
                  _token_1);
    MPEG4_algo_DCRinvpred_luma_16x16_skip(_actor_variables, _token_1);
    fsm_state = 1;
    break;
    }
    case 4: 
    {
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_skip: get from btype\n");
    _call_33 = btype->get();
    _token_2 = _call_33;
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_skip: got %i from btype\n",
                  _token_2);
    MPEG4_algo_DCRinvpred_luma_16x16_skip(_actor_variables, _token_2);
    fsm_state = 3;
    break;
    }
    case 5: 
    {
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_inter: get from QFS_DC\n");
    _call_34 = QFS_DC->get();
    _token_3 = _call_34;
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_inter: got %i from QFS_DC\n",
                  _token_3);
    MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_inter(_actor_variables, _token_3);
    fsm_state = 6;
    break;
    }
    case 6: 
    {
    if (1) {
      MPEG4_algo_DCRinvpred_luma_16x16_sat(_actor_variables, & _out_11);
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_sat: put value %i to QF_DC\n",
                    _out_11);
      QF_DC->put(_out_11);
      libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_sat: put to QF_DC OK\n");
      fsm_state = 2;
    }
    break;
    }
    case 7: 
    {
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_intra: get from QFS_DC\n");
    _call_35 = QFS_DC->get();
    _token_4 = _call_35;
    libcal_printf("action MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_intra: got %i from QFS_DC\n",
                  _token_4);
    MPEG4_algo_DCRinvpred_luma_16x16_getdc_dot_intra(_actor_variables, _token_4);
    fsm_state = 6;
    break;
    }
    }
  }
}
}

}
