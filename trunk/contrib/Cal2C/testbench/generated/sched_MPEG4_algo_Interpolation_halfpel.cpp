#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_Interpolation_halfpel.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_Interpolation_halfpel_variables {
   int x ;
   int y ;
   int round ;
   int flags ;
   int d0 ;
   int d1 ;
   int d2 ;
   int d3 ;
   int d4 ;
   int d5 ;
   int d6 ;
   int d7 ;
   int d8 ;
   int d9 ;
   int _CAL_tokenMonitor ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
int MPEG4_algo_Interpolation_halfpel_done(struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ) ;
int MPEG4_algo_Interpolation_halfpel_function_compensate(struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ,
                                                         int p00 , int p10 , int p01 ,
                                                         int p11 ) ;
void MPEG4_algo_Interpolation_halfpel_other(struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ,
                                            int d , int *MOT ) ;
void MPEG4_algo_Interpolation_halfpel_row_col_0(struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ,
                                                int d ) ;
void MPEG4_algo_Interpolation_halfpel_start(struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ,
                                            int f ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_Interpolation_halfpel::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _out_1 ;
  int _token_2 ;
  int _token_3 ;
  int _call_7 ;
  int _call_8 ;
  int _call_9 ;
  int _call_10 ;
  struct MPEG4_algo_Interpolation_halfpel_variables *_actor_variables ;

  {
  _actor_variables = (struct MPEG4_algo_Interpolation_halfpel_variables *)malloc(60);
  _actor_variables->_CAL_tokenMonitor = 1;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    libcal_printf("action MPEG4_algo_Interpolation_halfpel_start: get from halfpel\n");
    _call_7 = halfpel->get();
    _token_3 = _call_7;
    libcal_printf("action MPEG4_algo_Interpolation_halfpel_start: got %i from halfpel\n",
                  _token_3);
    MPEG4_algo_Interpolation_halfpel_start(_actor_variables, _token_3);
    fsm_state = 2;
    break;
    }
    case 2: 
    {
    if (_actor_variables->y == 9) {
      _call_8 = MPEG4_algo_Interpolation_halfpel_done(_actor_variables);
      fsm_state = 1;
    } else {
      if (_actor_variables->x == 0 || _actor_variables->y == 0) {
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_row_col_0: get from RD\n");
        _call_9 = RD->get();
        _token_2 = _call_9;
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_row_col_0: got %i from RD\n",
                      _token_2);
        MPEG4_algo_Interpolation_halfpel_row_col_0(_actor_variables, _token_2);
        fsm_state = 2;
      } else {
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_other: get from RD\n");
        _call_10 = RD->get();
        _token_1 = _call_10;
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_other: got %i from RD\n",
                      _token_1);
        MPEG4_algo_Interpolation_halfpel_other(_actor_variables, _token_1, & _out_1);
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_other: put value %i to MOT\n",
                      _out_1);
        MOT->put(_out_1);
        libcal_printf("action MPEG4_algo_Interpolation_halfpel_other: put to MOT OK\n");
        fsm_state = 2;
      }
    }
    break;
    }
    }
  }
}
}

}
