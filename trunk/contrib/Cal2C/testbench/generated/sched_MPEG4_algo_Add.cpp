#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_Add.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_Add_variables {
   int count ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_algo_Add_cmd_dot_motionOnly(struct MPEG4_algo_Add_variables *_actor_variables ,
                                       int cmd ) ;
void MPEG4_algo_Add_cmd_dot_newVop(struct MPEG4_algo_Add_variables *_actor_variables ,
                                   int cmd ) ;
void MPEG4_algo_Add_cmd_dot_other(struct MPEG4_algo_Add_variables *_actor_variables ,
                                  int cmd ) ;
void MPEG4_algo_Add_cmd_dot_textureOnly(struct MPEG4_algo_Add_variables *_actor_variables ,
                                        int cmd ) ;
void MPEG4_algo_Add_combine(struct MPEG4_algo_Add_variables *_actor_variables , int mot ,
                            int tex , int *VID ) ;
void MPEG4_algo_Add_done(struct MPEG4_algo_Add_variables *_actor_variables ) ;
void MPEG4_algo_Add_motion(struct MPEG4_algo_Add_variables *_actor_variables , int mot ,
                           int *VID ) ;
void MPEG4_algo_Add_texture(struct MPEG4_algo_Add_variables *_actor_variables , int tex ,
                            int *VID ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_Add::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _token_5 ;
  int _token_6 ;
  int _out_1 ;
  int _token_7 ;
  int _out_2 ;
  int _token_8 ;
  int _token_9 ;
  int _token_10 ;
  int _out_3 ;
  int _call_16 ;
  int _call_17 ;
  int _call_18 ;
  int _call_19 ;
  int _call_20 ;
  int _call_21 ;
  int _call_22 ;
  int _call_23 ;
  int _call_24 ;
  int _call_25 ;
  struct MPEG4_algo_Add_variables *_actor_variables ;

  {
  _actor_variables = (struct MPEG4_algo_Add_variables *)malloc(4);
  _actor_variables->count = 0;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MPEG4_algo_Add_cmd_dot_newVop: get from btype\n");
      _call_16 = btype->get();
      _token_4 = _call_16;
      libcal_printf("action MPEG4_algo_Add_cmd_dot_newVop: got %i from btype\n", _token_4);
      MPEG4_algo_Add_cmd_dot_newVop(_actor_variables, _token_4);
      fsm_state = 5;
    } else {
      if ((btype->peek() & 1024) != 0) {
        libcal_printf("action MPEG4_algo_Add_cmd_dot_textureOnly: get from btype\n");
        _call_17 = btype->get();
        _token_3 = _call_17;
        libcal_printf("action MPEG4_algo_Add_cmd_dot_textureOnly: got %i from btype\n",
                      _token_3);
        MPEG4_algo_Add_cmd_dot_textureOnly(_actor_variables, _token_3);
        fsm_state = 4;
      } else {
        if ((btype->peek() & 2) == 0) {
          libcal_printf("action MPEG4_algo_Add_cmd_dot_motionOnly: get from btype\n");
          _call_18 = btype->get();
          _token_2 = _call_18;
          libcal_printf("action MPEG4_algo_Add_cmd_dot_motionOnly: got %i from btype\n",
                        _token_2);
          MPEG4_algo_Add_cmd_dot_motionOnly(_actor_variables, _token_2);
          fsm_state = 3;
        } else {
          libcal_printf("action MPEG4_algo_Add_cmd_dot_other: get from btype\n");
          _call_19 = btype->get();
          _token_1 = _call_19;
          libcal_printf("action MPEG4_algo_Add_cmd_dot_other: got %i from btype\n",
                        _token_1);
          MPEG4_algo_Add_cmd_dot_other(_actor_variables, _token_1);
          fsm_state = 2;
        }
      }
    }
    break;
    }
    case 2: 
    {
    if (_actor_variables->count == 64) {
      MPEG4_algo_Add_done(_actor_variables);
      fsm_state = 1;
    } else {
      libcal_printf("action MPEG4_algo_Add_combine: get from MOT\n");
      _call_20 = MOT->get();
      _token_5 = _call_20;
      libcal_printf("action MPEG4_algo_Add_combine: got %i from MOT\n", _token_5);
      libcal_printf("action MPEG4_algo_Add_combine: get from TEX\n");
      _call_21 = TEX->get();
      _token_6 = _call_21;
      libcal_printf("action MPEG4_algo_Add_combine: got %i from TEX\n", _token_6);
      MPEG4_algo_Add_combine(_actor_variables, _token_5, _token_6, & _out_1);
      libcal_printf("action MPEG4_algo_Add_combine: put value %i to VID\n", _out_1);
      VID->put(_out_1);
      libcal_printf("action MPEG4_algo_Add_combine: put to VID OK\n");
      fsm_state = 2;
    }
    break;
    }
    case 3: 
    {
    if (_actor_variables->count == 64) {
      MPEG4_algo_Add_done(_actor_variables);
      fsm_state = 1;
    } else {
      libcal_printf("action MPEG4_algo_Add_motion: get from MOT\n");
      _call_22 = MOT->get();
      _token_7 = _call_22;
      libcal_printf("action MPEG4_algo_Add_motion: got %i from MOT\n", _token_7);
      MPEG4_algo_Add_motion(_actor_variables, _token_7, & _out_2);
      libcal_printf("action MPEG4_algo_Add_motion: put value %i to VID\n", _out_2);
      VID->put(_out_2);
      libcal_printf("action MPEG4_algo_Add_motion: put to VID OK\n");
      fsm_state = 3;
    }
    break;
    }
    case 4: 
    {
    if (_actor_variables->count == 64) {
      MPEG4_algo_Add_done(_actor_variables);
      fsm_state = 1;
    } else {
      libcal_printf("action MPEG4_algo_Add_texture: get from TEX\n");
      _call_23 = TEX->get();
      _token_10 = _call_23;
      libcal_printf("action MPEG4_algo_Add_texture: got %i from TEX\n", _token_10);
      MPEG4_algo_Add_texture(_actor_variables, _token_10, & _out_3);
      libcal_printf("action MPEG4_algo_Add_texture: put value %i to VID\n", _out_3);
      VID->put(_out_3);
      libcal_printf("action MPEG4_algo_Add_texture: put to VID OK\n");
      fsm_state = 4;
    }
    break;
    }
    case 5: 
    {
    libcal_printf("action MPEG4_algo_Add_cmd_dot_other: get from btype\n");
    _call_24 = btype->get();
    _token_9 = _call_24;
    libcal_printf("action MPEG4_algo_Add_cmd_dot_other: got %i from btype\n", _token_9);
    MPEG4_algo_Add_cmd_dot_other(_actor_variables, _token_9);
    fsm_state = 6;
    break;
    }
    case 6: 
    {
    libcal_printf("action MPEG4_algo_Add_cmd_dot_other: get from btype\n");
    _call_25 = btype->get();
    _token_8 = _call_25;
    libcal_printf("action MPEG4_algo_Add_cmd_dot_other: got %i from btype\n", _token_8);
    MPEG4_algo_Add_cmd_dot_other(_actor_variables, _token_8);
    fsm_state = 1;
    break;
    }
    }
  }
}
}

}
