#include <systemc.h>
#include <tlm.h>
#include "sched_MVReconstruct.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MVReconstruct_variables {
   int BUF_SIZE ;
   int res_shift ;
   int bptr ;
   int aptr ;
   int mbwidth ;
   int mv_rsize ;
   int sum_x ;
   int sum_y ;
   int mag ;
   int cpred ;
   int mbx ;
   int comp ;
   int x_flag ;
   int mv_x ;
   int mv_y ;
   int fourmv ;
   int bpred ;
   int top_edge ;
   int mv_high ;
   int ptr ;
   int Y_SELECT ;
   int mv_range ;
   int cptr ;
   int mv_low ;
   int apred ;
   int buf[968] ;
   int pred_x ;
   int pred_y ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MVReconstruct_advance(struct MVReconstruct_variables *_actor_variables ) ;
int MVReconstruct_compute_dot_done(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_compute_dot_start(struct MVReconstruct_variables *_actor_variables ,
                                     int a ) ;
void MVReconstruct_do_pred(struct MVReconstruct_variables *_actor_variables ) ;
int MVReconstruct_function_middle(struct MVReconstruct_variables *_actor_variables ,
                                  int a , int b , int c ) ;
int MVReconstruct_function_mvcalc(struct MVReconstruct_variables *_actor_variables ,
                                  int pred , int mag , int mag_shift ) ;
int MVReconstruct_function_mvclip(struct MVReconstruct_variables *_actor_variables ,
                                  int v ) ;
int MVReconstruct_function_uvclip_1(struct MVReconstruct_variables *_actor_variables ,
                                    int v ) ;
int MVReconstruct_function_uvclip_4(struct MVReconstruct_variables *_actor_variables ,
                                    int v ) ;
void MVReconstruct_get_mag(struct MVReconstruct_variables *_actor_variables , int m ) ;
void MVReconstruct_get_pred(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_get_residual_dot_adjust(struct MVReconstruct_variables *_actor_variables ,
                                           int s ) ;
void MVReconstruct_get_residual_dot_calc(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_get_residual_dot_clip(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_get_residual_dot_final(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_get_residual_dot_init(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_get_residual_dot_shift(struct MVReconstruct_variables *_actor_variables ) ;
void MVReconstruct_geth(struct MVReconstruct_variables *_actor_variables , int h ) ;
void MVReconstruct_getw(struct MVReconstruct_variables *_actor_variables , int w ) ;
void MVReconstruct_read_dot_motion(struct MVReconstruct_variables *_actor_variables ,
                                   int cmd ) ;
void MVReconstruct_read_dot_noMotion(struct MVReconstruct_variables *_actor_variables ,
                                     int cmd ) ;
void MVReconstruct_start(struct MVReconstruct_variables *_actor_variables , int cmd ) ;
void MVReconstruct_write_dot_chroma(struct MVReconstruct_variables *_actor_variables ,
                                    int *MV ) ;
void MVReconstruct_write_dot_luma(struct MVReconstruct_variables *_actor_variables ,
                                  int *MV ) ;

#ifdef __cplusplus
}
#endif

void sched_MVReconstruct::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _token_5 ;
  int _token_6 ;
  int _token_7 ;
  int _token_8 ;
  int _token_9 ;
  int _token_10 ;
  int _token_11 ;
  int _token_12 ;
  int _out_1 ;
  int _out_2 ;
  int _out_3 ;
  int _out_4 ;
  int _call_19 ;
  int _call_20 ;
  int _call_21 ;
  int _call_22 ;
  int _call_23 ;
  int _call_24 ;
  int _call_25 ;
  int _call_26 ;
  int _call_27 ;
  int _call_28 ;
  int _call_29 ;
  int _call_30 ;
  int _call_31 ;
  struct MVReconstruct_variables *_actor_variables ;
  int i ;

  {
  _actor_variables = (struct MVReconstruct_variables *)malloc(3980);
  _actor_variables->BUF_SIZE = 968;
  _actor_variables->Y_SELECT = 4;
  i = 0;
  while (i < 968) {
    _actor_variables->buf[1 * i + 0] = 0;
    i ++;
  }
  _actor_variables->comp = 0;
  _actor_variables->mbwidth = 0;
  _actor_variables->mbx = 0;
  _actor_variables->top_edge = 1;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MVReconstruct_start: get from btype\n");
      _call_19 = btype->get();
      _token_12 = _call_19;
      libcal_printf("action MVReconstruct_start: got %i from btype\n", _token_12);
      MVReconstruct_start(_actor_variables, _token_12);
      fsm_state = 30;
    } else {
      if ((btype->peek() & 512) == 0 || (btype->peek() & 8) == 0) {
        libcal_printf("action MVReconstruct_read_dot_noMotion: get from btype\n");
        _call_20 = btype->get();
        _token_11 = _call_20;
        libcal_printf("action MVReconstruct_read_dot_noMotion: got %i from btype\n",
                      _token_11);
        MVReconstruct_read_dot_noMotion(_actor_variables, _token_11);
        fsm_state = 2;
      } else {
        libcal_printf("action MVReconstruct_read_dot_motion: get from btype\n");
        _call_21 = btype->get();
        _token_10 = _call_21;
        libcal_printf("action MVReconstruct_read_dot_motion: got %i from btype\n",
                      _token_10);
        MVReconstruct_read_dot_motion(_actor_variables, _token_10);
        fsm_state = 3;
      }
    }
    break;
    }
    case 2: 
    {
    if (1) {
      MVReconstruct_advance(_actor_variables);
      fsm_state = 1;
    }
    break;
    }
    case 3: 
    {
    if (_actor_variables->comp > 3 || (_actor_variables->comp != 0 && ! _actor_variables->fourmv)) {
      _call_22 = MVReconstruct_compute_dot_done(_actor_variables);
      fsm_state = 5;
    } else {
      libcal_printf("action MVReconstruct_compute_dot_start: get from A\n");
      _call_23 = A->get();
      _token_1 = _call_23;
      libcal_printf("action MVReconstruct_compute_dot_start: got %i from A\n", _token_1);
      MVReconstruct_compute_dot_start(_actor_variables, _token_1);
      fsm_state = 4;
    }
    break;
    }
    case 4: 
    {
    libcal_printf("action MVReconstruct_compute_dot_start: get from A\n");
    _call_24 = A->get();
    _token_4 = _call_24;
    libcal_printf("action MVReconstruct_compute_dot_start: got %i from A\n", _token_4);
    MVReconstruct_compute_dot_start(_actor_variables, _token_4);
    fsm_state = 12;
    break;
    }
    case 5: 
    {
    if (_actor_variables->comp < 4) {
      MVReconstruct_write_dot_luma(_actor_variables, & _out_2);
      libcal_printf("action MVReconstruct_write_dot_luma: put value %i to MV\n", _out_2);
      MV->put(_out_2);
      libcal_printf("action MVReconstruct_write_dot_luma: put to MV OK\n");
      fsm_state = 31;
    } else {
      if (1) {
        MVReconstruct_write_dot_chroma(_actor_variables, & _out_1);
        libcal_printf("action MVReconstruct_write_dot_chroma: put value %i to MV\n",
                      _out_1);
        MV->put(_out_1);
        libcal_printf("action MVReconstruct_write_dot_chroma: put to MV OK\n");
        fsm_state = 31;
      }
    }
    break;
    }
    case 6: 
    {
    if (1) {
      MVReconstruct_do_pred(_actor_variables);
      fsm_state = 7;
    }
    break;
    }
    case 7: 
    {
    libcal_printf("action MVReconstruct_get_mag: get from MVIN\n");
    _call_25 = MVIN->get();
    _token_2 = _call_25;
    libcal_printf("action MVReconstruct_get_mag: got %i from MVIN\n", _token_2);
    MVReconstruct_get_mag(_actor_variables, _token_2);
    fsm_state = 10;
    break;
    }
    case 8: 
    {
    if (1) {
      MVReconstruct_do_pred(_actor_variables);
      fsm_state = 9;
    }
    break;
    }
    case 9: 
    {
    libcal_printf("action MVReconstruct_get_mag: get from MVIN\n");
    _call_26 = MVIN->get();
    _token_3 = _call_26;
    libcal_printf("action MVReconstruct_get_mag: got %i from MVIN\n", _token_3);
    MVReconstruct_get_mag(_actor_variables, _token_3);
    fsm_state = 11;
    break;
    }
    case 10: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_init(_actor_variables);
      fsm_state = 19;
    }
    break;
    }
    case 11: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_init(_actor_variables);
      fsm_state = 24;
    }
    break;
    }
    case 12: 
    {
    libcal_printf("action MVReconstruct_compute_dot_start: get from A\n");
    _call_27 = A->get();
    _token_5 = _call_27;
    libcal_printf("action MVReconstruct_compute_dot_start: got %i from A\n", _token_5);
    MVReconstruct_compute_dot_start(_actor_variables, _token_5);
    fsm_state = 13;
    break;
    }
    case 13: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 14;
    }
    break;
    }
    case 14: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 15;
    }
    break;
    }
    case 15: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 6;
    }
    break;
    }
    case 16: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 17;
    }
    break;
    }
    case 17: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 18;
    }
    break;
    }
    case 18: 
    {
    if (1) {
      MVReconstruct_get_pred(_actor_variables);
      fsm_state = 8;
    }
    break;
    }
    case 19: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_shift(_actor_variables);
      fsm_state = 20;
    }
    break;
    }
    case 20: 
    {
    libcal_printf("action MVReconstruct_get_residual_dot_adjust: get from MVIN\n");
    _call_28 = MVIN->get();
    _token_6 = _call_28;
    libcal_printf("action MVReconstruct_get_residual_dot_adjust: got %i from MVIN\n",
                  _token_6);
    MVReconstruct_get_residual_dot_adjust(_actor_variables, _token_6);
    fsm_state = 21;
    break;
    }
    case 21: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_calc(_actor_variables);
      fsm_state = 22;
    }
    break;
    }
    case 22: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_clip(_actor_variables);
      fsm_state = 23;
    }
    break;
    }
    case 23: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_final(_actor_variables);
      fsm_state = 16;
    }
    break;
    }
    case 24: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_shift(_actor_variables);
      fsm_state = 25;
    }
    break;
    }
    case 25: 
    {
    libcal_printf("action MVReconstruct_get_residual_dot_adjust: get from MVIN\n");
    _call_29 = MVIN->get();
    _token_7 = _call_29;
    libcal_printf("action MVReconstruct_get_residual_dot_adjust: got %i from MVIN\n",
                  _token_7);
    MVReconstruct_get_residual_dot_adjust(_actor_variables, _token_7);
    fsm_state = 26;
    break;
    }
    case 26: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_calc(_actor_variables);
      fsm_state = 27;
    }
    break;
    }
    case 27: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_clip(_actor_variables);
      fsm_state = 28;
    }
    break;
    }
    case 28: 
    {
    if (1) {
      MVReconstruct_get_residual_dot_final(_actor_variables);
      fsm_state = 5;
    }
    break;
    }
    case 29: 
    {
    libcal_printf("action MVReconstruct_geth: get from btype\n");
    _call_30 = btype->get();
    _token_8 = _call_30;
    libcal_printf("action MVReconstruct_geth: got %i from btype\n", _token_8);
    MVReconstruct_geth(_actor_variables, _token_8);
    fsm_state = 1;
    break;
    }
    case 30: 
    {
    libcal_printf("action MVReconstruct_getw: get from btype\n");
    _call_31 = btype->get();
    _token_9 = _call_31;
    libcal_printf("action MVReconstruct_getw: got %i from btype\n", _token_9);
    MVReconstruct_getw(_actor_variables, _token_9);
    fsm_state = 29;
    break;
    }
    case 31: 
    {
    if (_actor_variables->comp < 4) {
      MVReconstruct_write_dot_luma(_actor_variables, & _out_4);
      libcal_printf("action MVReconstruct_write_dot_luma: put value %i to MV\n", _out_4);
      MV->put(_out_4);
      libcal_printf("action MVReconstruct_write_dot_luma: put to MV OK\n");
      fsm_state = 2;
    } else {
      if (1) {
        MVReconstruct_write_dot_chroma(_actor_variables, & _out_3);
        libcal_printf("action MVReconstruct_write_dot_chroma: put value %i to MV\n",
                      _out_3);
        MV->put(_out_3);
        libcal_printf("action MVReconstruct_write_dot_chroma: put to MV OK\n");
        fsm_state = 2;
      }
    }
    break;
    }
    }
  }
}
}

}
