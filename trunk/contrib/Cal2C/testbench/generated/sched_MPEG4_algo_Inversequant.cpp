#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_Inversequant.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_Inversequant_variables {
   int round ;
   int count ;
   int quant ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_algo_Inversequant_ac(struct MPEG4_algo_Inversequant_variables *_actor_variables ,
                                int i , int *out ) ;
int MPEG4_algo_Inversequant_done(struct MPEG4_algo_Inversequant_variables *_actor_variables ) ;
int MPEG4_algo_Inversequant_function_abs(struct MPEG4_algo_Inversequant_variables *_actor_variables ,
                                         int x ) ;
int MPEG4_algo_Inversequant_function_saturate(struct MPEG4_algo_Inversequant_variables *_actor_variables ,
                                              int x ) ;
void MPEG4_algo_Inversequant_get_qp(struct MPEG4_algo_Inversequant_variables *_actor_variables ,
                                    int q , int i , int *out ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_Inversequant::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _out_1 ;
  int _token_2 ;
  int _token_3 ;
  int _out_2 ;
  int _call_8 ;
  int _call_9 ;
  int _call_10 ;
  int _call_11 ;
  struct MPEG4_algo_Inversequant_variables *_actor_variables ;

  {
  _actor_variables = (struct MPEG4_algo_Inversequant_variables *)malloc(12);
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: get from QP\n");
    _call_8 = QP->get();
    _token_2 = _call_8;
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: got %i from QP\n", _token_2);
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: get from DC\n");
    _call_9 = DC->get();
    _token_3 = _call_9;
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: got %i from DC\n", _token_3);
    MPEG4_algo_Inversequant_get_qp(_actor_variables, _token_2, _token_3, & _out_2);
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: put value %i to out\n",
                  _out_2);
    out->put(_out_2);
    libcal_printf("action MPEG4_algo_Inversequant_get_qp: put to out OK\n");
    fsm_state = 2;
    break;
    }
    case 2: 
    {
    if (_actor_variables->count == 63) {
      _call_10 = MPEG4_algo_Inversequant_done(_actor_variables);
      fsm_state = 1;
    } else {
      libcal_printf("action MPEG4_algo_Inversequant_ac: get from AC\n");
      _call_11 = AC->get();
      _token_1 = _call_11;
      libcal_printf("action MPEG4_algo_Inversequant_ac: got %i from AC\n", _token_1);
      MPEG4_algo_Inversequant_ac(_actor_variables, _token_1, & _out_1);
      libcal_printf("action MPEG4_algo_Inversequant_ac: put value %i to out\n", _out_1);
      out->put(_out_1);
      libcal_printf("action MPEG4_algo_Inversequant_ac: put to out OK\n");
      fsm_state = 2;
    }
    break;
    }
    }
  }
}
}

}
