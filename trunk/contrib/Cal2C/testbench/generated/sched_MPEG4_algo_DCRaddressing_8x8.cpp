#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_algo_DCRaddressing_8x8.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_algo_DCRaddressing_8x8_variables {
   int BUF_SIZE ;
   int ptr_left ;
   int mbwidth ;
   int ptr_above ;
   int left_edge ;
   int mbx ;
   int ptr_above_left ;
   int top_edge ;
   int ptr ;
   int coded[123] ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_algo_DCRaddressing_8x8_advance(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ) ;
int MPEG4_algo_DCRaddressing_8x8_function_decrement(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                                    int p ) ;
void MPEG4_algo_DCRaddressing_8x8_geth(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                       int h ) ;
void MPEG4_algo_DCRaddressing_8x8_getw(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                       int w ) ;
void MPEG4_algo_DCRaddressing_8x8_predict(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                          int *A , int *B , int *C ) ;
void MPEG4_algo_DCRaddressing_8x8_read_dot_intra(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                                 int type ) ;
void MPEG4_algo_DCRaddressing_8x8_read_dot_other(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                                 int type ) ;
void MPEG4_algo_DCRaddressing_8x8_start(struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ,
                                        int cmd ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_algo_DCRaddressing_8x8::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _token_2 ;
  int _out_1 ;
  int _out_2 ;
  int _out_3 ;
  int _token_3 ;
  int _token_4 ;
  int _token_5 ;
  int _call_11 ;
  int _call_12 ;
  int _call_13 ;
  int _call_14 ;
  int _call_15 ;
  struct MPEG4_algo_DCRaddressing_8x8_variables *_actor_variables ;
  int i ;

  {
  _actor_variables = (struct MPEG4_algo_DCRaddressing_8x8_variables *)malloc(528);
  _actor_variables->BUF_SIZE = 123;
  i = 0;
  while (i < 123) {
    _actor_variables->coded[1 * i + 0] = 0;
    i ++;
  }
  _actor_variables->mbwidth = 0;
  _actor_variables->mbx = 0;
  _actor_variables->top_edge = 1;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_start: get from btype\n");
      _call_11 = btype->get();
      _token_5 = _call_11;
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_start: got %i from btype\n",
                    _token_5);
      MPEG4_algo_DCRaddressing_8x8_start(_actor_variables, _token_5);
      fsm_state = 4;
    } else {
      if ((btype->peek() & 1024) != 0) {
        libcal_printf("action MPEG4_algo_DCRaddressing_8x8_read_dot_intra: get from btype\n");
        _call_12 = btype->get();
        _token_4 = _call_12;
        libcal_printf("action MPEG4_algo_DCRaddressing_8x8_read_dot_intra: got %i from btype\n",
                      _token_4);
        MPEG4_algo_DCRaddressing_8x8_read_dot_intra(_actor_variables, _token_4);
        fsm_state = 5;
      } else {
        libcal_printf("action MPEG4_algo_DCRaddressing_8x8_read_dot_other: get from btype\n");
        _call_13 = btype->get();
        _token_3 = _call_13;
        libcal_printf("action MPEG4_algo_DCRaddressing_8x8_read_dot_other: got %i from btype\n",
                      _token_3);
        MPEG4_algo_DCRaddressing_8x8_read_dot_other(_actor_variables, _token_3);
        fsm_state = 2;
      }
    }
    break;
    }
    case 2: 
    {
    if (1) {
      MPEG4_algo_DCRaddressing_8x8_advance(_actor_variables);
      fsm_state = 1;
    }
    break;
    }
    case 3: 
    {
    libcal_printf("action MPEG4_algo_DCRaddressing_8x8_geth: get from btype\n");
    _call_14 = btype->get();
    _token_1 = _call_14;
    libcal_printf("action MPEG4_algo_DCRaddressing_8x8_geth: got %i from btype\n",
                  _token_1);
    MPEG4_algo_DCRaddressing_8x8_geth(_actor_variables, _token_1);
    fsm_state = 1;
    break;
    }
    case 4: 
    {
    libcal_printf("action MPEG4_algo_DCRaddressing_8x8_getw: get from btype\n");
    _call_15 = btype->get();
    _token_2 = _call_15;
    libcal_printf("action MPEG4_algo_DCRaddressing_8x8_getw: got %i from btype\n",
                  _token_2);
    MPEG4_algo_DCRaddressing_8x8_getw(_actor_variables, _token_2);
    fsm_state = 3;
    break;
    }
    case 5: 
    {
    if (1) {
      MPEG4_algo_DCRaddressing_8x8_predict(_actor_variables, & _out_1, & _out_2, & _out_3);
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put value %i to A\n",
                    _out_1);
      A->put(_out_1);
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put to A OK\n");
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put value %i to B\n",
                    _out_2);
      B->put(_out_2);
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put to B OK\n");
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put value %i to C\n",
                    _out_3);
      C->put(_out_3);
      libcal_printf("action MPEG4_algo_DCRaddressing_8x8_predict: put to C OK\n");
      fsm_state = 2;
    }
    break;
    }
    }
  }
}
}

}
