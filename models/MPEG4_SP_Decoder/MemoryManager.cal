/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/
// MemoryManager.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

// Frame buffer address generation for motion compensation

import all caltrop.lib.BitOps;
import java.lang.Math;

actor MemoryManager (
    int SEARCHWIN_IN_MB,      // search window size (in macroblocks)
    int MAXW_IN_MB,           // maximum image width (in macroblocks)
    int MAXH_IN_MB,           // maximum image height (in macroblocks)
    int ADDR_SZ,
    int FLAG_SZ,
    int MV_SZ,
    int MB_COORD_SZ,
    int BTYPE_SZ,
    int PIX_SZ,
    int INTRA,
    int INTER,
    int NEWVOP,
    int MOTION,
  int ROUND_TYPE
 )
   int(size=BTYPE_SZ) BTYPE ==> int(size=ADDR_SZ) RA, int(size=ADDR_SZ) WA :

   // find the number of bits needed to represent some positive integer
   function log2_ceil( n ) :
     Math.round( Math.ceil( Math.log( n * 1.0 ) / Math.log( 2.0 ) ) )
   end

   function mask_bits( v, n ) :
     bitand( v, lshift(1,n) - 1 )
   end

  // Frame buffer organization:
  // Address     FRAMEBITS  YBITS  XBITS  COMPBITS  BLOCKBITS 
  // Data are stored as 32 bit words representing 4 horizontally consecutive pixels.
  // This allows an entire macroblock to be streamed to/from DRAM in one burst.

  int COMPONENTS      = 6;              // Y0, Y1, Y2, Y2, U, V
  int BLOCKSIZE       = 64;
  int PIXELS_PER_WORD = 4;
  int FRAMEBITS       = log2_ceil( 2 );                 // Current, prev. frame
  int COMPBITS        = 3;        
  int YBITS           = log2_ceil( MAXH_IN_MB );
  int XBITS           = log2_ceil( MAXW_IN_MB );
  int BLOCKBITS       = log2_ceil( BLOCKSIZE / PIXELS_PER_WORD ) ;

  int COMPSHIFT     = BLOCKBITS;
  int XSHIFT        = COMPSHIFT + COMPBITS;
  int YSHIFT        = XSHIFT + XBITS;
  int FRAMESHIFT    = YSHIFT + YBITS;

  int(size=COMPBITS+1)  comp := 0;
  int(size=YBITS+1)     this_mby;
  int(size=XBITS+1)     this_mbx;
  int(size=YBITS+1)     next_mby;
  int(size=XBITS+1)     next_mbx;
  int(size=XBITS+1)     width;
  int(size=FRAMEBITS+1) this_frame := 0;
  int(size=FRAMEBITS+1) last_frame;
  bool prediction_is_IVOP;

  // Get the starting address of a block
  function address( f, y, x )
  var
     int xm = lshift( mask_bits( x, XBITS      ), XSHIFT     ),
     int ym = lshift( mask_bits( y, YBITS      ), YSHIFT     ),
     int fm = lshift( mask_bits( f, FRAMEBITS  ), FRAMESHIFT ) :
    bitor( fm, bitor( ym, xm ) )
  end

  // Move the frame counter at the start of the VOP
  cmd.newVop: action BTYPE:[ cmd ] ==>
  guard
    bitand( cmd, NEWVOP ) != 0
  do
    next_mbx := 0;
    next_mby := 0;
    comp     := 0;
    prediction_is_IVOP := bitand( cmd, INTRA ) != 0;
    last_frame := this_frame;
    this_frame := mask_bits( this_frame + 1, FRAMEBITS );
  end

  width: action BTYPE:[ w ] ==>
  do
    width := w;
  end

  height: action BTYPE:[ h ] ==>
  end

  cmd.y0: action BTYPE:[ cmd ] ==>  WA:[ address( this_frame, this_mby, this_mbx ) ]
  guard comp = 0
  do
    this_mbx := next_mbx;
    this_mby := next_mby;

    // Figure out where the next MB will be.
    next_mbx := next_mbx + 1;
    if next_mbx = width then
      next_mbx := 0;
      next_mby := next_mby + 1;
    end

    comp := 1;
  end

  cmd.other: action BTYPE:[ cmd ] ==>
  do
    comp := if comp = 5 then 0 else comp + 1 end;
  end


  // Read address generation is either done or not needed
  read.none: action ==>
  guard prediction_is_IVOP
  end

  read.above: action ==> RA:[ address( last_frame, this_mby-1, this_mbx ) ] end

  read.this:  action ==> RA:[ address( last_frame, this_mby  , this_mbx ) ] end

  read.below: action ==> RA:[ address( last_frame, this_mby+1, this_mbx ) ] end

  schedule fsm cmd:
    cmd       ( cmd.newVop ) --> getw;
    cmd       ( cmd.y0     ) --> readAbove;
    cmd       ( cmd.other  ) --> cmd;
    getw      ( width      ) --> geth;
    geth      ( height     ) --> cmd /* readAbove */;

    readAbove ( read.none  ) --> cmd;
    readAbove ( read.above ) --> readThis;
    readThis  ( read.this  ) --> readBelow;
    readBelow ( read.below ) --> cmd;
  end

  priority
    cmd.newVop > cmd.y0 > cmd.other;
    read.none  > read.above;
  end

end