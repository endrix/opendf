
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xd="http://www.pnp-software.com/XSLTdoc"
    xmlns:opendf="java:net.sf.opendf.util.xml.Util"
    version="2.0">
  
  <xsl:output method="text"/>

  <!--
      This stylesheet generates a makefile as its output.  The makefile contains
      targets for generating CALML from CAL sources.  The CAL sources are rooted
      pathnames to the CAL source included from the input XDF.  All other CAL source
      is ignored.
      IFF calml files are found alongside the source CAL then targets are also created
      for coupling the 'clean' calml with the .prm files in the Actor directory in
      order to generate XLIM and Verilog.
      Thus, this stylesheet is intended to be run on the xdf twice.  Once on the 'clean'
      or unannotated xdf in order to simply discover the CAL sources for a network.
      Then make is run with the generated makefile in order to create the CALML.  Once
      the CALML is created, the standard XDF transformation chain is run to fully
      annotate the xdf (the calmls which are needed now exist).  This transform is run
      at the end of the standard xdf in order to generate the makefile necessary to
      compile all the actor instances.
  -->
  <xsl:template match="/">
    <xsl:variable name="instanceElements">
      <xsl:for-each select="//Instance">
        <xsl:copy-of select="."/>
      </xsl:for-each>
    </xsl:variable>

    <!-- Uniquify the path names -->
    <xsl:variable name="sources" select="$instanceElements/*"/>
    <xsl:variable name="uniqueSources">
      <xsl:for-each select="$sources">
        <xsl:variable name="pos" select="position()"/>
        <xsl:variable name="path" select="@path"/>
        <xsl:if test="not( $sources[ @path=$path and position() &lt; $pos ] )">
          <xsl:copy-of select="."/>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>

    <!-- Print out the makefile header -->
<xsl:text>
# This makefile is auto-generated by the System Builder toolchain
# in order to correlate instances of actors (parameter files *.prm)
# with their clean calml.
# This makefile depends on the following vars to be defined
#  SB_EXE -- java invocation
#  SB_OPTIONS -- standard options to pass to SystemBuilder CLI
#  ACTOR_INSTANCE_DIR -- relative location of actor instances (prm and hdl files)
# DO NOT MODIFY THIS FILE.  IT WILL BE OVERWRITTEN
</xsl:text>

<!-- Write out the discovered CAL sources -->
<xsl:choose>
  <xsl:when test="count($uniqueSources) > 0">
<!-- First print out a commented out list of the full path of all the CAL sources-->
# Full paths of discovered CAL sources<xsl:text>
</xsl:text><xsl:for-each select="$uniqueSources/*"># <xsl:value-of select="./Class/@name"/> as <xsl:value-of select="@instance-name"/> <xsl:text>
</xsl:text></xsl:for-each>
<!-- Now print out the actual cal source variable -->
CALML_SOURCES= \
<xsl:for-each select="$uniqueSources/*">
<xsl:text>	$(ACTOR_INSTANCE_DIR)/</xsl:text><xsl:value-of select="concat(@instance-name,'.calml')"/><xsl:if test="position() &lt; count($uniqueSources/*)"> \</xsl:if><xsl:text>
</xsl:text>
    </xsl:for-each>
  </xsl:when>
  <xsl:otherwise>
CALML_SOURCES= no_sources_found
  </xsl:otherwise>
</xsl:choose>
<xsl:text>
.PHONY: hdl_instances
hdl_instances: $(CALML_SOURCES:%.calml=%.v)
</xsl:text>

  <!--
      write out makefile targets to link prm and calml.
      The -X-d -X<ActorsDir> causes '-d <ActorsDir>' to be passed
      to the backend HDL generator as the destination directory
  -->

.PRECIOUS: %.vhd %.vhdl %.xlim %.v %.xdf

<xsl:text>

%.xlim: %.calml
	@$(SB_EXE) net.sf.opendf.hardware.cli.XLIMCodeGeneration $(SB_OPTIONS) $&lt;

%.v: %.xlim
	@echo "Generating $@"
	@$(SB_EXE) net.sf.opendf.hardware.cli.HDLCodeGenerator -X-d -X./$(ACTOR_INSTANCE_DIR) $(SB_OPTIONS) $&lt;

clean:
	-rm -f </xsl:text><xsl:value-of select="XDF/@name"/>.vhd<xsl:if test="count($uniqueSources) > 0"><xsl:text>
	-rm -f $(patsubst %.cal,%.calml,$(CALML_SOURCES))</xsl:text></xsl:if><xsl:text>
</xsl:text>
    
  </xsl:template>

</xsl:stylesheet>



