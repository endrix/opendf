#include <systemc.h>
#include <tlm.h>
#include "sched_MPEG4_mgnt_Address.h"

#ifdef __cplusplus
extern "C" {
#endif
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

struct MPEG4_mgnt_Address_variables {
   int next_comp ;
   int maxh_in_pixels ;
   int luma_read_ring_start ;
   int write_count ;
   int vop_luma_width ;
   int read_row ;
   int vop_chroma_width ;
   int current_size ;
   int current_base ;
   int vop_height ;
   int next_chroma_x ;
   int next_chroma_y ;
   int half_search_in_pixels ;
   int interp_x ;
   int round ;
   int maxw_in_pixels ;
   int current_h ;
   int current_w ;
   int current_x ;
   int current_y ;
   int vop_width ;
   int next_luma_x ;
   int next_luma_y ;
   int vop_chroma_height ;
   int luma_base ;
   int LAYOUT ;
   int chroma_base ;
   int next_mbx ;
   int next_mby ;
   int vop_luma_height ;
   int current_read_ring_start ;
   int read_count ;
   int read_col ;
   int mvx ;
   int mvy ;
   int chroma_read_ring_start ;
   int current_write_ring_start ;
   int luma_write_ring_start ;
   int chroma_write_ring_start ;
   int chroma_pixel_offset ;
   int luma_pixel_offset ;
   int max_chroma_pixels ;
   int max_luma_pixels ;
   int chroma_buf_size ;
   int luma_buf_size ;
};
void libcal_printf(char const   *format  , ...) ;
// To enable traces, change 1 by 0 in the #if below
#if 1
#define libcal_printf //
#endif
int currentSystemTime(void) ;
int openFile(char *file_name ) ;
void picture_displayImage(void) ;
void picture_setPixel(int x , int y , int r , int g , int b ) ;
int readByte(int fd ) ;
int JFrame(char *title ) ;
int Picture(int width , int height ) ;
void MPEG4_mgnt_Address_cmd_dot_motion(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                       int cmd ) ;
void MPEG4_mgnt_Address_cmd_dot_neither(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                        int cmd , int *halfpel ) ;
void MPEG4_mgnt_Address_cmd_dot_newVop(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                       int cmd ) ;
void MPEG4_mgnt_Address_cmd_dot_noMotion(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                         int cmd ) ;
int MPEG4_mgnt_Address_done(struct MPEG4_mgnt_Address_variables *_actor_variables ) ;
void MPEG4_mgnt_Address_function_advance_block(struct MPEG4_mgnt_Address_variables *_actor_variables ) ;
void MPEG4_mgnt_Address_function_advance_vop(struct MPEG4_mgnt_Address_variables *_actor_variables ) ;
int MPEG4_mgnt_Address_function_generate_read_addr(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                                   int dx , int dy ) ;
int MPEG4_mgnt_Address_function_generate_write_addr(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                                    int dx , int dy ) ;
void MPEG4_mgnt_Address_geth(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                             int h ) ;
void MPEG4_mgnt_Address_getmvx(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                               int x ) ;
void MPEG4_mgnt_Address_getmvy(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                               int y , int *halfpel ) ;
void MPEG4_mgnt_Address_getw(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                             int w ) ;
void MPEG4_mgnt_Address_init(struct MPEG4_mgnt_Address_variables *_actor_variables ) ;
void MPEG4_mgnt_Address_read_addr(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                  int *RA ) ;
void MPEG4_mgnt_Address_write_addr(struct MPEG4_mgnt_Address_variables *_actor_variables ,
                                   int *WA ) ;

#ifdef __cplusplus
}
#endif

void sched_MPEG4_mgnt_Address::process() {
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

 
{ int fsm_state ;
  int _token_1 ;
  int _out_1 ;
  int _token_2 ;
  int _token_3 ;
  int _token_4 ;
  int _out_2 ;
  int _out_3 ;
  int _token_5 ;
  int _token_6 ;
  int _token_7 ;
  int _out_4 ;
  int _token_8 ;
  int _call_15 ;
  int _call_16 ;
  int _call_17 ;
  int _call_18 ;
  int _call_19 ;
  int _call_20 ;
  int _call_21 ;
  int _call_22 ;
  int _call_23 ;
  struct MPEG4_mgnt_Address_variables *_actor_variables ;

  {
  _actor_variables = (struct MPEG4_mgnt_Address_variables *)malloc(180);
  _actor_variables->LAYOUT = m_layout;
  _actor_variables->chroma_base = 0;
  _actor_variables->chroma_buf_size = 553696;
  _actor_variables->chroma_pixel_offset = 19360;
  _actor_variables->chroma_write_ring_start = 0;
  _actor_variables->half_search_in_pixels = 40;
  _actor_variables->luma_base = 0;
  _actor_variables->luma_buf_size = 2214784;
  _actor_variables->luma_pixel_offset = 77440;
  _actor_variables->luma_write_ring_start = 0;
  _actor_variables->max_chroma_pixels = 553696;
  _actor_variables->max_luma_pixels = 2214784;
  _actor_variables->maxh_in_pixels = 1104;
  _actor_variables->maxw_in_pixels = 1936;
  fsm_state = 1;
  while (1) {
    switch (fsm_state) {
    case 1: 
    {
    if ((btype->peek() & 2048) != 0) {
      libcal_printf("action MPEG4_mgnt_Address_cmd_dot_newVop: get from btype\n");
      _call_15 = btype->get();
      _token_4 = _call_15;
      libcal_printf("action MPEG4_mgnt_Address_cmd_dot_newVop: got %i from btype\n",
                    _token_4);
      MPEG4_mgnt_Address_cmd_dot_newVop(_actor_variables, _token_4);
      fsm_state = 4;
    } else {
      if ((btype->peek() & 1024) != 0) {
        libcal_printf("action MPEG4_mgnt_Address_cmd_dot_noMotion: get from btype\n");
        _call_16 = btype->get();
        _token_3 = _call_16;
        libcal_printf("action MPEG4_mgnt_Address_cmd_dot_noMotion: got %i from btype\n",
                      _token_3);
        MPEG4_mgnt_Address_cmd_dot_noMotion(_actor_variables, _token_3);
        fsm_state = 2;
      } else {
        if ((btype->peek() & 8) != 0) {
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_motion: get from btype\n");
          _call_17 = btype->get();
          _token_2 = _call_17;
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_motion: got %i from btype\n",
                        _token_2);
          MPEG4_mgnt_Address_cmd_dot_motion(_actor_variables, _token_2);
          fsm_state = 3;
        } else {
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_neither: get from btype\n");
          _call_18 = btype->get();
          _token_1 = _call_18;
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_neither: got %i from btype\n",
                        _token_1);
          MPEG4_mgnt_Address_cmd_dot_neither(_actor_variables, _token_1, & _out_1);
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_neither: put value %i to halfpel\n",
                        _out_1);
          halfpel->put(_out_1);
          libcal_printf("action MPEG4_mgnt_Address_cmd_dot_neither: put to halfpel OK\n");
          fsm_state = 2;
        }
      }
    }
    break;
    }
    case 2: 
    {
    if (1) {
      MPEG4_mgnt_Address_init(_actor_variables);
      fsm_state = 5;
    }
    break;
    }
    case 3: 
    {
    libcal_printf("action MPEG4_mgnt_Address_getmvx: get from MV\n");
    _call_19 = MV->get();
    _token_6 = _call_19;
    libcal_printf("action MPEG4_mgnt_Address_getmvx: got %i from MV\n", _token_6);
    MPEG4_mgnt_Address_getmvx(_actor_variables, _token_6);
    fsm_state = 7;
    break;
    }
    case 4: 
    {
    libcal_printf("action MPEG4_mgnt_Address_getw: get from btype\n");
    _call_20 = btype->get();
    _token_8 = _call_20;
    libcal_printf("action MPEG4_mgnt_Address_getw: got %i from btype\n", _token_8);
    MPEG4_mgnt_Address_getw(_actor_variables, _token_8);
    fsm_state = 6;
    break;
    }
    case 5: 
    {
    if (_actor_variables->write_count == 64 && _actor_variables->read_count == 81) {
      _call_21 = MPEG4_mgnt_Address_done(_actor_variables);
      fsm_state = 1;
    } else {
      if (_actor_variables->write_count < 64 && _actor_variables->write_count < _actor_variables->read_count) {
        MPEG4_mgnt_Address_write_addr(_actor_variables, & _out_3);
        libcal_printf("action MPEG4_mgnt_Address_write_addr: put value %i to WA\n",
                      _out_3);
        WA->put(_out_3);
        libcal_printf("action MPEG4_mgnt_Address_write_addr: put to WA OK\n");
        fsm_state = 5;
      } else {
        if (_actor_variables->read_count < 81) {
          MPEG4_mgnt_Address_read_addr(_actor_variables, & _out_2);
          libcal_printf("action MPEG4_mgnt_Address_read_addr: put value %i to RA\n",
                        _out_2);
          RA->put(_out_2);
          libcal_printf("action MPEG4_mgnt_Address_read_addr: put to RA OK\n");
          fsm_state = 5;
        }
      }
    }
    break;
    }
    case 6: 
    {
    libcal_printf("action MPEG4_mgnt_Address_geth: get from btype\n");
    _call_22 = btype->get();
    _token_5 = _call_22;
    libcal_printf("action MPEG4_mgnt_Address_geth: got %i from btype\n", _token_5);
    MPEG4_mgnt_Address_geth(_actor_variables, _token_5);
    fsm_state = 1;
    break;
    }
    case 7: 
    {
    libcal_printf("action MPEG4_mgnt_Address_getmvy: get from MV\n");
    _call_23 = MV->get();
    _token_7 = _call_23;
    libcal_printf("action MPEG4_mgnt_Address_getmvy: got %i from MV\n", _token_7);
    MPEG4_mgnt_Address_getmvy(_actor_variables, _token_7, & _out_4);
    libcal_printf("action MPEG4_mgnt_Address_getmvy: put value %i to halfpel\n", _out_4);
    halfpel->put(_out_4);
    libcal_printf("action MPEG4_mgnt_Address_getmvy: put to halfpel OK\n");
    fsm_state = 2;
    break;
    }
    }
  }
}
}

}
