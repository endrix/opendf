/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

aspect SDF {
	syn boolean ASTNode.isSDF() = false;
	eq Start.isSDF() = jjtGetNumChildren() == 0 ? false : getSpecification().isSDF();
	eq Specification.isSDF() {
		boolean result = false;
		for (Element e : getElements()) {
			result |= e.isSDF();
		}
		return result;
	}
	eq design.isSDF() = nbrOfActions() == 1;
}

// aspect CSDF {
// 	syn boolean ASTNode.isCSDF() = false;
// 	eq Start.isCSDF() = jjtGetNumChildren() == 0 ? false : getSpecification().isCSDF();
// 	eq Specification.isCSDF() {
// 		boolean result = false;
// 		for (Element e : getElements()) {
// 			result |= e.isCSDF();
// 		}
// 		return result;
// 	}
// 	eq design.isCSDF() = nbrOfActions() == 1;
// }

aspect Misc {
	syn int design.nbrOfActions() {
		int nbrActions = 0;
		for (Element e : getElements()) {
			if (e.isAction()) {
				nbrActions++;
			}
		}
		return nbrActions;
	}

	syn boolean Element.isAction() = false;
	eq module.isAction() {
		return kind().equals("action");
	}


	syn String module.kind() {
		for (int i=0; i<getNumAttribute(); i++) {
			Attribute a = getAttribute(i);
			if (a instanceof kind) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	syn String actor_port.dir() {
		for (int i=0; i<getNumAttribute(); i++) {
			Attribute a = getAttribute(i);
			if (a instanceof dir) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	syn String actor_port.type() {
		for (int i=0; i<getNumAttribute(); i++) {
			Attribute a = getAttribute(i);
			if (a instanceof typeName) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	syn String ASTNode.name() = "";
	eq Start.name() = getSpecification().name();
	eq Specification.name() = getDesign().name();
	eq ComplexElement.name() {
		for (int i=0; i<getNumAttribute(); i++) {
			Attribute a = getAttribute(i);
			if (a instanceof name) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return super.name();
	}

	public void Element.setName(String name) {}
	public void ComplexElement.setName(String name) {
		for (Attribute a : getAttributes()) {
			a.setName(name);
		}
	}
	void Attribute.setName(String name) {}
	void name.setName(String name) {
		getAttrValue().setLITERAL(unfix(name));
	}


	static String ASTNode.fix(String s) {
		if (s.indexOf('"') == 0) {
			return s.substring(1,s.length()-1);
		}
		return s;
	}

	static String ASTNode.unfix(String s) {
		if (s.indexOf('"') != 0) {
			return "\""+s+"\"";
		}
		return s;
	}

	syn design Specification.getDesign() {
		for (Element e : getElements()) {
			if (e instanceof design) {
				return (design) e;
			}
		}
		return null;
	}

	syn String Element.kind() = "";
	eq ComplexElement.kind() {
		for (Attribute a : getAttributes()) {
			if (a.isKind()) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}

	syn boolean Attribute.isKind() = false;
	eq kind.isKind() = true;

	syn String Element.source() = "";
	eq ComplexElement.source() {
		for (Attribute a : getAttributes()) {
			if (a instanceof source) {
				return fix(a.getAttrValue().getLITERAL());
			}
		}
		return "";
	}
}

aspect Fixes {
	int ASTNode.numChildren;
	int ASTNode.numChildren() {return jjtGetNumChildren();}
	int List.getNumNoTransformChild() {return getNumChildNoTransform();}
	int Opt.getNumChildNoTransfrom() {return getNumChildNoTransform();}

}
