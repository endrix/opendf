/* -*-Java-*- */                                         

/*
 * Copyright (C) 2009  Anders Nilsson <anders.nilsson@cs.lth.se>
 *                                                              
 * This file is part of Actors model compiler.                      
 */                                                             

import java.util.HashSet;

aspect Merge {
	private static int design.nameIndex = 0;
	
	public void Start.merge(Start dest, String srcPort, String dstPort) {
		getSpecification().getDesign().merge(dest.getSpecification().getDesign(),srcPort,dstPort);
	}
	public void EmptyStart.merge(Start dest, String srcPort, String dstPort) {}

	public void design.merge(design dest, String srcPort, String dstPort) {
		HashSet<module> ops = dest.getActions(new HashSet<module>());
		System.out.println("Adding actions from: "+dest.name()+" to: "+name());
		String varName = "\""+name()+"_out_"+(nameIndex++)+"\"";
// 		setName(name()+"_"+dest.name());
		List<Element> eList = getElements();
		stateVar var = new stateVar();		
		initValue init = new initValue();
		init.setAttributeList(new List().add(new size(new AttrValue("\"32\""))).
							  add(new typeName(new AttrValue("\"int\""))).
							  add(new value(new AttrValue("\"0\""))));
		var.setAttributeList(new List().add(new name(new AttrValue(varName))).
							 add(new sourceName(new AttrValue(varName))));
		var.addElement(init);
		eList.insertChild(var,0);
		// Re-set pinWrite with shared variable
		for (module m : getActions(new HashSet<module>())) {
			m.setOutVar(varName,srcPort);
		}
		for (module o : ops) {
			o.setInVar(varName,dstPort);
			o.setName(dest.name()+"_"+o.name());
			System.out.println("   Adding "+o.name());
 			eList.insertChild(o,eList.getNumChild()-2);
			actionScheduler().addTaskCall(o);
// 			eList.addChild(o);
		}
	}
}

aspect Actions {
	syn HashSet<module> ASTNode.getActions(HashSet<module> ops) = ops;
	eq Start.getActions(HashSet<module> ops) = 
		getSpecification().getActions(ops);
	eq Specification.getActions(HashSet<module> ops) {
		for (Element e : getElements()) {
			ops = e.getActions(ops);
		}
		return ops;
	}
	eq ComplexElement.getActions(HashSet<module> ops) {
		for (Element e : getElements()) {
			ops = e.getActions(ops);
		}
		return ops;
	}
	eq module.getActions(HashSet<module> ops) {
		if (isAction()) {
			ops.add(this);
		}
		return ops;
	}

	void module.setOutVar(String varName,String srcPort) {
		for (Element e : getElements()) {
			e.setOutVar(varName, srcPort);
		}
	}
	void Element.setOutVar(String varName, String srcPort){}
	void operation.setOutVar(String varName, String srcPort) {
		if (kind().equals("pinWrite")) {
			setAttributeList(new List().add(new kind(new AttrValue("\"assign\""))).
							 add(new target(new AttrValue(varName))));
		}
	}

	void module.setInVar(String varName,String srcPort) {
		for (Element e : getElements()) {
			e.setInVar(varName, srcPort);
		}
	}
	void Element.setInVar(String varName, String srcPort){}
	void operation.setInVar(String varName, String srcPort) {
		if (kind().equals("pinRead")) {
			String src = getElement(0).source();
			setAttributeList(new List().add(new kind(new AttrValue("\"noop\""))));
			port newInPort = new port();
			newInPort.setAttributeList(new List().add(new dir(new AttrValue("\"in\""))).
									 add(new source(new AttrValue(varName))));
// 			port newOutPort = new port();
// 			newOutPort.setAttributeList(new List().add(new dir(new AttrValue("\"out\""))).
// 										add(new size(new AttrValue("\"32\""))).
// 										add(new source(new AttrValue(srcPort))));
 			addElement(newInPort);
// 			setElementList(new List().add(newInPort).add(newOutPort));
		}
	}
}

aspect ActionScheduler {
	syn module Element.actionScheduler() = null;
	eq ComplexElement.actionScheduler() {
		for (Element e : getElements()) {
			if (e.actionScheduler() != null) {
				return e.actionScheduler();
			}
		}
		return null;
	}
	eq module.actionScheduler() {
		if (isActionScheduler()) {
			return this;
		}
		return null;
	}

	boolean module.isActionScheduler() {
		return kind().equals("action-scheduler");
	}

	void Element.addTaskCall(module m) {}
	void module.addTaskCall(module m) {
		System.out.println("Looking in: "+kind());
		if (hasTaskCall()) {
			operation o = new operation();
			o.setAttributeList(new List().add(new kind(new AttrValue("\"taskCall\""))).
							   add(new target(new AttrValue(unfix(m.name())))));
			addElement(o);
		} else {
			for (Element e : getElements()) {
				e.addTaskCall(m);
			}
		}
	}

	syn boolean Element.hasTaskCall() = false;
	eq module.hasTaskCall() {
		for (Element e : getElements()) {
			if (e instanceof operation) {
				System.out.println("  "+e.kind());
			}
			if (e instanceof operation && e.kind().equals("taskCall")) {
				return true;
			}
		}
		return false;
	}
}

