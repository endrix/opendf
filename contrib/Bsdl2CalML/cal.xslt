<?xml version="1.0" encoding="UTF-8"?>
<!--*
  * Copyright(c)2008, Samuel Keller, Christophe Lucarz, Joseph Thomas-Kerr 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *     * Redistributions of source code must retain the above copyright
  *       notice, this list of conditions and the following disclaimer.
  *     * Redistributions in binary form must reproduce the above copyright
  *       notice, this list of conditions and the following disclaimer in the
  *       documentation and/or other materials provided with the distribution.
  *     * Neither the name of the EPFL, University of Wollongong nor the
  *       names of its contributors may be used to endorse or promote products
  *       derived from this software without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY  Samuel Keller, Christophe Lucarz, 
  * Joseph Thomas-Kerr ``AS IS'' AND ANY 
  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL  Samuel Keller, Christophe Lucarz, 
  * Joseph Thomas-Kerr BE LIABLE FOR ANY
  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *-->
<!DOCTYPE stylesheet SYSTEM "entities.dtd">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"

  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:rvc="urn:mpeg:2006:01-RVC-NS" version="2.0">

  <xsl:output method="text" omit-xml-declaration="yes"/>

  

  <xsl:variable name="setFunc" select="'setBitCount'"/>

  <xsl:variable name="resultFunc" select="'readResult'"/>

  <xsl:variable name="completeFunc" select="'readComplete'"/>

  <xsl:variable name="commaNewline">
    <xsl:text>,&nl;&tab;&tab;</xsl:text>
  </xsl:variable>
  

  <xsl:template name="actor">
    <xsl:param name="name" required="yes"/>

    <xsl:param name="children"/>

    <xsl:param name="inputs"/>

    <xsl:param name="outputs"/>

    <xsl:param name="imports"/>

    <xsl:param name="parameters"/>

    <xsl:text>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&nl;</xsl:text>
    <xsl:text>&lt;!-- Generated by BSDL to CALML Parser version 1.0 --&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;Actor name="</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>"&gt;&nl;</xsl:text>
    <xsl:value-of select="$imports"/>
    <xsl:value-of select="$parameters"/>
    <xsl:value-of select="$inputs"/>
    <xsl:value-of select="$outputs"/>
    <xsl:value-of select="$children"/>  
    
    <xsl:text>&lt;/Actor&gt;&nl;</xsl:text>
    
  </xsl:template>

  

  <xsl:template name="import">

    <!-- should be a sequence with each package in a slot-->

    <xsl:param name="name" required="yes"/>

    <xsl:param name="kind" select="'single'"/>
    
    <xsl:text>&lt;Import kind="</xsl:text>
    <xsl:choose>
      <xsl:when test="$kind">
        <xsl:value-of select="$kind"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>single</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>"&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;QID name="</xsl:text>
    <xsl:value-of select="string-join($name,'.')"/>
    <xsl:text>"&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;ID name="</xsl:text>
    <xsl:value-of select="string-join($name,'&quot;/&gt;&nl; &lt;ID name=&quot;')"/>
    <xsl:text>"/&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;/QID&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Import&gt;&nl;</xsl:text>
  </xsl:template>

  

  <xsl:template name="port">

    <xsl:param name="name" required="yes"/>
    <xsl:param name="type" required="no"/>
    <xsl:param name="kind" required="no"/>

    <xsl:text>&lt;Port kind="</xsl:text>
    <xsl:choose>
      <xsl:when test="$kind">
        <xsl:value-of select="$kind"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>Output</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    
    <xsl:text>" name="</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>"&gt;&nl;</xsl:text>

    <xsl:text>&lt;Type name="</xsl:text>
      <xsl:choose>
        <xsl:when test="not(empty($type)) and string-length($type) &gt; 0">
          <xsl:value-of select="$type"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>string</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    <xsl:text>"/&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;/Port&gt;&nl;</xsl:text>

  </xsl:template>

  

  <xsl:template name="bitAction">

    <xsl:text>&lt;Decl assignable="Yes" kind="Variable" name="output"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Type name="int"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;Decl kind="Variable" name="bool2int"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Type infer="true" kind="Procedure"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Proc"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Decl kind="Parameter" name="b"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Type name="bool"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>
    <xsl:text>&lt;Decl kind="Parameter" name="size"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Type name="int"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>
    <xsl:text>&lt;Decl assignable="Yes" kind="Variable" name="i"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Type name="int"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="size"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="Assign" name="output"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="0"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="While"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="BinOpSeq"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="i"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Op name="&gt;"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="0"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="Block"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="If"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Indexer"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="b"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Args&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="BinOpSeq"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="size"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Op name="-"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="i"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Args&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="Block"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="Assign" name="output"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="BinOpSeq"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="output"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Op name="+"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Application"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="lshift"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Args&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="1"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="BinOpSeq"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="i"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Op name="-"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="1"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Args&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;Stmt kind="Assign" name="i"&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="BinOpSeq" &gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Var" name="i"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Op name="-"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="1"/&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Stmt&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Expr&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>
    
    <xsl:call-template name="action">
      <xsl:with-param name="name">
        <xsl:call-template name="qid">
          <xsl:with-param name="name">
            <xsl:text>&skipAction;</xsl:text>
          </xsl:with-param>
        </xsl:call-template>
      </xsl:with-param>
    </xsl:call-template>

  </xsl:template>
  
  <xsl:template name="action">
    <xsl:param name="name" required="no"/>
    <xsl:param name="inputs" required="no"/>
    <xsl:param name="outputs" required="no"/>
    <xsl:param name="guard" required="no"/>
    <xsl:param name="do" required="no"/>
    
    <xsl:text>&lt;Action&gt;&nl;</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:value-of select="$inputs"/>
    <xsl:value-of select="$outputs"/>
    
    <xsl:if test="string-length($guard) &gt; 0">
      <xsl:text>&lt;Guards&gt;&nl;</xsl:text>
      <xsl:value-of select="$guard"/>
      <xsl:text>&lt;/Guards&gt;&nl;</xsl:text>
    </xsl:if>
    
    <xsl:value-of select="$do"/>
    
    <xsl:text>&lt;/Action&gt;&nl;</xsl:text>
  </xsl:template>
  
 <!-- <xsl:template name="actionPort">
    <xsl:param name="port" required="yes"/>
    <xsl:param name="variable" required="yes"/>
    <xsl:param name="repeat" required="no"/>
    <xsl:variable name="repeat0"><xsl:value-of select="$repeat"/></xsl:variable>
    <item>
      <xsl:value-of select="$port"/>
      <xsl:text>: [</xsl:text>
      <xsl:value-of select="$variable"/>
      <xsl:text>]</xsl:text>
      <xsl:if test="string-length($repeat0) &gt; 0">
        <xsl:text> repeat </xsl:text>
        <xsl:value-of select="$repeat0"/>
      </xsl:if>
    </item>
  </xsl:template>-->
  
  

  <xsl:template name="variableDeclaration">

    <xsl:param name="name" required="yes"/>

    <xsl:param name="initialValue"/>
    <xsl:param name="type"/>
    <xsl:variable name="initial0"><xsl:value-of select="$initialValue"/></xsl:variable> <!-- necessary to serialize sequences... -->
    
    
    <xsl:text>&lt;Decl kind="Variable" name="</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>"&gt;&nl;</xsl:text>
    
    <xsl:if test="$type">
    <xsl:text>&lt;Type name="</xsl:text>
    <xsl:value-of select="$type"/>
    <xsl:text>"/&gt;&nl;</xsl:text>
    
    <xsl:if test="string-length($initial0) &gt; 0">
      <xsl:if test="$type = 'int'">
        <xsl:text>&lt;Expr kind="Literal" literal-kind="Integer" value="</xsl:text>
        <xsl:value-of select="$initial0"/>
        <xsl:text>"/&gt;&nl;</xsl:text>
        </xsl:if>
      </xsl:if>
      
    </xsl:if>
    
      <xsl:text>&lt;/Decl&gt;&nl;</xsl:text>

  </xsl:template>

  

  <xsl:template name="fsm">

    <xsl:param name="initialState"/>

    <xsl:param name="transitions"/>
    
    <xsl:text>&lt;Schedule kind="fsm" initial-state="</xsl:text>
    <xsl:value-of select="$initialState"/>
    <xsl:text>"&gt;&nl;</xsl:text>

    <xsl:value-of select="string-join($transitions,'&nl;')"/>
      <xsl:text>&lt;/Schedule&gt;&nl;</xsl:text>

  </xsl:template>

  

  <xsl:template name="assign">
    <xsl:param name="variable" required="yes"/>
    <xsl:param name="value" required="yes"/> 
    <xsl:text>&tab;&tab;</xsl:text>
    <xsl:value-of select="$variable"/>
    <xsl:text> := </xsl:text>
    <xsl:value-of select="$value"/>
    <xsl:text>;&nl;</xsl:text>
  </xsl:template>
  
  
  <xsl:template name="index"><!-- zzz workaround for cal interpreter bug - remove [] -->
    <xsl:param name="index" required="yes"/>
    <xsl:text>[</xsl:text>
    <xsl:value-of select="$index"/>
    <xsl:text>]</xsl:text>
  </xsl:template>  
  
  <xsl:template name="size">
    <xsl:param name="collection" required="yes"/>
    <xsl:text>#</xsl:text>
    <xsl:value-of select="$collection"/>
  </xsl:template>
  
  <xsl:template name="dereference">
    <xsl:param name="parent" required="yes"/>
    <xsl:param name="child" required="yes"/>
    <xsl:value-of select="$parent"/>
    <xsl:text>.</xsl:text>
    <xsl:value-of select="$child"/>
  </xsl:template>
  
  <xsl:template name="statement">
    <xsl:param name="expressions" required="no"/>
    <xsl:if test="string-length($expressions) &gt; 0">
      <xsl:value-of select="$expressions"/>
    </xsl:if>
  </xsl:template>
  
  <xsl:template name="list1">
    <xsl:param name="name" as="xsd:string" required="yes"/>
    <xsl:param name="size" required="no"/>
    <xsl:param name="type" required="no"/>
    <xsl:param name="initialValue" as="xsd:string*" required="no"/>
    <xsl:variable name="sizePresent" select="string-length($size) &gt; 0"/>
    <xsl:variable name="typePresent" select="string-length($type) &gt; 0"/>
    <xsl:variable name="nullValue" select="if ($type='int') then 0 else 'null'"/>
    <item>
      <xsl:text>list </xsl:text>
      <xsl:if test="$size or $typePresent">(</xsl:if>
      <xsl:if test="$typePresent">
        <xsl:text>type:</xsl:text>
        <xsl:value-of select="$type"/>
      </xsl:if> 
      <xsl:if test="$sizePresent and $typePresent">, </xsl:if>
      <xsl:if test="$sizePresent">
        <xsl:text>size:</xsl:text>
        <xsl:value-of select="$size"/>
      </xsl:if> 
      <xsl:if test="$size or $typePresent">)</xsl:if> 
      <xsl:value-of select="$name"/>
      <xsl:choose>
        <xsl:when test="not(empty($initialValue)) or string-length($initialValue) &gt; 0">
          <xsl:text> := [</xsl:text>
          <xsl:value-of select="string-join($initialValue,',')"/>
          <xsl:text>]</xsl:text>
        </xsl:when>
        <xsl:when test="$sizePresent">
          <xsl:variable name="string" select="for $x in 1 to $size return $nullValue"/>
          <xsl:text> := [</xsl:text>
          <xsl:value-of select="string-join($string,',')"/>
          <xsl:text>]</xsl:text>
        </xsl:when>
      </xsl:choose>
    </item>
  </xsl:template>
  
  <xsl:template name="list"><!-- interpreter can't handle current[0].b1 so we're working around it. -->
    <xsl:param name="name" as="xsd:string" required="yes"/>
    <xsl:param name="size" as="xsd:integer" required="yes"/>
    <xsl:param name="type" as="xsd:string" required="yes"/>
    <xsl:param name="initialValue" required="no"/>
    <xsl:value-of>
      <xsl:for-each select="0 to $size -1">
        <xsl:value-of select="$type"/>
        <xsl:text> </xsl:text>
        <xsl:value-of select="$name"/>
        <xsl:value-of select="."/>
        <xsl:text> := </xsl:text>
        <xsl:choose>
          <xsl:when test="empty($initialValue) or string-length($initialValue)=0">null</xsl:when>
          <xsl:otherwise><xsl:value-of select="$initialValue[current()]"/></xsl:otherwise>
        </xsl:choose>
        <xsl:text>;
        </xsl:text>
      </xsl:for-each>
    </xsl:value-of>
  </xsl:template>
  
  <xsl:template name="functionCall">
    <xsl:param name="name" required="yes"/>
    <xsl:param name="arguments" required="no"/>
    <xsl:value-of select="$name"/>
    <xsl:text>(</xsl:text>
    <xsl:value-of select="string-join($arguments,',')"/>
    <xsl:text>)</xsl:text>
  </xsl:template>
  
  <!-- for convenience -->
  <xsl:template name="increment">
    <xsl:param name="variable" required="yes"/>
    <xsl:call-template name="assign">
      <xsl:with-param name="variable" select="$variable"/>
      <xsl:with-param name="value">
        <xsl:call-template name="operation">
          <xsl:with-param name="operand0" select="$variable"/>
          <xsl:with-param name="operation">+</xsl:with-param>
          <xsl:with-param name="operand1">1</xsl:with-param>
        </xsl:call-template>
      </xsl:with-param>
    </xsl:call-template>  
  </xsl:template>
  
  <xsl:template name="operation">
    <xsl:param name="operation" required="yes"/>
    <xsl:param name="operand0" required="yes"/>
    <xsl:param name="operand1" required="no"/>
    <xsl:value-of select="$operand0"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$operation"/>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$operand1"/>
  </xsl:template>
  

  <xsl:template name="transition">
    <xsl:param name="from" required="yes"/>
    <xsl:param name="to" required="yes"/>
    <xsl:param name="action" required="yes"/>
    <xsl:text>&lt;Transition from="</xsl:text>
    <xsl:value-of select="$from"/>
    <xsl:text>" to="</xsl:text>
    <xsl:value-of select="$to"/>
    <xsl:text>"&gt;&nl;</xsl:text>
    <xsl:text>&lt;ActionTags&gt;&nl;</xsl:text>
    <xsl:value-of select="$action"/>
    <xsl:text>&lt;/ActionTags&gt;&nl;</xsl:text>
    <xsl:text>&lt;/Transition &gt;&nl;</xsl:text>
  </xsl:template>
  
  <xsl:template name="qid">
    <xsl:param name="name" required="yes"/>
    <xsl:param name="suffix" required="no"/>
    
    <xsl:text>&lt;QID name="</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:if test="$suffix">
      <xsl:text>.</xsl:text>
      <xsl:value-of select="$suffix"/>
    </xsl:if>
    <xsl:text>"&gt;&nl;</xsl:text>
    
    <xsl:text>&lt;ID name="</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>"/&gt;&nl;</xsl:text>
    
    <xsl:if test="$suffix">
      
      <xsl:text>&lt;ID name="</xsl:text>
      <xsl:value-of select="$suffix"/>
      <xsl:text>"/&gt;&nl;</xsl:text>
    </xsl:if>
    
    <xsl:text>&lt;/QID&gt;&nl;</xsl:text>
  </xsl:template>
  
  <xsl:template name="priorities">
    <xsl:param name="priorities" required="yes"/>
    <xsl:text>&nl;&tab;priority&nl;</xsl:text>
    <xsl:value-of select="$priorities"/>
    <xsl:text>&tab;end&nl;</xsl:text>
  </xsl:template>
  
  <xsl:template name="priority">
    <xsl:param name="greater" required="yes"/>
    <xsl:param name="lesser" required="yes"/>
    <item>
      <xsl:text>&tab;&tab;</xsl:text>
      <xsl:value-of select="$greater"/>
      <xsl:text> &tab;&gt;&tab;</xsl:text>
      <xsl:value-of select="$lesser"/>
      <xsl:text>&nl;</xsl:text>
    </item>
  </xsl:template>
  
  <xsl:template name="foreach">
    <xsl:param name="variable" required="yes"/>
    <xsl:param name="collection" required="yes"/>
    <xsl:param name="statements"/>
    <xsl:text>&tab;&tab;foreach </xsl:text>
    <xsl:value-of select="$variable"/>
    <xsl:text> in </xsl:text>
    <xsl:value-of select="$collection"/>
    <xsl:text> do &nl;&tab;</xsl:text>
    <xsl:value-of select="$statements"/>
    <xsl:text>&tab;&tab;end;&nl;</xsl:text> 
  </xsl:template>
</xsl:stylesheet>

